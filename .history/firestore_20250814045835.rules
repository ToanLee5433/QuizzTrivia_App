rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    // Users collection
    match /users/{userId} {
      // Allow all authenticated users to read user profiles (used by leaderboard, admin, etc.)
      allow read: if request.auth != null;
      
      // Users can write their own document; admins can write any
      allow write: if request.auth != null && (
        request.auth.uid == userId || isAdmin()
      );
    }
    
    // Multiplayer rooms rules
    match /multiplayer_rooms/{roomId} {
      // Allow authenticated users to read any room
      allow read: if request.auth != null;
      
      // Allow authenticated users to create new rooms
      allow create: if request.auth != null;
      
      // Allow any authenticated player in the room to update room game state 
      // (removing host restriction - all players are equal)
      allow update: if request.auth != null && 
        exists(/databases/$(database)/documents/multiplayer_rooms/$(roomId)/players/$(request.auth.uid));
      
      // Allow room creator to delete room
      allow delete: if request.auth != null;
      
      // Players subcollection
      match /players/{playerId} {
        // Allow authenticated users to read players
        allow read: if request.auth != null;
        
        // Allow authenticated users to add themselves as players
        allow create: if request.auth != null 
          && request.auth.uid == playerId;
        
        // Allow players to update only presence/ready status and answers on their own doc
        allow update: if request.auth != null 
          && (
            (
              request.auth.uid == playerId &&
              request.resource.data.diff(resource.data).changedKeys().hasOnly(['isOnline','isReady','answers'])
            ) || (
              // Host may update player score
              get(/databases/$(database)/documents/multiplayer_rooms/$(roomId)).data.hostId == request.auth.uid &&
              request.resource.data.diff(resource.data).changedKeys().hasOnly(['score'])
            )
          );
        
        // Allow host to delete players (kick)
        allow delete: if request.auth != null 
          && get(/databases/$(database)/documents/multiplayer_rooms/$(roomId)).data.hostId == request.auth.uid;
      }
      
      // Messages subcollection
      match /messages/{messageId} {
        // Allow authenticated users to read messages
        allow read: if request.auth != null;
        
        // Allow authenticated users to create messages
        // Our app writes messages with field `userId`, not `senderId`
        // Allow normal messages by the same authenticated user, and allow system messages
        allow create: if request.auth != null 
          && (
            request.resource.data.userId == request.auth.uid ||
            request.resource.data.type == 'system'
          );
        
        // Don't allow message updates or deletes
        allow update, delete: if false;
      }
      
      // Game state subcollection
      match /gameState/{stateId} {
        // Allow authenticated users to read game state
        allow read: if request.auth != null;
        
        // Only host can update game state
        allow write: if request.auth != null 
          && get(/databases/$(database)/documents/multiplayer_rooms/$(roomId)).data.hostId == request.auth.uid;
      }
    }

    // Submissions per question (immutable creates)
    match /multiplayer_rooms/{roomId}/submissions/{submissionId} {
      allow read: if request.auth != null
        && exists(/databases/$(database)/documents/multiplayer_rooms/$(roomId)/players/$(request.auth.uid));
      // Create only if owned by user, user is in room, and doc doesn't already exist
      allow create: if request.auth != null
        && request.resource.data.playerId == request.auth.uid
        && exists(/databases/$(database)/documents/multiplayer_rooms/$(roomId)/players/$(request.auth.uid))
        && !exists(/databases/$(database)/documents/multiplayer_rooms/$(roomId)/submissions/$(submissionId));
      // No updates or deletes to preserve integrity
      allow update, delete: if false;
    }
    
    // Quizzes collection
    match /quizzes/{quizId} {
      // Allow all authenticated users to read quizzes
      allow read: if request.auth != null;
      
      // Allow authenticated users to create quizzes
      allow create: if request.auth != null;
      
      // Allow quiz creators to update/delete their own quizzes
      allow update, delete: if request.auth != null 
        && resource.data.createdBy == request.auth.uid;
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      // Allow all authenticated users to read reviews
      allow read: if request.auth != null;
      
      // Allow authenticated users to create reviews
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      
      // Allow users to update/delete their own reviews
      allow update, delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }
    
    // System notifications collection
    match /system_notifications/{notificationId} {
      // Allow all authenticated users to read system notifications
      allow read: if request.auth != null;
      
      // Only admins can create/update/delete system notifications
      allow write: if isAdmin();
    }
    
    // User favorites collection
    match /user_favorites/{userId} {
      // Allow users to read/write their own favorites
      allow read, write: if request.auth != null 
        && request.auth.uid == userId;
    }
    
    // Quiz results collection
    match /quizResults/{resultId} {
      // Allow authenticated users to read quiz results
      allow read: if request.auth != null;
      
      // Allow authenticated users to create their own quiz results
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      
      // Allow users to update/delete their own quiz results
      allow update, delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }
    
    // Edit requests collection
    match /editRequests/{requestId} {
      // Allow authenticated users to read edit requests
      allow read: if request.auth != null;
      
      // Allow authenticated users to create edit requests
      allow create: if request.auth != null 
        && request.resource.data.requestedBy == request.auth.uid;
      
      // Allow users to update/delete their own edit requests
      allow update, delete: if request.auth != null 
        && resource.data.requestedBy == request.auth.uid;
    }
    
    // Categories collection
    match /categories/{categoryId} {
      // Allow all authenticated users to read categories
      allow read: if request.auth != null;
      
      // Only admins can create/update/delete categories
      allow write: if isAdmin();
    }

    // Quiz reviews collection
    match /quizReviews/{reviewId} {
      // Allow all users to read reviews (non-sensitive public ratings)
      allow read: if true;
      
      // Allow authenticated users to create reviews for themselves
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Allow users to update/delete their own reviews
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Safety: if any quizReviews exist as subcollections, still allow public read
    match /{path=**}/quizReviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Per-user notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications; admins can read all
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      
      // Only admins create notifications (system messages)
      allow create: if isAdmin();
      
      // Users can mark their own notifications as read; admins can update
      allow update: if request.auth != null && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      
      // Allow delete by owner or admin
      allow delete: if request.auth != null && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }
    
    // Default: deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
