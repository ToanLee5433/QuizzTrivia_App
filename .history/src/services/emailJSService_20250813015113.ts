import emailjs from '@emailjs/browser';

// EmailJS Configuration - ƒê√É C·∫¨P NH·∫¨T V·ªöI TH√îNG TIN TH·ª∞C T·∫æ
const EMAILJS_CONFIG = {
  SERVICE_ID: 'service_z0wmuk1', 
  TEMPLATE_ID: 'template_quiz_otp', 
  PUBLIC_KEY: 'EsTsdBR5D5grAFCfF'
};

export class EmailJSService {
  private static instance: EmailJSService;

  private constructor() {
    // Initialize EmailJS with public key
    emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);
  }

  static getInstance(): EmailJSService {
    if (!EmailJSService.instance) {
      EmailJSService.instance = new EmailJSService();
    }
    return EmailJSService.instance;
  }

  async sendOTPEmail(email: string, otpCode: string): Promise<{ success: boolean; messageKey: string; params?: any }> {
    try {
      // Ki·ªÉm tra email ƒë·∫ßu v√†o
      if (!email || email.trim() === '') {
        throw new Error('email.required');
      }

      console.log('üîß EmailJS Config ƒë√£ s·∫µn s√†ng:', {
        SERVICE_ID: EMAILJS_CONFIG.SERVICE_ID,
        TEMPLATE_ID: EMAILJS_CONFIG.TEMPLATE_ID,
        PUBLIC_KEY: EMAILJS_CONFIG.PUBLIC_KEY.substring(0, 5) + '...'
      });

      const templateParams = {
        // QUAN TR·ªåNG: EmailJS c·∫ßn field n√†y ƒë·ªÉ bi·∫øt g·ª≠i ƒë·∫øn ƒë√¢u
        to_email: email.trim(),
        to_name: email.split('@')[0],
        user_email: email.trim(), // Backup field
        
        // OTP data
        otp_code: otpCode,
        
        // App info
        app_name: 'Quiz Trivia App',
        from_name: 'Quiz Trivia Team',
        message: `M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: ${otpCode}. M√£ n√†y c√≥ hi·ªáu l·ª±c trong 10 ph√∫t.`,
        
        // Email settings
        reply_to: 'noreply@quiztrivia.com'
      };

      console.log('üöÄ ƒêang g·ª≠i OTP email ƒë·∫øn:', email);
      console.log('üìß Template params ƒë·∫ßy ƒë·ªß:', templateParams);
      
      const response = await emailjs.send(
        EMAILJS_CONFIG.SERVICE_ID,
        EMAILJS_CONFIG.TEMPLATE_ID,
        templateParams,
        EMAILJS_CONFIG.PUBLIC_KEY
      );

      console.log('‚úÖ EmailJS Response th√†nh c√¥ng:', response);

      if (response.status === 200) {
        return {
          success: true,
          messageKey: 'email.otpSent',
          params: { email }
        };
      } else {
        throw new Error(`EmailJS error: ${response.text}`);
      }
    } catch (error: any) {
      console.error('‚ùå EmailJS g·∫∑p l·ªói:', error);
      console.error('‚ùå Chi ti·∫øt l·ªói:', {
        name: error.name,
        message: error.message,
        text: error.text,
        status: error.status
      });
      
      // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ
      if (error.text) {
        if (error.text.includes('recipients address is empty')) {
          return {
            success: false,
            messageKey: 'email.errors.configurationError'
          };
        }
        if (error.text.includes('template') || error.text.includes('Template')) {
          return {
            success: false,
            messageKey: 'email.errors.templateError',
            params: { templateId: EMAILJS_CONFIG.TEMPLATE_ID }
          };
        }
        if (error.text.includes('service') || error.text.includes('Service')) {
          return {
            success: false,
            messageKey: 'email.errors.serviceError',
            params: { serviceId: EMAILJS_CONFIG.SERVICE_ID }
          };
        }
        if (error.text.includes('public key') || error.text.includes('Public Key')) {
          return {
            success: false,
            messageKey: 'email.errors.keyError'
          };
        }
      }
      
      // L·ªói kh√°c
      return {
        success: false,
        messageKey: 'email.errors.sendFailed',
        params: { error: error.text || error.message || 'Unknown error' }
      };
    }
  }
}

export const emailJSService = EmailJSService.getInstance();
