#!/usr/bin/env node

import fs from 'fs-extra';

// Missing keys to add
const missingKeys = {
  vi: {
    "common": {
      "accuracy": "ƒê·ªô ch√≠nh x√°c",
      "avgTime": "Th·ªùi gian trung b√¨nh",
      "back": "Quay l·∫°i", 
      "cancel": "H·ªßy",
      "checkingAuth": "ƒêang ki·ªÉm tra ƒëƒÉng nh·∫≠p...",
      "connecting": "ƒêang k·∫øt n·ªëi...",
      "correct": "ƒê√∫ng",
      "guide": "H∆∞·ªõng d·∫´n",
      "loading": "ƒêang t·∫£i...",
      "loadingData": "ƒêang t·∫£i d·ªØ li·ªáu...",
      "messages": "tin nh·∫Øn",
      "minutes": "ph√∫t",
      "offline": "Ngo·∫°i tuy·∫øn",
      "online": "Tr·ª±c tuy·∫øn",
      "or": "ho·∫∑c",
      "pleaseWait": "Vui l√≤ng ch·ªù...",
      "points": "ƒëi·ªÉm",
      "rank": "X·∫øp h·∫°ng",
      "recommended": "Khuy·∫øn ngh·ªã",
      "start": "B·∫Øt ƒë·∫ßu",
      "submit": "X√°c nh·∫≠n",
      "tryAgain": "Th·ª≠ l·∫°i",
      "you": "B·∫°n"
    },
    "admin": {
      "advancedStatsDescription": "Th·ªëng k√™ chi ti·∫øt v·ªÅ ho·∫°t ƒë·ªông c·ªßa h·ªá th·ªëng",
      "backToOverview": "Quay l·∫°i t·ªïng quan",
      "currentTab": "Tab hi·ªán t·∫°i",
      "dataLoadSuccess": "T·∫£i d·ªØ li·ªáu th√†nh c√¥ng",
      "exportDataDevelopment": "Xu·∫•t d·ªØ li·ªáu ph√°t tri·ªÉn",
      "greeting": "Ch√†o m·ª´ng ƒë·∫øn trang qu·∫£n tr·ªã",
      "quizApprovalError": "L·ªói khi duy·ªát quiz",
      "quizApproved": "Quiz ƒë√£ ƒë∆∞·ª£c duy·ªát",
      "quizRejected": "Quiz ƒë√£ b·ªã t·ª´ ch·ªëi",
      "quizRejectionError": "L·ªói khi t·ª´ ch·ªëi quiz",
      "viewingStatsSection": "ƒêang xem ph·∫ßn th·ªëng k√™",
      "stats": {
        "completionAttempts": "L∆∞·ª£t ho√†n th√†nh",
        "publishedQuizzes": "Quiz ƒë√£ xu·∫•t b·∫£n",
        "totalCreators": "T·ªïng s·ªë creator",
        "totalUsers": "T·ªïng s·ªë ng∆∞·ªùi d√πng",
        "userGrowth": "TƒÉng tr∆∞·ªüng ng∆∞·ªùi d√πng"
      },
      "tabs": {
        "categories": "Danh m·ª•c",
        "categoryManagement": "Qu·∫£n l√Ω danh m·ª•c",
        "overview": "T·ªïng quan",
        "overviewStats": "Th·ªëng k√™ t·ªïng quan",
        "quizManagement": "Qu·∫£n l√Ω quiz",
        "quizzes": "Quiz",
        "userManagement": "Qu·∫£n l√Ω ng∆∞·ªùi d√πng",
        "users": "Ng∆∞·ªùi d√πng"
      }
    },
    "auth": {
      "logout": "ƒêƒÉng xu·∫•t",
      "registrationCancelled": "ƒêƒÉng k√Ω ƒë√£ b·ªã h·ªßy",
      "errors": {
        "emailAlreadyInUse": "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng",
        "otpSendError": "L·ªói g·ª≠i m√£ OTP",
        "registerError": "L·ªói ƒëƒÉng k√Ω", 
        "registrationDataNotFound": "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒëƒÉng k√Ω",
        "weakPassword": "M·∫≠t kh·∫©u qu√° y·∫øu"
      },
      "validation": {
        "displayNameRequired": "T√™n hi·ªÉn th·ªã l√† b·∫Øt bu·ªôc",
        "emailInvalid": "Email kh√¥ng h·ª£p l·ªá",
        "emailRequired": "Email l√† b·∫Øt bu·ªôc",
        "passwordMismatch": "M·∫≠t kh·∫©u kh√¥ng kh·ªõp",
        "passwordRequired": "M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc",
        "passwordTooShort": "M·∫≠t kh·∫©u qu√° ng·∫Øn",
        "termsRequired": "B·∫°n ph·∫£i ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n"
      }
    },
    "quiz": {
      "enterAnswer": "Nh·∫≠p c√¢u tr·∫£ l·ªùi",
      "exploreDescription": "Kh√°m ph√° c√°c quiz th√∫ v·ªã",
      "exploreQuizzes": "Kh√°m ph√° Quiz",
      "selectedQuiz": "Quiz ƒë√£ ch·ªçn",
      "untitled": "Ch∆∞a c√≥ ti√™u ƒë·ªÅ"
    },
    "leaderboard": {
      "collapse": "Thu g·ªçn",
      "searchPlayers": "T√¨m ki·∫øm ng∆∞·ªùi ch∆°i",
      "viewMore": "Xem th√™m"
    },
    "landing": {
      "features": {
        "diversity": {
          "title": "ƒêa d·∫°ng ch·ªß ƒë·ªÅ",
          "description": "H√†ng ngh√¨n quiz v·ªÅ m·ªçi lƒ©nh v·ª±c"
        },
        "ranking": {
          "description": "Thi ƒë·∫•u v√† so t√†i v·ªõi b·∫°n b√®"
        },
        "realtime": {
          "description": "Tr·∫£i nghi·ªám ch∆°i th·ªùi gian th·ª±c"
        }
      }
    },
    "errors": {
      "firestoreConnection": "L·ªói k·∫øt n·ªëi Firestore"
    },
    "messages": {
      "retrying": "ƒêang th·ª≠ l·∫°i..."
    },
    "connected": "ƒê√£ k·∫øt n·ªëi",
    "disconnected": "M·∫•t k·∫øt n·ªëi"
  },
  en: {
    "common": {
      "accuracy": "Accuracy",
      "avgTime": "Average Time",
      "back": "Back",
      "cancel": "Cancel", 
      "checkingAuth": "Checking authentication...",
      "connecting": "Connecting...",
      "correct": "Correct",
      "guide": "Guide",
      "loading": "Loading...",
      "loadingData": "Loading data...",
      "messages": "messages",
      "minutes": "minutes",
      "offline": "Offline",
      "online": "Online",
      "or": "or",
      "pleaseWait": "Please wait...",
      "points": "points",
      "rank": "Rank",
      "recommended": "Recommended",
      "start": "Start",
      "submit": "Submit",
      "tryAgain": "Try Again",
      "you": "You"
    },
    "admin": {
      "advancedStatsDescription": "Advanced statistics about system activity",
      "backToOverview": "Back to Overview",
      "currentTab": "Current Tab",
      "dataLoadSuccess": "Data loaded successfully",
      "exportDataDevelopment": "Export Development Data",
      "greeting": "Welcome to Admin Panel",
      "quizApprovalError": "Error approving quiz",
      "quizApproved": "Quiz approved",
      "quizRejected": "Quiz rejected",
      "quizRejectionError": "Error rejecting quiz",
      "viewingStatsSection": "Viewing stats section",
      "stats": {
        "completionAttempts": "Completion Attempts",
        "publishedQuizzes": "Published Quizzes",
        "totalCreators": "Total Creators",
        "totalUsers": "Total Users",
        "userGrowth": "User Growth"
      },
      "tabs": {
        "categories": "Categories",
        "categoryManagement": "Category Management",
        "overview": "Overview",
        "overviewStats": "Overview Stats",
        "quizManagement": "Quiz Management",
        "quizzes": "Quizzes",
        "userManagement": "User Management",
        "users": "Users"
      }
    },
    "auth": {
      "logout": "Logout",
      "registrationCancelled": "Registration cancelled",
      "errors": {
        "emailAlreadyInUse": "Email already in use",
        "otpSendError": "OTP send error",
        "registerError": "Registration error",
        "registrationDataNotFound": "Registration data not found",
        "weakPassword": "Password too weak"
      },
      "validation": {
        "displayNameRequired": "Display name is required",
        "emailInvalid": "Email is invalid",
        "emailRequired": "Email is required",
        "passwordMismatch": "Passwords don't match",
        "passwordRequired": "Password is required",
        "passwordTooShort": "Password too short",
        "termsRequired": "You must agree to terms"
      }
    },
    "quiz": {
      "enterAnswer": "Enter answer",
      "exploreDescription": "Explore interesting quizzes",
      "exploreQuizzes": "Explore Quizzes",
      "selectedQuiz": "Selected Quiz",
      "untitled": "Untitled"
    },
    "leaderboard": {
      "collapse": "Collapse",
      "searchPlayers": "Search Players",
      "viewMore": "View More"
    },
    "landing": {
      "features": {
        "diversity": {
          "title": "Diverse Topics",
          "description": "Thousands of quizzes across all fields"
        },
        "ranking": {
          "description": "Compete and challenge friends"
        },
        "realtime": {
          "description": "Real-time gaming experience"
        }
      }
    },
    "errors": {
      "firestoreConnection": "Firestore connection error"
    },
    "messages": {
      "retrying": "Retrying..."
    },
    "connected": "Connected",
    "disconnected": "Disconnected"
  }
};

function deepMerge(target, source) {
  for (const key in source) {
    if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
      if (!target[key]) target[key] = {};
      deepMerge(target[key], source[key]);
    } else {
      target[key] = source[key];
    }
  }
  return target;
}

async function addMissingKeys() {
  console.log('üîß Adding missing i18n keys...');
  
  // Process Vietnamese
  console.log('üìù Processing Vietnamese locale...');
  const viPath = './public/locales/vi/common.json';
  const viData = await fs.readJSON(viPath);
  const viMerged = deepMerge(viData, missingKeys.vi);
  await fs.writeJSON(viPath, viMerged, { spaces: 2 });
  
  // Process English
  console.log('üìù Processing English locale...');
  const enPath = './public/locales/en/common.json';
  const enData = await fs.readJSON(enPath);
  const enMerged = deepMerge(enData, missingKeys.en);
  await fs.writeJSON(enPath, enMerged, { spaces: 2 });
  
  console.log('‚úÖ Missing keys added successfully!');
}

addMissingKeys().catch(console.error);
