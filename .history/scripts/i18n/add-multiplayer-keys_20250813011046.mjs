#!/usr/bin/env node

import fs from 'fs-extra';

// Additional missing keys for multiplayer game modes and features
const additionalKeys = {
  vi: {
    "multiplayer": {
      "avgScore": "ƒêi·ªÉm trung b√¨nh",
      "backToLobby": "Quay l·∫°i ph√≤ng ch·ªù",
      "chat": {
        "disabled": "Chat ƒë√£ t·∫Øt",
        "noMessages": "Ch∆∞a c√≥ tin nh·∫Øn n√†o",
        "placeholder": "Nh·∫≠p tin nh·∫Øn...",
        "title": "Chat"
      },
      "createRoomDesc": "T·∫°o ph√≤ng m·ªõi v·ªõi quiz c·ªßa b·∫°n",
      "easySetupDesc": "T·∫°o ph√≤ng ƒë∆°n gi·∫£n, chia s·∫ª m√£ tham gia",
      "enterPassword": "Nh·∫≠p m·∫≠t kh·∫©u...",
      "enterRoomCode": "Nh·∫≠p m√£ ph√≤ng...",
      "enterRoomName": "Nh·∫≠p t√™n ph√≤ng...",
      "errors": {
        "connectionFailed": "K·∫øt n·ªëi th·∫•t b·∫°i",
        "connectionLost": "M·∫•t k·∫øt n·ªëi",
        "gameInProgress": "Game ƒëang di·ªÖn ra",
        "reconnecting": "ƒêang k·∫øt n·ªëi l·∫°i",
        "roomFull": "Ph√≤ng ƒë√£ ƒë·∫ßy",
        "roomNotFound": "Kh√¥ng t√¨m th·∫•y ph√≤ng",
        "wrongPassword": "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng"
      },
      "features": "T√≠nh nƒÉng Multiplayer",
      "game": {
        "finalResults": "K·∫øt qu·∫£ cu·ªëi c√πng",
        "gameOver": "Game k·∫øt th√∫c"
      },
      "guideDesc": "T√¨m hi·ªÉu c√°ch ch∆°i multiplayer",
      "joinRoomDesc": "Tham gia ph√≤ng c√≥ s·∫µn ho·∫∑c nh·∫≠p m√£ ph√≤ng",
      "leaderboardDesc": "B·∫£ng x·∫øp h·∫°ng tr·ª±c ti·∫øp, c·∫°nh tranh ƒëi·ªÉm s·ªë",
      "maxPlayers": "S·ªë ng∆∞·ªùi t·ªëi ƒëa",
      "password": "M·∫≠t kh·∫©u",
      "passwordRequired": "Ph√≤ng n√†y y√™u c·∫ßu m·∫≠t kh·∫©u",
      "playAgain": "Ch∆°i l·∫°i",
      "private": "Ph√≤ng ri√™ng t∆∞",
      "quickScoringDesc": "ƒêi·ªÉm cao h∆°n khi tr·∫£ l·ªùi nhanh v√† ch√≠nh x√°c",
      "readyPlayers": "ƒê√£ s·∫µn s√†ng",
      "realTimeDesc": "Ch∆°i c√πng l√∫c v·ªõi b·∫°n b√®, ƒë·ªìng b·ªô th·ªùi gian th·ª±c",
      "roomCodeHint": "M√£ ph√≤ng g·ªìm 6 k√Ω t·ª±",
      "roomName": "T√™n ph√≤ng",
      "roomSettings": "C√†i ƒë·∫∑t ph√≤ng",
      "showLeaderboard": "Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng",
      "startingIn": "B·∫Øt ƒë·∫ßu trong",
      "subtitle": "Tham gia ph√≤ng v√† thi ƒë·∫•u v·ªõi ng∆∞·ªùi kh√°c",
      "success": {
        "connectionRestored": "K·∫øt n·ªëi ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c",
        "gameStarted": "Game ƒë√£ b·∫Øt ƒë·∫ßu",
        "joinedRoom": "Tham gia ph√≤ng th√†nh c√¥ng",
        "leftRoom": "ƒê√£ r·ªùi ph√≤ng",
        "roomCreated": "T·∫°o ph√≤ng th√†nh c√¥ng"
      },
      "timeLimit": "Th·ªùi gian m·ªói c√¢u",
      "timePerQuestion": "Th·ªùi gian/c√¢u",
      "totalPlayers": "T·ªïng ng∆∞·ªùi ch∆°i",
      "totalQuestions": "T·ªïng s·ªë c√¢u h·ªèi",
      "totalTime": "T·ªïng th·ªùi gian",
      "waitingForPlayer": "Ch·ªù ng∆∞·ªùi ch∆°i...",
      "yourResult": "K·∫øt qu·∫£ c·ªßa b·∫°n"
    },
    "gameMode": {
      "becomeHost": "Tr·ªü th√†nh ch·ªß ph√≤ng",
      "createRoom": "T·∫°o ph√≤ng",
      "createRoomDesc": "B·∫Øt ƒë·∫ßu game m·ªõi v√† m·ªùi b·∫°n b√®",
      "customizable": "T√πy ch·ªânh c√†i ƒë·∫∑t",
      "customizeSettings": "T√πy ch·ªânh c√†i ƒë·∫∑t game",
      "invitePlayers": "M·ªùi t·ªëi ƒëa 10 ng∆∞·ªùi ch∆°i",
      "multiplayer": "Ch∆°i nhi·ªÅu ng∆∞·ªùi",
      "multiplayerDesc": "Th√°ch th·ª©c b·∫°n b√® v√† thi ƒë·∫•u th·ªùi gian th·ª±c",
      "noPressure": "Kh√¥ng √°p l·ª±c th·ªùi gian",
      "singlePlayer": "Ch∆°i m·ªôt m√¨nh",
      "singlePlayerDesc": "Luy·ªán t·∫≠p theo t·ªëc ƒë·ªô ri√™ng v√† n√¢ng cao k·ªπ nƒÉng",
      "startSolo": "B·∫Øt ƒë·∫ßu ch∆°i",
      "trackProgress": "Theo d√µi ti·∫øn ƒë·ªô"
    }
  },
  en: {
    "multiplayer": {
      "avgScore": "Average Score",
      "backToLobby": "Back to Lobby",
      "game": {
        "finalResults": "Final Results",
        "gameOver": "Game Over"
      },
      "playAgain": "Play Again",
      "totalQuestions": "Total Questions",
      "totalTime": "Total Time",
      "yourResult": "Your Result"
    }
  }
};

function deepMerge(target, source) {
  for (const key in source) {
    if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
      if (!target[key]) target[key] = {};
      deepMerge(target[key], source[key]);
    } else {
      target[key] = source[key];
    }
  }
  return target;
}

async function addAdditionalKeys() {
  console.log('üîß Adding additional multiplayer keys...');
  
  // Process Vietnamese
  console.log('üìù Processing Vietnamese locale...');
  const viPath = './public/locales/vi/common.json';
  const viData = await fs.readJSON(viPath);
  const viMerged = deepMerge(viData, additionalKeys.vi);
  await fs.writeJSON(viPath, viMerged, { spaces: 2 });
  
  // Process English
  console.log('üìù Processing English locale...');
  const enPath = './public/locales/en/common.json';
  const enData = await fs.readJSON(enPath);
  const enMerged = deepMerge(enData, additionalKeys.en);
  await fs.writeJSON(enPath, enMerged, { spaces: 2 });
  
  console.log('‚úÖ Additional multiplayer keys added successfully!');
}

addAdditionalKeys().catch(console.error);
