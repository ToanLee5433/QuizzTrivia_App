import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const newKeys = {
  resources: {
    title: "T√†i li·ªáu h·ªçc t·∫≠p",
    required: "B·∫Øt bu·ªôc",
    recommended: "Khuy·∫øn ngh·ªã",
    addResource: "Th√™m t√†i li·ªáu",
    firstResource: "Th√™m t√†i li·ªáu ƒë·∫ßu ti√™n",
    editResource: "S·ª≠a t√†i li·ªáu",
    newResource: "Th√™m t√†i li·ªáu m·ªõi",
    saveButton: "Th√™m",
    updateButton: "C·∫≠p nh·∫≠t",
    cancelButton: "H·ªßy",
    deleteButton: "X√≥a",
    editButton: "S·ª≠a",
    
    subtitle: "Th√™m √≠t nh·∫•t 1 t√†i li·ªáu (video, PDF, ·∫£nh, ho·∫∑c link) ƒë·ªÉ h·ªçc vi√™n xem tr∆∞·ªõc khi l√†m b√†i",
    
    emptyState: {
      warning: "‚ö†Ô∏è B·∫Øt bu·ªôc c√≥ √≠t nh·∫•t 1 t√†i li·ªáu",
      description: "T√†i li·ªáu gi√∫p h·ªçc vi√™n chu·∫©n b·ªã t·ªët h∆°n tr∆∞·ªõc khi l√†m b√†i.",
      cannotContinue: "B·∫°n kh√¥ng th·ªÉ ti·∫øp t·ª•c n·∫øu ch∆∞a th√™m t√†i li·ªáu."
    },
    
    confirmDelete: "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t√†i li·ªáu n√†y?",
    
    success: {
      deleted: "ƒê√£ x√≥a t√†i li·ªáu",
      updated: "ƒê√£ c·∫≠p nh·∫≠t t√†i li·ªáu",
      added: "ƒê√£ th√™m t√†i li·ªáu",
      imageUploaded: "‚úÖ Upload ·∫£nh th√†nh c√¥ng!",
      videoUploaded: "‚úÖ Upload video th√†nh c√¥ng!",
      pdfUploaded: "‚úÖ Upload pdf th√†nh c√¥ng!",
      audioUploaded: "‚úÖ Upload audio th√†nh c√¥ng!"
    },
    
    errors: {
      fileTooLarge: "File qu√° l·ªõn! T·ªëi ƒëa {{size}}MB cho {{type}}",
      invalidFormat: "‚ùå ƒê·ªãnh d·∫°ng file kh√¥ng h·ª£p l·ªá cho {{type}}!",
      uploadFailed: "Upload th·∫•t b·∫°i",
      uploadError: "L·ªói upload: {{error}}",
      titleRequired: "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ",
      urlRequired: "Vui l√≤ng nh·∫≠p URL ho·∫∑c upload file",
      videoOnly: "‚ùå Ch·ªâ ch·∫•p nh·∫≠n file video! (MP4, WebM, MOV, AVI)",
      pdfOnly: "‚ùå Ch·ªâ ch·∫•p nh·∫≠n file PDF!",
      audioOnly: "‚ùå Ch·ªâ ch·∫•p nh·∫≠n file audio! (MP3, WAV, OGG, M4A)",
      imageOnly: "‚ùå Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh! (JPG, PNG, WebP, GIF)"
    },
    
    form: {
      typeLabel: "Lo·∫°i t√†i li·ªáu *",
      titleLabel: "Ti√™u ƒë·ªÅ *",
      titlePlaceholder: "VD: Gi·ªõi thi·ªáu v·ªÅ React Hooks",
      descriptionLabel: "M√¥ t·∫£",
      descriptionPlaceholder: "M√¥ t·∫£ ng·∫Øn g·ªçn n·ªôi dung t√†i li·ªáu...",
      
      urlLabel: {
        link: "URL (YouTube/Web) *",
        video: "Upload Video ho·∫∑c nh·∫≠p URL *",
        pdf: "Upload PDF ho·∫∑c nh·∫≠p URL *",
        audio: "Upload Audio ho·∫∑c nh·∫≠p URL *",
        image: "Upload ·∫¢nh ho·∫∑c nh·∫≠p URL *"
      },
      
      urlPlaceholder: {
        link: "https://youtube.com/watch?v=... ho·∫∑c https://...",
        video: "https://example.com/video.mp4",
        pdf: "https://example.com/document.pdf",
        audio: "https://example.com/audio.mp3",
        image: "https://example.com/image.jpg"
      },
      
      linkHint: "üí° H·ªó tr·ª£: YouTube, Google Drive, ho·∫∑c b·∫•t k·ª≥ URL n√†o",
      
      acceptedFormats: {
        video: "‚úÖ Ch·∫•p nh·∫≠n: MP4, WebM, MOV, AVI (t·ªëi ƒëa 50MB)",
        pdf: "‚úÖ Ch·∫•p nh·∫≠n: PDF (t·ªëi ƒëa 10MB)",
        audio: "‚úÖ Ch·∫•p nh·∫≠n: MP3, WAV, OGG, M4A (t·ªëi ƒëa 10MB)",
        image: "‚úÖ Ch·∫•p nh·∫≠n: JPG, PNG, WebP, GIF (t·ªëi ƒëa 5MB)"
      },
      
      orDivider: "ho·∫∑c",
      uploading: "ƒêang upload...",
      urlReady: "‚úÖ URL ƒë√£ s·∫µn s√†ng",
      
      requiredLabel: "B·∫Øt bu·ªôc xem",
      requiredDescription: "H·ªçc vi√™n ph·∫£i xem t√†i li·ªáu n√†y tr∆∞·ªõc khi l√†m b√†i",
      
      whyWatchLabel: "üí° V√¨ sao n√™n xem? (g·ª£i √Ω cho h·ªçc vi√™n)",
      whyWatchPlaceholder: "VD: Video n√†y gi√∫p b·∫°n hi·ªÉu useState v√† useEffect",
      
      estimatedTimeLabel: "‚è±Ô∏è Th·ªùi gian ∆∞·ªõc t√≠nh (ph√∫t)",
      estimatedTimePlaceholder: "10"
    },
    
    types: {
      video: "Video",
      pdf: "PDF",
      image: "·∫¢nh/Slide",
      audio: "Audio",
      link: "Link (YouTube/Web)",
      slides: "Slides"
    },
    
    estimatedTime: "‚è±Ô∏è {{time}} ph√∫t",
    whyWatch: "üí° {{reason}}"
  }
};

// Add keys to both VI and EN files
const localesDir = path.join(__dirname, '..', 'public', 'locales');

// Vietnamese
const viPath = path.join(localesDir, 'vi', 'common.json');
const viData = JSON.parse(fs.readFileSync(viPath, 'utf-8'));
viData.resources = newKeys.resources;
fs.writeFileSync(viPath, JSON.stringify(viData, null, 2), 'utf-8');

// English - Translate
const enKeys = {
  resources: {
    title: "Learning Resources",
    required: "Required",
    recommended: "Recommended",
    addResource: "Add Resource",
    firstResource: "Add First Resource",
    editResource: "Edit Resource",
    newResource: "Add New Resource",
    saveButton: "Add",
    updateButton: "Update",
    cancelButton: "Cancel",
    deleteButton: "Delete",
    editButton: "Edit",
    
    subtitle: "Add at least 1 resource (video, PDF, image, or link) for learners to view before taking the quiz",
    
    emptyState: {
      warning: "‚ö†Ô∏è At least 1 resource required",
      description: "Resources help learners prepare better before taking the quiz.",
      cannotContinue: "You cannot continue without adding a resource."
    },
    
    confirmDelete: "Are you sure you want to delete this resource?",
    
    success: {
      deleted: "Resource deleted",
      updated: "Resource updated",
      added: "Resource added",
      imageUploaded: "‚úÖ Image uploaded successfully!",
      videoUploaded: "‚úÖ Video uploaded successfully!",
      pdfUploaded: "‚úÖ PDF uploaded successfully!",
      audioUploaded: "‚úÖ Audio uploaded successfully!"
    },
    
    errors: {
      fileTooLarge: "File too large! Maximum {{size}}MB for {{type}}",
      invalidFormat: "‚ùå Invalid file format for {{type}}!",
      uploadFailed: "Upload failed",
      uploadError: "Upload error: {{error}}",
      titleRequired: "Please enter a title",
      urlRequired: "Please enter URL or upload file",
      videoOnly: "‚ùå Only video files accepted! (MP4, WebM, MOV, AVI)",
      pdfOnly: "‚ùå Only PDF files accepted!",
      audioOnly: "‚ùå Only audio files accepted! (MP3, WAV, OGG, M4A)",
      imageOnly: "‚ùå Only image files accepted! (JPG, PNG, WebP, GIF)"
    },
    
    form: {
      typeLabel: "Resource Type *",
      titleLabel: "Title *",
      titlePlaceholder: "E.g: Introduction to React Hooks",
      descriptionLabel: "Description",
      descriptionPlaceholder: "Brief description of the resource content...",
      
      urlLabel: {
        link: "URL (YouTube/Web) *",
        video: "Upload Video or enter URL *",
        pdf: "Upload PDF or enter URL *",
        audio: "Upload Audio or enter URL *",
        image: "Upload Image or enter URL *"
      },
      
      urlPlaceholder: {
        link: "https://youtube.com/watch?v=... or https://...",
        video: "https://example.com/video.mp4",
        pdf: "https://example.com/document.pdf",
        audio: "https://example.com/audio.mp3",
        image: "https://example.com/image.jpg"
      },
      
      linkHint: "üí° Supports: YouTube, Google Drive, or any URL",
      
      acceptedFormats: {
        video: "‚úÖ Accepted: MP4, WebM, MOV, AVI (max 50MB)",
        pdf: "‚úÖ Accepted: PDF (max 10MB)",
        audio: "‚úÖ Accepted: MP3, WAV, OGG, M4A (max 10MB)",
        image: "‚úÖ Accepted: JPG, PNG, WebP, GIF (max 5MB)"
      },
      
      orDivider: "or",
      uploading: "Uploading...",
      urlReady: "‚úÖ URL ready",
      
      requiredLabel: "Required viewing",
      requiredDescription: "Learners must view this resource before taking the quiz",
      
      whyWatchLabel: "üí° Why watch? (hint for learners)",
      whyWatchPlaceholder: "E.g: This video helps you understand useState and useEffect",
      
      estimatedTimeLabel: "‚è±Ô∏è Estimated time (minutes)",
      estimatedTimePlaceholder: "10"
    },
    
    types: {
      video: "Video",
      pdf: "PDF",
      image: "Image/Slide",
      audio: "Audio",
      link: "Link (YouTube/Web)",
      slides: "Slides"
    },
    
    estimatedTime: "‚è±Ô∏è {{time}} minutes",
    whyWatch: "üí° {{reason}}"
  }
};

const enPath = path.join(localesDir, 'en', 'common.json');
const enData = JSON.parse(fs.readFileSync(enPath, 'utf-8'));
enData.resources = enKeys.resources;
fs.writeFileSync(enPath, JSON.stringify(enData, null, 2), 'utf-8');

console.log('‚úÖ Added ResourcesStep translation keys!');
console.log('üì¶ Added resources.* keys with interpolation for {{size}}, {{type}}, {{time}}, {{reason}}, {{error}}');
