# Script to add i18n to multiple components
Write-Host "üåê Adding i18n to Quiz App components..." -ForegroundColor Green

# Array of files and their key text replacements
$files = @(
    @{
        path = "src\features\quiz\pages\LeaderboardPage.tsx"
        searches = @(
            @{ search = "'B·∫£ng x·∫øp h·∫°ng'"; replace = "t('nav.leaderboard', 'B·∫£ng x·∫øp h·∫°ng')" }
            @{ search = "'ƒêi·ªÉm'"; replace = "t('quiz.score', 'ƒêi·ªÉm')" }
            @{ search = "'Ng∆∞·ªùi ch∆°i'"; replace = "t('quiz.players', 'Ng∆∞·ªùi ch∆°i')" }
        )
    },
    @{
        path = "src\shared\pages\Creator.tsx"
        searches = @(
            @{ search = "'C·∫ßn ƒëƒÉng nh·∫≠p'"; replace = "t('auth.loginRequired', 'C·∫ßn ƒëƒÉng nh·∫≠p')" }
            @{ search = "'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang Creator'"; replace = "t('creator.loginMessage', 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang Creator')" }
        )
    },
    @{
        path = "src\features\quiz\pages\CreateQuizPage\index.tsx"
        searches = @(
            @{ search = "'C·∫ßn ƒëƒÉng nh·∫≠p'"; replace = "t('auth.loginRequired', 'C·∫ßn ƒëƒÉng nh·∫≠p')" }
            @{ search = "'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o quiz'"; replace = "t('quiz.createLoginRequired', 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o quiz')" }
        )
    }
)

foreach ($file in $files) {
    $filePath = $file.path
    Write-Host "üìù Processing: $filePath" -ForegroundColor Yellow
    
    if (Test-Path $filePath) {
        $content = Get-Content $filePath -Raw
        
        # Add useTranslation import if not exists
        if ($content -notmatch "useTranslation") {
            $content = $content -replace "(import.*from 'react';)", "`$1`nimport { useTranslation } from 'react-i18next';"
        }
        
        # Add useTranslation hook if not exists
        if ($content -notmatch "const.*=.*useTranslation") {
            $content = $content -replace "(const.*:\s*React\.FC.*= \(\)\s*=>\s*\{)", "`$1`n  const { t } = useTranslation();"
        }
        
        # Apply text replacements
        foreach ($replacement in $file.searches) {
            $content = $content -replace [regex]::Escape($replacement.search), $replacement.replace
        }
        
        Set-Content $filePath $content -Encoding UTF8
        Write-Host "‚úÖ Updated: $filePath" -ForegroundColor Green
    } else {
        Write-Host "‚ùå File not found: $filePath" -ForegroundColor Red
    }
}

Write-Host "üéâ Bulk i18n addition completed!" -ForegroundColor Green
