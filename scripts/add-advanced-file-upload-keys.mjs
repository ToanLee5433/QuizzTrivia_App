#!/usr/bin/env node

/**
 * Th√™m translation keys cho AdvancedFileUpload component
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');

const viPath = path.join(rootDir, 'public/locales/vi/common.json');
const enPath = path.join(rootDir, 'public/locales/en/common.json');

const viData = JSON.parse(fs.readFileSync(viPath, 'utf8'));
const enData = JSON.parse(fs.readFileSync(enPath, 'utf8'));

// Th√™m keys m·ªõi cho file upload
const newKeys = {
  vi: {
    fileUpload: {
      unsupportedFormat: "ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£",
      processing: "ƒêang x·ª≠ l√Ω file: {{filename}}...",
      cannotReadFile: "Kh√¥ng th·ªÉ ƒë·ªçc file",
      extractedSuccess: "ƒê√£ tr√≠ch xu·∫•t {{count}} k√Ω t·ª± t·ª´ file!",
      processingError: "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file",
      sampleContentCreated: "ƒê√£ t·∫°o n·ªôi dung m·∫´u ƒë·ªÉ b·∫°n c√≥ th·ªÉ test AI",
      noContentToGenerate: "Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi",
      connectingToAI: "ƒêang k·∫øt n·ªëi v·ªõi AI service...",
      aiGeneratedSuccess: "‚úÖ AI ƒë√£ t·∫°o {{count}} c√¢u h·ªèi th√†nh c√¥ng!",
      aiGenerationError: "‚ùå L·ªói t·∫°o c√¢u h·ªèi: {{error}}",
      aiError: "L·ªói AI: {{error}}",
      usingSampleQuestions: "ƒêang s·ª≠ d·ª•ng c√¢u h·ªèi m·∫´u thay v√¨ AI",
      importedQuestions: "ƒê√£ import {{count}} c√¢u h·ªèi!",
      apiKeyWorking: "‚úÖ API key ho·∫°t ƒë·ªông!",
      apiKeyError: "‚ùå API key l·ªói: {{message}}",
      networkError: "‚ùå Network error: {{error}}",
      ocrError: "L·ªói ƒë·ªçc ·∫£nh: {{error}}",
      pdfError: "L·ªói ƒë·ªçc PDF: {{error}}",
      wordError: "L·ªói ƒë·ªçc Word: {{error}}",
      textError: "L·ªói ƒë·ªçc text file: {{error}}",
      spreadsheetError: "L·ªói ƒë·ªçc spreadsheet: {{error}}",
      cannotExtractText: "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t text t·ª´ ·∫£nh. Vui l√≤ng th·ª≠ ·∫£nh kh√°c c√≥ text r√µ r√†ng h∆°n.",
      noAIResponse: "AI service kh√¥ng tr·∫£ v·ªÅ c√¢u h·ªèi n√†o",
      aiServiceError: "‚ùå AI Service Error:",
      aiGenerationFailed: "AI generation failed: {{error}}",
      userChoseFallback: "üîÑ User chose to use fallback mock questions",
      sampleQuestions: {
        question1: {
          text: "JavaScript ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi c√¥ng ty n√†o?",
          answer: "Netscape",
          explanation: "JavaScript ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Brendan Eich t·∫°i Netscape v√†o nƒÉm 1995."
        },
        question2: {
          text: "React l√† g√¨?",
          answer: "JavaScript library",
          explanation: "React l√† m·ªôt JavaScript library ƒë·ªÉ x√¢y d·ª±ng user interface."
        }
      },
      customPrompt: "H∆∞·ªõng d·∫´n c·ª• th·ªÉ cho AI v·ªÅ c√°ch t·∫°o c√¢u h·ªèi..."
    }
  },
  en: {
    fileUpload: {
      unsupportedFormat: "Unsupported file format",
      processing: "Processing file: {{filename}}...",
      cannotReadFile: "Cannot read file",
      extractedSuccess: "Extracted {{count}} characters from file!",
      processingError: "Error occurred while processing file",
      sampleContentCreated: "Sample content created for AI testing",
      noContentToGenerate: "No content to generate questions",
      connectingToAI: "Connecting to AI service...",
      aiGeneratedSuccess: "‚úÖ AI generated {{count}} questions successfully!",
      aiGenerationError: "‚ùå Error generating questions: {{error}}",
      aiError: "AI Error: {{error}}",
      usingSampleQuestions: "Using sample questions instead of AI",
      importedQuestions: "Imported {{count}} questions!",
      apiKeyWorking: "‚úÖ API key is working!",
      apiKeyError: "‚ùå API key error: {{message}}",
      networkError: "‚ùå Network error: {{error}}",
      ocrError: "OCR Error: {{error}}",
      pdfError: "PDF Error: {{error}}",
      wordError: "Word Error: {{error}}",
      textError: "Text Error: {{error}}",
      spreadsheetError: "Spreadsheet Error: {{error}}",
      cannotExtractText: "Cannot extract text from image. Please try another image with clearer text.",
      noAIResponse: "AI service did not return any questions",
      aiServiceError: "‚ùå AI Service Error:",
      aiGenerationFailed: "AI generation failed: {{error}}",
      userChoseFallback: "üîÑ User chose to use fallback mock questions",
      sampleQuestions: {
        question1: {
          text: "Which company developed JavaScript?",
          answer: "Netscape",
          explanation: "JavaScript was developed by Brendan Eich at Netscape in 1995."
        },
        question2: {
          text: "What is React?",
          answer: "JavaScript library",
          explanation: "React is a JavaScript library for building user interfaces."
        }
      },
      customPrompt: "Specific instructions for AI on how to generate questions..."
    }
  }
};

// Deep merge function
function deepMerge(target, source) {
  for (const key in source) {
    if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
      if (!target[key] || typeof target[key] !== 'object') {
        target[key] = {};
      }
      deepMerge(target[key], source[key]);
    } else {
      target[key] = source[key];
    }
  }
  return target;
}

// Merge
deepMerge(viData, newKeys.vi);
deepMerge(enData, newKeys.en);

// Save
fs.writeFileSync(viPath, JSON.stringify(viData, null, 2), 'utf8');
fs.writeFileSync(enPath, JSON.stringify(enData, null, 2), 'utf8');

console.log('‚úÖ Added AdvancedFileUpload translation keys!');
console.log('   üì¶ Added fileUpload.* keys with interpolation support');
console.log('   üåç Both VI and EN translations ready');
