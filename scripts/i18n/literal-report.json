{
  "timestamp": "2025-08-13T10:33:08.809Z",
  "totalFiles": 102,
  "results": [
    {
      "file": "App.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "= ({ children }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    // Set timeout ƒë·ªÉ tr√°nh loading v√¥ h·∫°n\r\n    const timeout = setTimeout(() => {\r\n      if (mounted) {\r\n        dispatch(authCheckComplete());\r\n      }\r\n    }, 5000); // TƒÉng l√™n 5 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªß th·ªùi gian\r\n\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      if (!mounted) return;\r\n      clearTimeout(timeout); // Clear timeout n·∫øu auth check th√†nh c√¥ng\r\n      \r\n      console.log('üîê Auth state changed:', {\r\n        user: user ? {\r\n          uid: user.uid,\r\n          email: user.email,\r\n          displayName: user.displayName,\r\n          emailVerified: user.emailVerified\r\n        } : null,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n      \r\n      if (user) {\r\n        try {\r\n          // Get role from Firestore tr∆∞·ªõc khi check email verification\r\n          const userDocRef = doc(db, 'users', user.uid);\r\n          const userDoc = await getDoc(userDocRef);\r\n          \r\n          let role: 'admin' | 'creator' | 'user' = 'user';\r\n          let userData = null;\r\n          \r\n          if (userDoc.exists()) {\r\n            userData = userDoc.data();\r\n            \r\n            // Check if user is deleted or inactive\r\n            if (userData.isDeleted || userData.isActive === false) {\r\n              console.log('üö´ User account is deleted/inactive, logging out');\r\n              await auth.signOut();\r\n              dispatch(logout());\r\n              dispatch(authCheckComplete());\r\n              return;\r\n            }\r\n            \r\n            role = userData.role || 'user';\r\n            console.log('‚úÖ Found user document:', { uid: user.uid, role, userData });\r\n            \r\n            // Ch·ªâ check email verification cho user th∆∞·ªùng, kh√¥ng ph·∫£i admin\r\n            if (!user.emailVerified && user.email !== 'admin123@gmail.com' && role !== 'admin') {\r\n              console.log('üìß Email not verified for regular user, redirecting to verification');\r\n              // Kh√¥ng sign out ngay, ƒë·ªÉ user c√≥ c∆° h·ªôi verify email\r\n              // await auth.signOut();\r\n              // dispatch(logout());\r\n              // dispatch(authCheckComplete());\r\n              // return;\r\n            }\r\n          } else if (user.email === 'admin123@gmail.com') {\r\n            role = 'admin';\r\n            console.log('üëë Creating admin user document');\r\n            // Create admin document if it doesn't exist\r\n            try {\r\n              await setDoc(userDocRef, {\r\n                email: user.email,\r\n                displayName: user.displayName || 'Admin',\r\n                role: 'admin',\r\n                createdAt: serverTimestamp(), // S·ª≠ d·ª•ng serverTimestamp thay v√¨ Date\r\n                isActive: true,\r\n                emailVerified: true\r\n              });\r\n            } catch (createError) {\r\n              console.error('Error creating admin document:', createError);\r\n            }\r\n          } else {\r\n            // User m·ªõi ch∆∞a c√≥ document trong Firestore - c√≥ th·ªÉ l√† user v·ª´a ƒëƒÉng k√Ω\r\n            console.log('üÜï User document not found for:', user.email);\r\n            \r\n            // Kh√¥ng t·ª± ƒë·ªông t·∫°o document n·ªØa, ƒë·ªÉ LoginPage x·ª≠ l√Ω\r\n            // Ch·ªâ fallback n·∫øu l√† admin email ƒë·∫∑c bi·ªát\r\n            if (user.email === 'admin123@gmail.com') {\r\n              console.log('üëë Creating admin user document');\r\n              try {\r\n                await setDoc(userDocRef, {\r\n                  email: user.email,\r\n                  displayName: user.displayName || 'Admin',\r\n                  role: 'admin',\r\n                  createdAt: serverTimestamp(), // S·ª≠ d·ª•ng serverTimestamp thay v√¨ Date\r\n                  isActive: true\r\n                });\r\n                role = 'admin';\r\n              } catch (createError) {\r\n                console.error('Error creating admin document:', createError);\r\n              }\r\n            } else {\r\n              // User th∆∞·ªùng kh√¥ng c√≥ document - c√≥ th·ªÉ ch∆∞a ho√†n th√†nh ƒëƒÉng k√Ω\r\n              console.log('‚ö†Ô∏è Regular user without document, might need role selection');\r\n              // Kh√¥ng set role, ƒë·ªÉ component x·ª≠ l√Ω\r\n              role = undefined as any;\r\n            }\r\n          }\r\n\r\n          const authUser = {\r\n            uid: user.uid,\r\n            email: user.email,\r\n            displayName: user.displayName,\r\n            photoURL: user.photoURL,\r\n            emailVerified: user.emailVerified,\r\n            role: role,\r\n            needsRoleSelection: userData?.needsRoleSelection || (!role && role !== 'admin'), // Admin kh√¥ng c·∫ßn ch·ªçn role\r\n            createdAt: userData?.createdAt ? \r\n              (userData.createdAt.toDate ? userData.createdAt.toDate().toISOString() : \r\n               userData.createdAt instanceof Date ? userData.createdAt.toISOString() : \r\n               userData.createdAt) : \r\n              new Date().toISOString(), // Convert Date to ISO string\r\n          };\r\n          \r\n          console.log('üìù Dispatching loginSuccess with:', authUser);\r\n          dispatch(loginSuccess(authUser));\r\n          \r\n          // Force re-render ƒë·ªÉ c·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c\r\n          setTimeout(() => {\r\n            console.log('üîÑ Force state refresh for UI update');\r\n            dispatch(loginSuccess(authUser));\r\n          }, 100);\r\n        } catch (error) {\r\n          console.error('Error getting user role:', error);\r\n          // Fallback role v·ªõi check admin email ch√≠nh x√°c h∆°n\r\n          const fallbackRole: 'admin' | 'user' = user.email === 'admin123@gmail.com' ? 'admin' : 'user';\r\n          const authUser = {\r\n            uid: user.uid,\r\n            email: user.email,\r\n            displayName: user.displayName,\r\n            photoURL: user.photoURL,\r\n            emailVerified: user.emailVerified,\r\n            role: fallbackRole,\r\n            createdAt: new Date().toISOString(), // Convert Date to ISO string\r\n          };\r\n          \r\n          console.log('üìù Dispatching fallback loginSuccess with:', authUser);\r\n          dispatch(loginSuccess(authUser));\r\n          \r\n          // Force re-render cho fallback c≈©ng c·∫ßn\r\n          setTimeout(() => {\r\n            console.log('üîÑ Force state refresh for fallback user');\r\n            dispatch(loginSuccess(authUser));\r\n          }, 100);\r\n        }\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n      dispatch(authCheckComplete());\r\n    });\r\n    \r\n    return () => {\r\n      clearTimeout(timeout);\r\n      unsubscribe();\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return",
          "index": 3834
        },
        {
          "kind": "JSXText",
          "text": ";\r\n};\r\n\r\n// Th√™m LoadingFallback component n·∫øu ch∆∞a c√≥\r\nconst LoadingFallback = () => {\r\n  const { t } = useTranslation();\r\n  return (",
          "index": 10348
        },
        {
          "kind": "JSXText",
          "text": ");\r\n};\r\n\r\n// C·∫≠p nh·∫≠t AppContent ƒë·ªÉ ƒë·∫£m b·∫£o m·ªçi lazy component ƒë·ªÅu ƒë∆∞·ª£c b·ªçc trong Suspense\r\nconst AppContent: React.FC = () => {\r\n  const { t } = useTranslation();\r\n  const { user, isLoading, authChecked, isAuthenticated, needsRoleSelection } = useSelector((state: RootState) => state.auth);\r\n\r\n  console.log('üì± AppContent render:', {\r\n    user: user ? { uid: user.uid, email: user.email, role: user.role } : null,\r\n    isLoading,\r\n    authChecked,\r\n    isAuthenticated,\r\n    needsRoleSelection\r\n  });\r\n\r\n  // Show loading while checking authentication\r\n  if (isLoading || !authChecked) {\r\n    console.log('üì± App: Showing loading screen', { isLoading, authChecked });\r\n    return (",
          "index": 10769
        },
        {
          "kind": "JSXText",
          "text": ");\r\n  }\r\n\r\n  // Show role selection if user needs to choose a role\r\n  if (isAuthenticated && user && needsRoleSelection) {\r\n    console.log('üì± App: Showing role selection screen');\r\n    \r\n    const handleRoleSelected = (role: 'user' | 'creator') => {\r\n      console.log('üéØ Role selected:', role);\r\n      \r\n      // Navigate theo role v·ªõi proper redirect\r\n      setTimeout(() => {\r\n        if (role === 'creator') {\r\n          window.location.href = '/creator';\r\n        } else if (role === 'user') {\r\n          window.location.href = '/dashboard';\r\n        }\r\n      }, 1500); // Increase delay ƒë·ªÉ user th·∫•y ƒë∆∞·ª£c toast message\r\n    };\r\n    \r\n    return",
          "index": 12053
        }
      ]
    },
    {
      "file": "utils\\initializeCategories.ts",
      "matches": [
        {
          "kind": "StringLiteral",
          "text": "L·∫≠p tr√¨nh v√† ph√°t tri·ªÉn ph·∫ßn m·ªÅm",
          "index": 192
        },
        {
          "kind": "StringLiteral",
          "text": "Ph√°t tri·ªÉn web frontend v√† backend",
          "index": 323
        },
        {
          "kind": "StringLiteral",
          "text": "Khoa h·ªçc t·ª± nhi√™n v√† c√¥ng ngh·ªá",
          "index": 449
        },
        {
          "kind": "StringLiteral",
          "text": "To√°n h·ªçc v√† th·ªëng k√™",
          "index": 576
        },
        {
          "kind": "StringLiteral",
          "text": "Ki·∫øn th·ª©c t·ªïng h·ª£p",
          "index": 699
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªãch s·ª≠ th·∫ø gi·ªõi v√† Vi·ªát Nam",
          "index": 808
        },
        {
          "kind": "StringLiteral",
          "text": "Th·ªÉ thao v√† s·ª©c kh·ªèe",
          "index": 928
        },
        {
          "kind": "StringLiteral",
          "text": "Gi·∫£i tr√≠ v√† vƒÉn h√≥a",
          "index": 1047
        }
      ]
    },
    {
      "file": "services\\geminiAI.ts",
      "matches": [
        {
          "kind": "StringLiteral",
          "text": "C√¢u h·ªèi...",
          "index": 752
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n A",
          "index": 804
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n B",
          "index": 855
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n C",
          "index": 905
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n D",
          "index": 956
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói ƒë·ªãnh d·∫°ng JSON t·ª´ AI. Vui l√≤ng th·ª≠ l·∫°i.",
          "index": 2594
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói x·∫£y ra khi t·∫°o c√¢u h·ªèi",
          "index": 2793
        },
        {
          "kind": "StringLiteral",
          "text": "Ch√†o b·∫°n! H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát: AI ƒëang ho·∫°t ƒë·ªông t·ªët kh√¥ng?",
          "index": 3045
        },
        {
          "kind": "StringLiteral",
          "text": "K·∫øt n·ªëi AI th√†nh c√¥ng!",
          "index": 3276
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn AI",
          "index": 3473
        }
      ]
    },
    {
      "file": "services\\fileProcessor.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{\r\n    const fileType = this.getFileType(file);\r\n    \r\n    switch (fileType) {\r\n      case 'image':\r\n        return this.processImage(file);\r\n      case 'pdf':\r\n        return this.processPDF(file);\r\n      case 'doc':\r\n        return this.processDocument(file);\r\n      case 'text':\r\n        return this.processTextFile(file);\r\n      default:\r\n        return {\r\n          content: '',\r\n          type: 'text',\r\n          error: `Lo·∫°i file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: ${file.type}`\r\n        };\r\n    }\r\n  }\r\n\r\n  private getFileType(file: File): string {\r\n    const extension = file.name.split('.').pop()?.toLowerCase();\r\n    const mimeType = file.type.toLowerCase();\r\n\r\n    if (mimeType.startsWith('image/')) return 'image';\r\n    if (mimeType === 'application/pdf' || extension === 'pdf') return 'pdf';\r\n    if (mimeType.includes('word') || ['doc', 'docx'].includes(extension || '')) return 'doc';\r\n    if (mimeType.startsWith('text/') || ['txt', 'md', 'csv'].includes(extension || '')) return 'text';\r\n    \r\n    return 'unknown';\r\n  }\r\n\r\n  private async processImage(file: File): Promise",
          "index": 464
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    try {\r\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n      \r\n      // Convert file to base64\r\n      const base64Data = await this.fileToBase64(file);\r\n      \r\n      const prompt = `\r\nPh√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† tr√≠ch xu·∫•t n·ªôi dung vƒÉn b·∫£n. \r\nN·∫øu c√≥ bi·ªÉu ƒë·ªì, b·∫£ng, ho·∫∑c th√¥ng tin tr·ª±c quan, h√£y m√¥ t·∫£ chi ti·∫øt.\r\nTr·∫£ v·ªÅ n·ªôi dung m·ªôt c√°ch c√≥ c·∫•u tr√∫c v√† r√µ r√†ng ƒë·ªÉ c√≥ th·ªÉ t·∫°o c√¢u h·ªèi.\r\n`;\r\n\r\n      const result = await model.generateContent([\r\n        prompt,\r\n        {\r\n          inlineData: {\r\n            data: base64Data,\r\n            mimeType: file.type\r\n          }\r\n        }\r\n      ]);\r\n\r\n      const response = await result.response;\r\n      const content = response.text();\r\n\r\n      return {\r\n        content,\r\n        type: 'image'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        content: '',\r\n        type: 'image',\r\n        error: `L·ªói x·ª≠ l√Ω ·∫£nh: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n\r\n  private async processPDF(file: File): Promise",
          "index": 1563
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    try {\r\n      // Convert to base64 for AI processing\r\n      const base64Data = await this.fileToBase64(file);\r\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n\r\n      const prompt = `\r\nƒê√¢y l√† file PDF. H√£y tr√≠ch xu·∫•t v√† ph√¢n t√≠ch n·ªôi dung vƒÉn b·∫£n t·ª´ file n√†y.\r\nT√≥m t·∫Øt n·ªôi dung ch√≠nh v√† cung c·∫•p th√¥ng tin chi ti·∫øt ƒë·ªÉ c√≥ th·ªÉ t·∫°o c√¢u h·ªèi.\r\nN·∫øu c√≥ b·∫£ng, bi·ªÉu ƒë·ªì ho·∫∑c h√¨nh ·∫£nh, h√£y m√¥ t·∫£ ch√∫ng.\r\n`;\r\n\r\n      const result = await model.generateContent([\r\n        prompt,\r\n        {\r\n          inlineData: {\r\n            data: base64Data,\r\n            mimeType: file.type\r\n          }\r\n        }\r\n      ]);\r\n\r\n      const response = await result.response;\r\n      const content = response.text();\r\n\r\n      return {\r\n        content,\r\n        type: 'document'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        content: '',\r\n        type: 'document',\r\n        error: `L·ªói x·ª≠ l√Ω PDF: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n\r\n  private async processDocument(file: File): Promise",
          "index": 2628
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    try {\r\n      // For DOC/DOCX files, convert to base64 and let AI process\r\n      const base64Data = await this.fileToBase64(file);\r\n      const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\r\n\r\n      const prompt = `\r\nƒê√¢y l√† file t√†i li·ªáu Word. H√£y tr√≠ch xu·∫•t v√† ph√¢n t√≠ch n·ªôi dung vƒÉn b·∫£n t·ª´ file n√†y.\r\nT√≥m t·∫Øt n·ªôi dung ch√≠nh v√† cung c·∫•p th√¥ng tin chi ti·∫øt ƒë·ªÉ c√≥ th·ªÉ t·∫°o c√¢u h·ªèi.\r\nBao g·ªìm c·∫£ ƒë·ªãnh d·∫°ng, ti√™u ƒë·ªÅ, v√† c·∫•u tr√∫c c·ªßa t√†i li·ªáu.\r\n`;\r\n\r\n      const result = await model.generateContent([\r\n        prompt,\r\n        {\r\n          inlineData: {\r\n            data: base64Data,\r\n            mimeType: file.type || 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\r\n          }\r\n        }\r\n      ]);\r\n\r\n      const response = await result.response;\r\n      const content = response.text();\r\n\r\n      return {\r\n        content,\r\n        type: 'document'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        content: '',\r\n        type: 'document',\r\n        error: `L·ªói x·ª≠ l√Ω t√†i li·ªáu: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n\r\n  private async processTextFile(file: File): Promise",
          "index": 3713
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    try {\r\n      const text = await this.readTextFile(file);\r\n      return {\r\n        content: text,\r\n        type: 'text'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        content: '',\r\n        type: 'text',\r\n        error: `L·ªói ƒë·ªçc file text: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n\r\n  private async fileToBase64(file: File): Promise",
          "index": 4915
        }
      ]
    },
    {
      "file": "services\\emailJSService.ts",
      "matches": [
        {
          "kind": "StringLiteral",
          "text": "üîß EmailJS Config ƒë√£ s·∫µn s√†ng:",
          "index": 912
        },
        {
          "kind": "StringLiteral",
          "text": "üöÄ ƒêang g·ª≠i OTP email ƒë·∫øn:",
          "index": 1722
        },
        {
          "kind": "StringLiteral",
          "text": "üìß Template params ƒë·∫ßy ƒë·ªß:",
          "index": 1779
        },
        {
          "kind": "StringLiteral",
          "text": "‚úÖ EmailJS Response th√†nh c√¥ng:",
          "index": 2042
        },
        {
          "kind": "StringLiteral",
          "text": "‚ùå EmailJS g·∫∑p l·ªói:",
          "index": 2387
        },
        {
          "kind": "StringLiteral",
          "text": "‚ùå Chi ti·∫øt l·ªói:",
          "index": 2438
        }
      ]
    },
    {
      "file": "lib\\store.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "(next: any) => (action: any) => {\r\n  try {\r\n    return next(action);\r\n  } catch (error) {\r\n    console.error('Redux Error:', error);\r\n    toast.error('ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng t·∫£i l·∫°i trang.');\r\n    return;\r\n  }\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    auth: authReducer,\r\n    quiz: quizReducer,\r\n    // multiplayer: multiplayerReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) => {\r\n    const defaultMiddleware = getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [\r\n          'persist/PERSIST', \r\n          'persist/REHYDRATE',\r\n          'quiz/fetchQuizzes/fulfilled',\r\n          'quiz/fetchQuizById/fulfilled',\r\n          'multiplayer/setCurrentRoom',\r\n          'multiplayer/updatePlayerInRoom'\r\n        ],\r\n        ignoredPaths: [\r\n          'quiz.quizzes',\r\n          'quiz.currentQuiz',\r\n          'quiz.userResults',\r\n          'multiplayer.currentRoom',\r\n          'multiplayer.currentPlayer'\r\n        ],\r\n      },\r\n      immutableCheck: { warnAfter: 128 },\r\n      thunk: {\r\n        extraArgument: {\r\n          timeout: 10000 // 10 seconds timeout for async actions\r\n        }\r\n      }\r\n    });\r\n\r\n    return defaultMiddleware.concat(errorHandlingMiddleware);\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType",
          "index": 360
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng t·∫£i l·∫°i trang.",
          "index": 512
        }
      ]
    },
    {
      "file": "components\\ClientSideAIGenerator.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "('');\r\n  const [formData, setFormData] = useState({\r\n    topic: '',\r\n    difficulty: 'easy' as 'easy' | 'medium' | 'hard',\r\n    numQuestions: 5,\r\n    useFileContent: false\r\n  });\r\n\r\n  const testConnection = async () => {\r\n    setIsTesting(true);\r\n    try {\r\n      const result = await geminiAI.testConnection();\r\n      if (result.success) {\r\n        setConnectionStatus('connected');\r\n        toast.success('‚úÖ K·∫øt n·ªëi AI th√†nh c√¥ng!');\r\n      } else {\r\n        setConnectionStatus('failed');\r\n        toast.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn AI: ' + result.message);\r\n      }\r\n    } catch (error) {\r\n      setConnectionStatus('failed');\r\n      toast.error('‚ùå L·ªói k·∫øt n·ªëi AI');\r\n    } finally {\r\n      setIsTesting(false);\r\n    }\r\n  };\r\n\r\n  const handleFileUpload = async (event: React.ChangeEvent",
          "index": 1068
        },
        {
          "kind": "JSXText",
          "text": ") => {\r\n    const file = event.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    setIsProcessingFile(true);\r\n    try {\r\n      const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\r\n      if (!apiKey) {\r\n        toast.error('API key kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh');\r\n        return;\r\n      }\r\n\r\n      const fileProcessor = new FileProcessor(apiKey);\r\n      const result = await fileProcessor.processFile(file);\r\n      \r\n      if (result.content && !result.error) {\r\n        setUploadedFile(file);\r\n        setFileContent(result.content);\r\n        setFormData(prev => ({ \r\n          ...prev, \r\n          topic: result.content?.substring(0, 100) + '...' || prev.topic,\r\n          useFileContent: true \r\n        }));\r\n        toast.success(`ƒê√£ x·ª≠ l√Ω file ${file.name} th√†nh c√¥ng!`);\r\n      } else {\r\n        toast.error(result.error || 'Kh√¥ng th·ªÉ x·ª≠ l√Ω file n√†y');\r\n      }\r\n    } catch (error) {\r\n      console.error('File processing error:', error);\r\n      toast.error('L·ªói khi x·ª≠ l√Ω file');\r\n    } finally {\r\n      setIsProcessingFile(false);\r\n    }\r\n  };\r\n\r\n  const removeUploadedFile = () => {\r\n    setUploadedFile(null);\r\n    setFileContent('');\r\n    setFormData(prev => ({ ...prev, useFileContent: false }));\r\n  };\r\n\r\n  const generateQuestions = async () => {\r\n    const topicToUse = formData.useFileContent && fileContent \r\n      ? `D·ª±a tr√™n n·ªôi dung file ƒë√£ t·∫£i l√™n: ${fileContent}. T·∫°o c√¢u h·ªèi v·ªÅ: ${formData.topic}`\r\n      : formData.topic;\r\n\r\n    if (!topicToUse.trim()) {\r\n      toast.error('Vui l√≤ng nh·∫≠p ch·ªß ƒë·ªÅ ho·∫∑c t·∫£i l√™n file!');\r\n      return;\r\n    }\r\n\r\n    setIsGenerating(true);\r\n    try {\r\n      const result = await geminiAI.generateQuestions(\r\n        topicToUse,\r\n        formData.difficulty,\r\n        formData.numQuestions\r\n      );\r\n\r\n      if (result.success && result.questions) {\r\n        onQuestionsGenerated(result.questions);\r\n        toast.success(`‚úÖ ${result.message}`);\r\n        \r\n        // Reset form\r\n        setFormData({\r\n          topic: '',\r\n          difficulty: 'easy',\r\n          numQuestions: 5,\r\n          useFileContent: false\r\n        });\r\n        \r\n        // Reset file state\r\n        setUploadedFile(null);\r\n        setFileContent('');\r\n      } else {\r\n        toast.error('‚ùå ' + result.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Generate questions error:', error);\r\n      toast.error('‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o c√¢u h·ªèi');\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  const getDifficultyLabel = (difficulty: string) => {\r\n    switch (difficulty) {\r\n      case 'easy': return 'üü¢ D·ªÖ';\r\n      case 'medium': return 'üü° Trung b√¨nh';\r\n      case 'hard': return 'üî¥ Kh√≥';\r\n      default: return difficulty;\r\n    }\r\n  };\r\n\r\n  const getConnectionIcon = () => {\r\n    switch (connectionStatus) {\r\n      case 'connected': return",
          "index": 1878
        },
        {
          "kind": "JSXText",
          "text": "T·∫°o c√¢u h·ªèi t·ª± ƒë·ªông b·∫±ng Google Gemini AI",
          "index": 5482
        },
        {
          "kind": "JSXText",
          "text": ")}\r\n            Test k·∫øt n·ªëi",
          "index": 6065
        },
        {
          "kind": "JSXText",
          "text": "üìö Ch·ªß ƒë·ªÅ",
          "index": 6315
        },
        {
          "kind": "JSXText",
          "text": "setFormData({ ...formData, topic: e.target.value })}\r\n            placeholder=\"VD: JavaScript, L·ªãch s·ª≠ Vi·ªát Nam, To√°n h·ªçc...\"\r\n            className=\"w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\r\n          />",
          "index": 6467
        },
        {
          "kind": "JSXText",
          "text": "üìé T·∫£i l√™n file ƒë·ªÉ AI ph√¢n t√≠ch",
          "index": 7218
        },
        {
          "kind": "JSXText",
          "text": "H·ªó tr·ª£: ·∫¢nh (JPG, PNG), PDF, Word (DOC, DOCX), Text (TXT)",
          "index": 7363
        },
        {
          "kind": "JSXText",
          "text": "Ch·ªçn file",
          "index": 7700
        },
        {
          "kind": "JSXText",
          "text": "{(uploadedFile.size / 1024 / 1024).toFixed(2)} MB - ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng",
          "index": 9125
        },
        {
          "kind": "JSXText",
          "text": "ƒêang x·ª≠ l√Ω file...",
          "index": 9947
        },
        {
          "kind": "JSXText",
          "text": "üéØ ƒê·ªô kh√≥",
          "index": 10243
        },
        {
          "kind": "JSXText",
          "text": "üü¢ D·ªÖ",
          "index": 10640
        },
        {
          "kind": "JSXText",
          "text": "üü° Trung b√¨nh",
          "index": 10693
        },
        {
          "kind": "JSXText",
          "text": "üî¥ Kh√≥",
          "index": 10752
        },
        {
          "kind": "JSXText",
          "text": "üî¢ S·ªë c√¢u h·ªèi",
          "index": 10944
        },
        {
          "kind": "JSXText",
          "text": "3 c√¢u",
          "index": 11349
        },
        {
          "kind": "JSXText",
          "text": "5 c√¢u",
          "index": 11397
        },
        {
          "kind": "JSXText",
          "text": "10 c√¢u",
          "index": 11446
        },
        {
          "kind": "JSXText",
          "text": "15 c√¢u",
          "index": 11496
        },
        {
          "kind": "JSXText",
          "text": "20 c√¢u",
          "index": 11546
        },
        {
          "kind": "JSXText",
          "text": "ƒêang t·∫°o c√¢u h·ªèi...",
          "index": 12182
        },
        {
          "kind": "JSXText",
          "text": "T·∫°o {formData.numQuestions} c√¢u h·ªèi {getDifficultyLabel(formData.difficulty)}\r\n              {formData.useFileContent && ' t·ª´ file'}",
          "index": 12312
        },
        {
          "kind": "JSXText",
          "text": "üí° Th√¥ng tin:",
          "index": 12677
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ S·ª≠ d·ª•ng Google Gemini AI mi·ªÖn ph√≠",
          "index": 12773
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ Kh√¥ng c·∫ßn Firebase Functions",
          "index": 12831
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ Ch·∫°y tr·ª±c ti·∫øp tr√™n tr√¨nh duy·ªát",
          "index": 12884
        },
        {
          "kind": "JSXText",
          "text": "M·ªõi:",
          "index": 12950
        },
        {
          "kind": "JSXText",
          "text": "H·ªó tr·ª£ ƒë·ªçc file ·∫£nh, PDF, Word, Text",
          "index": 12963
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ Free tier: {AI_CONFIG.maxRequestsPerMinute} requests/ph√∫t",
          "index": 13023
        },
        {
          "kind": "StringLiteral",
          "text": "‚úÖ K·∫øt n·ªëi AI th√†nh c√¥ng!",
          "index": 1476
        },
        {
          "kind": "StringLiteral",
          "text": "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn AI: ",
          "index": 1582
        },
        {
          "kind": "StringLiteral",
          "text": "‚ùå L·ªói k·∫øt n·ªëi AI",
          "index": 1721
        },
        {
          "kind": "StringLiteral",
          "text": "API key kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh",
          "index": 2100
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ x·ª≠ l√Ω file n√†y",
          "index": 2699
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói khi x·ª≠ l√Ω file",
          "index": 2834
        },
        {
          "kind": "StringLiteral",
          "text": "Vui l√≤ng nh·∫≠p ch·ªß ƒë·ªÅ ho·∫∑c t·∫£i l√™n file!",
          "index": 3367
        },
        {
          "kind": "StringLiteral",
          "text": "‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o c√¢u h·ªèi",
          "index": 4220
        },
        {
          "kind": "StringLiteral",
          "text": "üü¢ D·ªÖ",
          "index": 4429
        },
        {
          "kind": "StringLiteral",
          "text": "üü° Trung b√¨nh",
          "index": 4467
        },
        {
          "kind": "StringLiteral",
          "text": "üî¥ Kh√≥",
          "index": 4511
        },
        {
          "kind": "StringLiteral",
          "text": "VD: JavaScript, L·ªãch s·ª≠ Vi·ªát Nam, To√°n h·ªçc...",
          "index": 6547
        },
        {
          "kind": "StringLiteral",
          "text": " t·ª´ file",
          "index": 12450
        }
      ]
    },
    {
      "file": "shared\\pages\\Home.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{\n  const { t } = useTranslation();\n\r\n  const dispatch = useDispatch();\r\n  const { user } = useSelector((state: RootState) => state.auth);\r\n  const { quizzes, loading } = useSelector((state: RootState) => state.quiz);\r\n  \r\n  // **TH√äM M·ªöI**: Dashboard stats state v·ªõi d·ªØ li·ªáu th·∫≠t\r\n  const [stats, setStats] = useState",
          "index": 859
        },
        {
          "kind": "JSXText",
          "text": "([]);\r\n  const [statsLoading, setStatsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (quizzes.length === 0) {\r\n      dispatch(fetchQuizzes({ user }) as any);\r\n    }\r\n    loadRealStats();\r\n  }, [dispatch, user, quizzes.length]);\r\n\r\n  const loadRealStats = async () => {\r\n    try {\r\n      setStatsLoading(true);\r\n      \r\n      // L·∫•y d·ªØ li·ªáu th·ª±c t·ª´ Firebase\r\n      const [quizzesSnapshot, usersSnapshot] = await Promise.all([\r\n        getDocs(collection(db, 'quizzes')),\r\n        getDocs(collection(db, 'users'))\r\n      ]);\r\n      \r\n      // ƒê·∫øm ch·ªâ users ACTIVE (kh√¥ng b·ªã xo√° v√† isActive = true)\r\n      const users = usersSnapshot.docs.map(doc => doc.data());\r\n      const activeUsers = users.filter(user => \r\n        user.isActive !== false && \r\n        user.isDeleted !== true\r\n      );\r\n      \r\n      // ƒê·∫øm creators trong s·ªë users ACTIVE\r\n      const creators = activeUsers.filter(user => \r\n        user.role === 'creator' || user.role === 'admin'\r\n      );\r\n      \r\n      // Quiz ho√†n th√†nh t·∫°m th·ªùi = 0 v√¨ ch∆∞a c√≥ data v·ªÅ quiz results\r\n      const completedQuizzes = 0;\r\n      \r\n      setStats({\r\n        totalQuizzes: quizzesSnapshot.size,\r\n        totalUsers: activeUsers.length, // CH·ªà ƒê·∫æM USERS HO·∫†T ƒê·ªòNG\r\n        completedQuizzes: completedQuizzes,\r\n        totalCreators: creators.length // CH·ªà ƒê·∫æM CREATORS HO·∫†T ƒê·ªòNG\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error('Error loading real stats:', error);\r\n    } finally {\r\n      setStatsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (quizzes.length > 0) {\r\n      // **TH√äM M·ªöI**: Set featured quizzes (trending/popular)\r\n      const trending = quizzes\r\n        .filter(q => q.isPublic)\r\n        .sort((a, b) => (b.attempts || 0) - (a.attempts || 0))\r\n        .slice(0, 6);\r\n      setFeaturedQuizzes(trending);\r\n    }\r\n  }, [quizzes]);\r\n\r\n  if (loading) {\r\n    return (",
          "index": 1361
        },
        {
          "kind": "JSXText",
          "text": "Ch√†o m·ª´ng tr·ªü l·∫°i, {user?.displayName?.split(' ')[0] || 'Quiz Master'}!",
          "index": 4534
        },
        {
          "kind": "JSXText",
          "text": "S·∫µn s√†ng th·ª≠ th√°ch ki·∫øn th·ª©c c·ªßa b·∫°n ch∆∞a?",
          "index": 4708
        },
        {
          "kind": "JSXText",
          "text": "Kh√°m ph√° h√†ng ngh√¨n quiz th√∫ v·ªã, th·ª≠ th√°ch b·∫£n th√¢n v√† leo l√™n b·∫£ng x·∫øp h·∫°ng! üöÄ",
          "index": 4920
        },
        {
          "kind": "JSXText",
          "text": "{/* **TH√äM M·ªöI**: Dashboard Stats */}",
          "index": 5933
        },
        {
          "kind": "JSXText",
          "text": "üìà D·ªØ li·ªáu th·ª±c t·∫ø",
          "index": 6616
        },
        {
          "kind": "JSXText",
          "text": "üë• ƒê√£ ƒëƒÉng k√Ω",
          "index": 7768
        },
        {
          "kind": "JSXText",
          "text": "‚úÖ Ch·ªù c·∫≠p nh·∫≠t",
          "index": 8928
        },
        {
          "kind": "JSXText",
          "text": "{/* **TH√äM M·ªöI**: Featured/Trending Quizzes */}\r\n      {featuredQuizzes.length > 0 && (",
          "index": 10871
        },
        {
          "kind": "JSXText",
          "text": "Nh·ªØng quiz ƒë∆∞·ª£c y√™u th√≠ch nh·∫•t",
          "index": 11559
        },
        {
          "kind": "JSXText",
          "text": "Xem t·∫•t c·∫£",
          "index": 11977
        },
        {
          "kind": "JSXText",
          "text": "Ch∆∞a c√≥ quiz trending",
          "index": 13006
        },
        {
          "kind": "JSXText",
          "text": "H√£y b·∫Øt ƒë·∫ßu t·∫°o quiz ƒë·∫ßu ti√™n c·ªßa b·∫°n!",
          "index": 13082
        },
        {
          "kind": "JSXText",
          "text": "T·∫°o Quiz ngay",
          "index": 13358
        },
        {
          "kind": "JSXText",
          "text": ")}\r\n\r\n      {/* **TH√äM M·ªöI**: Quick Actions */}",
          "index": 13491
        },
        {
          "kind": "JSXText",
          "text": "H√†nh ƒë·ªông nhanh",
          "index": 13983
        },
        {
          "kind": "JSXText",
          "text": "Nh·ªØng thao t√°c th∆∞·ªùng d√πng ƒë·ªÉ b·∫Øt ƒë·∫ßu",
          "index": 14046
        },
        {
          "kind": "JSXText",
          "text": "Thi·∫øt k·∫ø v√† chia s·∫ª quiz c·ªßa ri√™ng b·∫°n v·ªõi m·ªçi ng∆∞·ªùi",
          "index": 14986
        },
        {
          "kind": "JSXText",
          "text": "B·∫Øt ƒë·∫ßu t·∫°o",
          "index": 15184
        },
        {
          "kind": "JSXText",
          "text": "Quiz ng·∫´u nhi√™n",
          "index": 16024
        },
        {
          "kind": "JSXText",
          "text": "Nh·∫£y v√†o m·ªôt quiz b·∫•t k·ª≥ v√† th·ª≠ th√°ch ki·∫øn th·ª©c c·ªßa b·∫°n",
          "index": 16103
        },
        {
          "kind": "JSXText",
          "text": "Ch∆°i ngay",
          "index": 16305
        },
        {
          "kind": "JSXText",
          "text": "Xem ti·∫øn ƒë·ªô",
          "index": 17305
        },
        {
          "kind": "JSXText",
          "text": "Ki·ªÉm tra th√†nh t√≠ch v√† l·ªãch s·ª≠ l√†m quiz c·ªßa b·∫°n",
          "index": 17380
        },
        {
          "kind": "JSXText",
          "text": "Quiz ph·ªï bi·∫øn",
          "index": 18175
        },
        {
          "kind": "JSXText",
          "text": "Nh·ªØng quiz ƒë∆∞·ª£c y√™u th√≠ch nh·∫•t tu·∫ßn n√†y",
          "index": 18236
        }
      ]
    },
    {
      "file": "shared\\pages\\Dashboard.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{/* Header gi·ªëng Admin */}",
          "index": 1323
        },
        {
          "kind": "JSXText",
          "text": "{/* Main Actions Grid - 2 c·ªôt nh∆∞ Admin */}",
          "index": 1974
        }
      ]
    },
    {
      "file": "shared\\pages\\Creator.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "('my-quizzes');\r\n\r\n  // Ki·ªÉm tra quy·ªÅn creator\r\n  if (!user) {\r\n    return (",
          "index": 578
        }
      ]
    },
    {
      "file": "shared\\components\\Sidebar.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { user } = useSelector((state: RootState) => state.auth);\r\n\r\n  const menuItems = [\r\n    { path: '/', label: 'Trang ch·ªß', icon: 'üè†' },\r\n    { path: '/quizzes', label: 'Danh s√°ch Quiz', icon: 'üìù' },\r\n    { path: '/favorites', label: 'Y√™u th√≠ch', icon: '‚ù§Ô∏è' },\r\n    { path: '/leaderboard', label: 'B·∫£ng x·∫øp h·∫°ng', icon: 'üèÜ' },\r\n    { path: '/profile', label: 'H·ªì s∆°', icon: 'üë§' },\r\n  ];\r\n\r\n  // Add role-specific menu items\r\n  if (user?.role === 'creator' || user?.role === 'admin') {\r\n    menuItems.push({ path: '/creator', label: 'T·∫°o Quiz', icon: '‚ûï' });\r\n    menuItems.push({ path: '/my-quizzes', label: 'Quiz c·ªßa t√¥i', icon: 'üìù' });\r\n  }\r\n\r\n  if (user?.role === 'admin') {\r\n    menuItems.push({ path: '/admin', label: 'Qu·∫£n tr·ªã', icon: '‚öôÔ∏è' });\r\n  }\r\n\r\n  return (",
          "index": 213
        },
        {
          "kind": "StringLiteral",
          "text": "Trang ch·ªß",
          "index": 404
        },
        {
          "kind": "StringLiteral",
          "text": "Danh s√°ch Quiz",
          "index": 463
        },
        {
          "kind": "StringLiteral",
          "text": "Y√™u th√≠ch",
          "index": 529
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫£ng x·∫øp h·∫°ng",
          "index": 592
        },
        {
          "kind": "StringLiteral",
          "text": "H·ªì s∆°",
          "index": 655
        },
        {
          "kind": "StringLiteral",
          "text": "T·∫°o Quiz",
          "index": 829
        },
        {
          "kind": "StringLiteral",
          "text": "Quiz c·ªßa t√¥i",
          "index": 905
        },
        {
          "kind": "StringLiteral",
          "text": "Qu·∫£n tr·ªã",
          "index": 1021
        }
      ]
    },
    {
      "file": "shared\\components\\SearchComponent.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "= ({ \r\n  onSearch, \r\n  placeholder = \"T√¨m ki·∫øm...\", \r\n  className = \"\" \r\n}) => {\r\n  const [query, setQuery] = useState('');\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    onSearch(query);\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent",
          "index": 221
        },
        {
          "kind": "StringLiteral",
          "text": "T√¨m ki·∫øm...",
          "index": 260
        }
      ]
    },
    {
      "file": "shared\\components\\RoleBasedRedirect.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "; // Admin c≈©ng v√†o dashboard ch√≠nh\r\n    case 'creator':\r\n      return",
          "index": 606
        },
        {
          "kind": "JSXText",
          "text": "; // Creator c≈©ng v√†o dashboard ch√≠nh\r\n    case 'user':\r\n    default:\r\n      return",
          "index": 713
        }
      ]
    },
    {
      "file": "shared\\components\\QuizReviewSystem.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "= ({ \r\n  quizId, \r\n  quizTitle = 'Quiz n√†y',\r\n  showSubmitForm = true \r\n}) => {\r\n  const { t } = useTranslation();\r\n  const user = useSelector((state: RootState) => state.auth.user);\r\n  const [reviews, setReviews] = useState",
          "index": 714
        },
        {
          "kind": "JSXText",
          "text": "= {\r\n        quizId,\r\n        userId: user.uid,\r\n        userName: user.displayName || user.email || 'Ng∆∞·ªùi d√πng ·∫©n danh',\r\n        rating: userRating,\r\n        comment: userComment.trim(),\r\n        createdAt: new Date()\r\n      };\r\n\r\n      const docRef = await addDoc(collection(db, 'quizReviews'), newReview);\r\n      \r\n      // Add to local state\r\n      setReviews(prev => [{ ...newReview, id: docRef.id }, ...prev]);\r\n      setHasUserReviewed(true);\r\n      setUserRating(0);\r\n      setUserComment('');\r\n      \r\n      toast.success(t('quiz.reviews.submitSuccess'));\r\n    } catch (error) {\r\n      console.error('Error submitting review:', error);\r\n      toast.error(t('quiz.reviews.submitError'));\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const StarRating: React.FC",
          "index": 3017
        },
        {
          "kind": "StringLiteral",
          "text": "Quiz n√†y",
          "index": 749
        },
        {
          "kind": "StringLiteral",
          "text": "Ng∆∞·ªùi d√πng ·∫©n danh",
          "index": 3120
        }
      ]
    },
    {
      "file": "shared\\components\\QuickReviewSection.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "B·∫°n th·∫•y quiz n√†y nh∆∞ th·∫ø n√†o?",
          "index": 1190
        },
        {
          "kind": "JSXText",
          "text": "Chia s·∫ª c·∫£m nh·∫≠n c·ªßa b·∫°n ƒë·ªÉ gi√∫p nh·ªØng ng∆∞·ªùi kh√°c c√≥ tr·∫£i nghi·ªám t·ªët h∆°n",
          "index": 1301
        },
        {
          "kind": "JSXText",
          "text": "Vi·∫øt ƒë√°nh gi√°",
          "index": 1838
        },
        {
          "kind": "JSXText",
          "text": "Xem t·∫•t c·∫£ ƒë√°nh gi√°",
          "index": 2224
        },
        {
          "kind": "JSXText",
          "text": "ƒêƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√° v√† xem c√°c ƒë√°nh gi√° kh√°c",
          "index": 2411
        },
        {
          "kind": "JSXText",
          "text": "ƒê√°nh gi√°: {quizTitle}",
          "index": 3216
        },
        {
          "kind": "JSXText",
          "text": "setShowReviewForm(false)}\r\n                className=\"text-gray-400 hover:text-gray-600 text-2xl font-bold\"\r\n              >\r\n                √ó",
          "index": 3297
        }
      ]
    },
    {
      "file": "shared\\components\\PopularQuizzesRanking.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const loadPopularQuizzes = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // TODO: Load real popular quizzes based on attempts/ratings\r\n        // For now, show empty state\r\n        setPopularQuizzes([]);\r\n      } catch (error) {\r\n        console.error('Error loading popular quizzes:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadPopularQuizzes();\r\n  }, [timeFilter]);\r\n\r\n  const getDifficultyColor = (difficulty: string) => {\r\n    switch (difficulty) {\r\n      case 'easy': return 'text-green-600 bg-green-100';\r\n      case 'medium': return 'text-yellow-600 bg-yellow-100';\r\n      case 'hard': return 'text-red-600 bg-red-100';\r\n      default: return 'text-gray-600 bg-gray-100';\r\n    }\r\n  };\r\n\r\n  const formatDifficulty = (difficulty: string) => {\r\n    switch (difficulty) {\r\n      case 'easy': return 'D·ªÖ';\r\n      case 'medium': return 'Trung b√¨nh';\r\n      case 'hard': return 'Kh√≥';\r\n      default: return difficulty;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (",
          "index": 541
        },
        {
          "kind": "JSXText",
          "text": "üèÜ Quiz Ph·ªï Bi·∫øn",
          "index": 1806
        },
        {
          "kind": "JSXText",
          "text": "üèÜ Quiz Ph·ªï Bi·∫øn",
          "index": 2563
        },
        {
          "kind": "JSXText",
          "text": "{timeFilter === 'week' ? 'Tu·∫ßn n√†y' : timeFilter === 'month' ? 'Th√°ng n√†y' : 'T·∫•t c·∫£'}",
          "index": 2645
        },
        {
          "kind": "JSXText",
          "text": "Ch∆∞a c√≥ d·ªØ li·ªáu quiz ph·ªï bi·∫øn",
          "index": 2940
        },
        {
          "kind": "JSXText",
          "text": "D·ªØ li·ªáu s·∫Ω xu·∫•t hi·ªán khi c√≥ nhi·ªÅu ng∆∞·ªùi tham gia quiz h∆°n",
          "index": 3008
        },
        {
          "kind": "StringLiteral",
          "text": "D·ªÖ",
          "index": 1494
        },
        {
          "kind": "StringLiteral",
          "text": "Trung b√¨nh",
          "index": 1529
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√≥",
          "index": 1570
        },
        {
          "kind": "StringLiteral",
          "text": "Tu·∫ßn n√†y",
          "index": 2683
        },
        {
          "kind": "StringLiteral",
          "text": "Th√°ng n√†y",
          "index": 2721
        },
        {
          "kind": "StringLiteral",
          "text": "T·∫•t c·∫£",
          "index": 2735
        }
      ]
    },
    {
      "file": "shared\\components\\NotificationCenter.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "markAsRead(notification.id)}\r\n                              className=\"text-xs text-blue-600 hover:text-blue-800\"\r\n                            >\r\n                              ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc",
          "index": 5396
        },
        {
          "kind": "JSXText",
          "text": "Xem t·∫•t c·∫£ th√¥ng b√°o",
          "index": 6808
        }
      ]
    },
    {
      "file": "shared\\components\\NotificationBanner.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "(null);\r\n  const { user } = useSelector((state: RootState) => state.auth);\r\n\r\n  // S·ª≠a l·∫°i useEffect ƒë·ªÉ x·ª≠ l√Ω l·ªói ƒë√∫ng c√°ch\r\n  useEffect(() => {\r\n    // H√†m n√†y ƒë∆∞·ª£c khai b√°o trong useEffect ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ v·ªõi React Hooks\r\n    const loadActiveNotification = async () => {\r\n      if (!user) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setLoading(true);\r\n        const notificationsRef = collection(db, 'system_notifications');\r\n        \r\n        const q = query(\r\n          notificationsRef,\r\n          where('isActive', '==', true),\r\n          orderBy('createdAt', 'desc'),\r\n          limit(1)\r\n        );\r\n\r\n        const snapshot = await getDocs(q);\r\n        if (snapshot.empty) {\r\n          setNotification(null);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        let activeNotification = null;\r\n        snapshot.forEach(doc => {\r\n          const data = doc.data() as Notification;\r\n          data.id = doc.id;\r\n          if (\r\n            data.targetRole === 'all' || \r\n            !data.targetRole || \r\n            data.targetRole === user.role\r\n          ) {\r\n            activeNotification = data;\r\n          }\r\n        });\r\n\r\n        setNotification(activeNotification);\r\n      } catch (err) {\r\n        console.error('Error loading notifications:', err);\r\n        setError('Error loading notifications');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadActiveNotification().catch(console.error);\r\n  }, [user]);\r\n\r\n  // Kh√¥ng hi·ªÉn th·ªã g√¨ n·∫øu ƒëang t·∫£i ho·∫∑c kh√¥ng c√≥ th√¥ng b√°o\r\n  if (loading || !notification) return null;\r\n\r\n  // N·∫øu c√≥ l·ªói, c√≥ th·ªÉ hi·ªÉn th·ªã m·ªôt th√¥ng b√°o l·ªói ho·∫∑c kh√¥ng hi·ªÉn th·ªã g√¨\r\n  if (error) {\r\n    console.error('NotificationBanner error:', error);\r\n    return null;\r\n  }\r\n\r\n  // X√°c ƒë·ªãnh m√†u s·∫Øc d·ª±a tr√™n lo·∫°i th√¥ng b√°o\r\n  const getBgColor = () => {\r\n    switch (notification.type) {\r\n      case 'info': return 'bg-blue-100 border-blue-500 text-blue-800';\r\n      case 'warning': return 'bg-yellow-100 border-yellow-500 text-yellow-800';\r\n      case 'success': return 'bg-green-100 border-green-500 text-green-800';\r\n      case 'error': return 'bg-red-100 border-red-500 text-red-800';\r\n      default: return 'bg-gray-100 border-gray-500 text-gray-800';\r\n    }\r\n  };\r\n\r\n  // Th√™m h√†m getButtonColor\r\n  const getButtonColor = () => {\r\n    switch (notification?.type) {\r\n      case 'info': return 'text-blue-800 hover:text-blue-600';\r\n      case 'warning': return 'text-yellow-800 hover:text-yellow-600';\r\n      case 'success': return 'text-green-800 hover:text-green-600';\r\n      case 'error': return 'text-red-800 hover:text-red-600';\r\n      default: return 'text-gray-800 hover:text-gray-600';\r\n    }\r\n  };\r\n\r\n  // S·ª≠a l·∫°i n√∫t ƒë√≥ng ƒë·ªÉ s·ª≠ d·ª•ng m√†u ch·ªØ ph√π h·ª£p\r\n  return (",
          "index": 720
        },
        {
          "kind": "JSXText",
          "text": "setNotification(null)}\r\n          className={`ml-4 font-bold text-xl ${getButtonColor()} hover:scale-110 transition-transform`}\r\n          aria-label=\"ƒê√≥ng th√¥ng b√°o\"\r\n        >\r\n          &times;",
          "index": 3793
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√≥ng th√¥ng b√°o",
          "index": 3945
        }
      ]
    },
    {
      "file": "shared\\components\\LanguageSwitcher.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "= ({ variant = 'light' }) => {\r\n  const { t, i18n } = useTranslation();\r\n\r\n  const languages = [\r\n    { code: 'vi', name: 'Ti·∫øng Vi·ªát', flag: 'üáªüá≥' },\r\n    { code: 'en', name: 'English', flag: 'üá∫üá∏' }\r\n  ];\r\n\r\n  const currentLanguage = languages.find(lang => lang.code === i18n.language) || languages[0];\r\n\r\n  const changeLanguage = (languageCode: string) => {\r\n    i18n.changeLanguage(languageCode);\r\n  };\r\n\r\n  // Styling based on variant\r\n  const getButtonStyles = () => {\r\n    switch (variant) {\r\n      case 'dark': // For landing page with dark background\r\n        return \"flex items-center space-x-2 px-3 py-2 bg-white/10 rounded-lg hover:bg-white/20 transition-colors border border-white/20 backdrop-blur-sm text-white\";\r\n      case 'header': // For authenticated header with white background\r\n        return \"flex items-center space-x-2 px-3 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors border border-gray-300 text-gray-700\";\r\n      default: // Light variant - for login/register pages\r\n        return \"flex items-center space-x-2 px-3 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors text-white shadow-md\";\r\n    }\r\n  };\r\n\r\n  const getIconColor = () => {\r\n    switch (variant) {\r\n      case 'dark':\r\n        return \"text-white\";\r\n      case 'header':\r\n        return \"text-gray-600\";\r\n      default:\r\n        return \"text-white\";\r\n    }\r\n  };\r\n\r\n  const getTextColor = () => {\r\n    switch (variant) {\r\n      case 'dark':\r\n        return \"text-white\";\r\n      case 'header':\r\n        return \"text-gray-700\";\r\n      default:\r\n        return \"text-white\";\r\n    }\r\n  };\r\n\r\n  const getArrowColor = () => {\r\n    switch (variant) {\r\n      case 'dark':\r\n        return \"text-white/70\";\r\n      case 'header':\r\n        return \"text-gray-500\";\r\n      default:\r\n        return \"text-white/80\";\r\n    }\r\n  };\r\n\r\n  return (",
          "index": 254
        },
        {
          "kind": "StringLiteral",
          "text": "Ti·∫øng Vi·ªát",
          "index": 378
        }
      ]
    },
    {
      "file": "shared\\components\\ErrorBoundary.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "ƒê√£ x·∫£y ra l·ªói",
          "index": 1931
        },
        {
          "kind": "JSXText",
          "text": "{this.state.error?.message || '·ª®ng d·ª•ng g·∫∑p s·ª± c·ªë kh√¥ng mong mu·ªën.'}",
          "index": 1997
        },
        {
          "kind": "JSXText",
          "text": "window.location.reload()}\r\n              className=\"bg-blue-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors duration-200\"\r\n            >\r\n              T·∫£i l·∫°i trang",
          "index": 2150
        },
        {
          "kind": "JSXText",
          "text": "Chi ti·∫øt l·ªói (Development only)",
          "index": 2590
        },
        {
          "kind": "StringLiteral",
          "text": "·ª®ng d·ª•ng g·∫∑p s·ª± c·ªë kh√¥ng mong mu·ªën.",
          "index": 2044
        }
      ]
    },
    {
      "file": "shared\\components\\EmptyState.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": ",\r\n          title: 'Ch∆∞a c√≥ quiz n√†o',\r\n          description: 'H√£y t·∫°o quiz ƒë·∫ßu ti√™n c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu!',\r\n          actionLabel: 'T·∫°o Quiz M·ªõi',\r\n          actionUrl: '/create-quiz'\r\n        };\r\n      case 'reviews':\r\n        return {\r\n          icon:",
          "index": 577
        },
        {
          "kind": "JSXText",
          "text": ",\r\n          title: 'Ch∆∞a c√≥ ƒë√°nh gi√° n√†o',\r\n          description: 'H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n ƒë√°nh gi√° quiz n√†y!',\r\n          actionLabel: 'Vi·∫øt ƒë√°nh gi√°',\r\n          actionUrl: null\r\n        };\r\n      case 'favorites':\r\n        return {\r\n          icon:",
          "index": 881
        },
        {
          "kind": "JSXText",
          "text": ",\r\n          title: 'Ch∆∞a c√≥ quiz y√™u th√≠ch',\r\n          description: 'H√£y th√™m quiz v√†o danh s√°ch y√™u th√≠ch ƒë·ªÉ d·ªÖ d√†ng truy c·∫≠p!',\r\n          actionLabel: 'Kh√°m ph√° Quiz',\r\n          actionUrl: '/quiz'\r\n        };\r\n      default:\r\n        return {\r\n          icon:",
          "index": 1181
        },
        {
          "kind": "JSXText",
          "text": ",\r\n          title: 'Kh√¥ng c√≥ d·ªØ li·ªáu',\r\n          description: 'Hi·ªán t·∫°i ch∆∞a c√≥ n·ªôi dung n√†o.',\r\n          actionLabel: null,\r\n          actionUrl: null\r\n        };\r\n    }\r\n  };\r\n\r\n  const defaultContent = getDefaultContent();\r\n  const finalTitle = title || defaultContent.title;\r\n  const finalDescription = description || defaultContent.description;\r\n  const finalActionLabel = actionLabel || defaultContent.actionLabel;\r\n  const finalActionUrl = actionUrl || defaultContent.actionUrl;\r\n\r\n  return (",
          "index": 1495
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆∞a c√≥ quiz n√†o",
          "index": 598
        },
        {
          "kind": "StringLiteral",
          "text": "H√£y t·∫°o quiz ƒë·∫ßu ti√™n c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu!",
          "index": 642
        },
        {
          "kind": "StringLiteral",
          "text": "T·∫°o Quiz M·ªõi",
          "index": 711
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆∞a c√≥ ƒë√°nh gi√° n√†o",
          "index": 902
        },
        {
          "kind": "StringLiteral",
          "text": "H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n ƒë√°nh gi√° quiz n√†y!",
          "index": 950
        },
        {
          "kind": "StringLiteral",
          "text": "Vi·∫øt ƒë√°nh gi√°",
          "index": 1018
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆∞a c√≥ quiz y√™u th√≠ch",
          "index": 1202
        },
        {
          "kind": "StringLiteral",
          "text": "H√£y th√™m quiz v√†o danh s√°ch y√™u th√≠ch ƒë·ªÉ d·ªÖ d√†ng truy c·∫≠p!",
          "index": 1252
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√°m ph√° Quiz",
          "index": 1338
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng c√≥ d·ªØ li·ªáu",
          "index": 1516
        },
        {
          "kind": "StringLiteral",
          "text": "Hi·ªán t·∫°i ch∆∞a c√≥ n·ªôi dung n√†o.",
          "index": 1560
        }
      ]
    },
    {
      "file": "shared\\components\\AchievementSystem.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "[] = [\r\n  {\r\n    id: 'first_quiz',\r\n    title: 'üéØ B∆∞·ªõc ƒë·∫ßu ti√™n',\r\n    description: 'Ho√†n th√†nh quiz ƒë·∫ßu ti√™n',\r\n    icon: 'üéØ',\r\n    condition: { type: 'quiz_count', value: 1 },\r\n    rarity: 'common'\r\n  },\r\n  {\r\n    id: 'quiz_master',\r\n    title: 'üìö Th·∫°c sƒ© Quiz',\r\n    description: 'Ho√†n th√†nh 10 quiz',\r\n    icon: 'üìö',\r\n    condition: { type: 'quiz_count', value: 10 },\r\n    rarity: 'rare'\r\n  },\r\n  {\r\n    id: 'quiz_legend',\r\n    title: 'üëë Huy·ªÅn tho·∫°i Quiz',\r\n    description: 'Ho√†n th√†nh 50 quiz',\r\n    icon: 'üëë',\r\n    condition: { type: 'quiz_count', value: 50 },\r\n    rarity: 'legendary'\r\n  },\r\n  {\r\n    id: 'high_scorer',\r\n    title: '‚≠ê ƒêi·ªÉm cao',\r\n    description: 'ƒê·∫°t ƒëi·ªÉm trung b√¨nh tr√™n 80%',\r\n    icon: '‚≠ê',\r\n    condition: { type: 'score_average', value: 80 },\r\n    rarity: 'rare'\r\n  },\r\n  {\r\n    id: 'perfectionist',\r\n    title: 'üíØ Ho√†n h·∫£o',\r\n    description: 'ƒê·∫°t 100% trong 1 quiz',\r\n    icon: 'üíØ',\r\n    condition: { type: 'perfect_score', value: 100 },\r\n    rarity: 'epic'\r\n  },\r\n  {\r\n    id: 'streak_5',\r\n    title: 'üî• Chu·ªói 5',\r\n    description: 'Ho√†n th√†nh 5 quiz li√™n ti·∫øp',\r\n    icon: 'üî•',\r\n    condition: { type: 'streak', value: 5 },\r\n    rarity: 'rare'\r\n  },\r\n  {\r\n    id: 'speed_demon',\r\n    title: '‚ö° T·ªëc ƒë·ªô √°nh s√°ng',\r\n    description: 'Ho√†n th√†nh quiz trong th·ªùi gian k·ª∑ l·ª•c',\r\n    icon: '‚ö°',\r\n    condition: { type: 'time_record', value: 60 }, // seconds\r\n    rarity: 'epic'\r\n  }\r\n];\r\n\r\nconst AchievementCard: React.FC",
          "index": 631
        },
        {
          "kind": "JSXText",
          "text": "üèÜ Th√†nh t√≠ch",
          "index": 9832
        },
        {
          "kind": "JSXText",
          "text": "{unlockedCount}/{totalCount} ƒë√£ m·ªü kh√≥a",
          "index": 9901
        },
        {
          "kind": "JSXText",
          "text": "{\r\n                      // Share achievement\r\n                      navigator.clipboard.writeText(`üéâ T√¥i v·ª´a m·ªü kh√≥a th√†nh t√≠ch \"${showModal.title}\" trong Quiz App!`);\r\n                      setShowModal(null);\r\n                    }}\r\n                    className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\r\n                  >\r\n                    {t('share')}",
          "index": 11587
        },
        {
          "kind": "StringLiteral",
          "text": "üéØ B∆∞·ªõc ƒë·∫ßu ti√™n",
          "index": 679
        },
        {
          "kind": "StringLiteral",
          "text": "Ho√†n th√†nh quiz ƒë·∫ßu ti√™n",
          "index": 717
        },
        {
          "kind": "StringLiteral",
          "text": "üìö Th·∫°c sƒ© Quiz",
          "index": 881
        },
        {
          "kind": "StringLiteral",
          "text": "Ho√†n th√†nh 10 quiz",
          "index": 918
        },
        {
          "kind": "StringLiteral",
          "text": "üëë Huy·ªÅn tho·∫°i Quiz",
          "index": 1075
        },
        {
          "kind": "StringLiteral",
          "text": "Ho√†n th√†nh 50 quiz",
          "index": 1116
        },
        {
          "kind": "StringLiteral",
          "text": "‚≠ê ƒêi·ªÉm cao",
          "index": 1278
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê·∫°t ƒëi·ªÉm trung b√¨nh tr√™n 80%",
          "index": 1310
        },
        {
          "kind": "StringLiteral",
          "text": "üíØ Ho√†n h·∫£o",
          "index": 1481
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê·∫°t 100% trong 1 quiz",
          "index": 1514
        },
        {
          "kind": "StringLiteral",
          "text": "üî• Chu·ªói 5",
          "index": 1675
        },
        {
          "kind": "StringLiteral",
          "text": "Ho√†n th√†nh 5 quiz li√™n ti·∫øp",
          "index": 1707
        },
        {
          "kind": "StringLiteral",
          "text": "‚ö° T·ªëc ƒë·ªô √°nh s√°ng",
          "index": 1868
        },
        {
          "kind": "StringLiteral",
          "text": "Ho√†n th√†nh quiz trong th·ªùi gian k·ª∑ l·ª•c",
          "index": 1907
        }
      ]
    },
    {
      "file": "lib\\utils\\helpers.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{\r\n  return new Intl.DateTimeFormat('vi-VN', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n  }).format(date);\r\n};\r\n\r\n/**\r\n * Format a number to percentage with Vietnamese locale\r\n */\r\nexport const formatPercentage = (value: number, total: number): string => {\r\n  const percentage = (value / total) * 100;\r\n  return `${percentage.toFixed(1)}%`;\r\n};\r\n\r\n/**\r\n * Calculate quiz score\r\n */\r\nexport const calculateScore = (result: QuizResult): number => {\r\n  return Math.round((result.correctAnswers / result.totalQuestions) * 100);\r\n};\r\n\r\n/**\r\n * Get difficulty badge color\r\n */\r\nexport const getDifficultyColor = (difficulty: string): string => {\r\n  switch (difficulty) {\r\n    case 'easy':\r\n      return 'bg-green-100 text-green-800';\r\n    case 'medium':\r\n      return 'bg-yellow-100 text-yellow-800';\r\n    case 'hard':\r\n      return 'bg-red-100 text-red-800';\r\n    default:\r\n      return 'bg-gray-100 text-gray-800';\r\n  }\r\n};\r\n\r\n/**\r\n * Get difficulty label in Vietnamese\r\n */\r\nexport const getDifficultyLabel = (difficulty: string): string => {\r\n  switch (difficulty) {\r\n    case 'easy':\r\n      return 'D·ªÖ';\r\n    case 'medium':\r\n      return 'Trung b√¨nh';\r\n    case 'hard':\r\n      return 'Kh√≥';\r\n    default:\r\n      return 'Kh√¥ng x√°c ƒë·ªãnh';\r\n  }\r\n};\r\n\r\n/**\r\n * Shuffle an array (Fisher-Yates algorithm)\r\n */\r\nexport const shuffleArray =",
          "index": 470
        },
        {
          "kind": "StringLiteral",
          "text": "D·ªÖ",
          "index": 1638
        },
        {
          "kind": "StringLiteral",
          "text": "Trung b√¨nh",
          "index": 1678
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√≥",
          "index": 1724
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng x√°c ƒë·ªãnh",
          "index": 1759
        },
        {
          "kind": "StringLiteral",
          "text": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±",
          "index": 3018
        },
        {
          "kind": "StringLiteral",
          "text": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ hoa",
          "index": 3115
        },
        {
          "kind": "StringLiteral",
          "text": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ th∆∞·ªùng",
          "index": 3214
        },
        {
          "kind": "StringLiteral",
          "text": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 s·ªë",
          "index": 3316
        }
      ]
    },
    {
      "file": "lib\\i18n\\index.ts",
      "matches": [
        {
          "kind": "StringLiteral",
          "text": "ƒêang t·∫£i...",
          "index": 313
        },
        {
          "kind": "StringLiteral",
          "text": "L∆∞u",
          "index": 344
        },
        {
          "kind": "StringLiteral",
          "text": "H·ªßy",
          "index": 369
        },
        {
          "kind": "StringLiteral",
          "text": "X√≥a",
          "index": 394
        },
        {
          "kind": "StringLiteral",
          "text": "Ch·ªânh s·ª≠a",
          "index": 417
        },
        {
          "kind": "StringLiteral",
          "text": "T·∫°o m·ªõi",
          "index": 448
        },
        {
          "kind": "StringLiteral",
          "text": "C·∫≠p nh·∫≠t",
          "index": 477
        },
        {
          "kind": "StringLiteral",
          "text": "T√¨m ki·∫øm",
          "index": 507
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªçc",
          "index": 537
        },
        {
          "kind": "StringLiteral",
          "text": "S·∫Øp x·∫øp",
          "index": 560
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥",
          "index": 586
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng",
          "index": 606
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê·ªìng √Ω",
          "index": 629
        },
        {
          "kind": "StringLiteral",
          "text": "Quay l·∫°i",
          "index": 655
        },
        {
          "kind": "StringLiteral",
          "text": "Ti·∫øp theo",
          "index": 683
        },
        {
          "kind": "StringLiteral",
          "text": "Tr∆∞·ªõc ƒë√≥",
          "index": 716
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√≥ng",
          "index": 745
        },
        {
          "kind": "StringLiteral",
          "text": "M·ªü",
          "index": 769
        },
        {
          "kind": "StringLiteral",
          "text": "T·∫£i xu·ªëng",
          "index": 818
        },
        {
          "kind": "StringLiteral",
          "text": "T·∫£i l√™n",
          "index": 849
        },
        {
          "kind": "StringLiteral",
          "text": "Ho·∫∑c",
          "index": 874
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang t·∫£i d·ªØ li·ªáu...",
          "index": 905
        },
        {
          "kind": "StringLiteral",
          "text": "Vui l√≤ng ƒë·ª£i m·ªôt ch√∫t",
          "index": 950
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang ki·ªÉm tra x√°c th·ª±c...",
          "index": 999
        },
        {
          "kind": "StringLiteral",
          "text": "ph√∫t",
          "index": 1047
        },
        {
          "kind": "StringLiteral",
          "text": "gi√¢y",
          "index": 1074
        },
        {
          "kind": "StringLiteral",
          "text": "ng∆∞·ªùi ch∆°i",
          "index": 1101
        },
        {
          "kind": "StringLiteral",
          "text": "ph√≤ng",
          "index": 1131
        },
        {
          "kind": "StringLiteral",
          "text": "R·ªùi kh·ªèi",
          "index": 1185
        },
        {
          "kind": "StringLiteral",
          "text": "S·∫µn s√†ng",
          "index": 1214
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang ch·ªù",
          "index": 1245
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫Øt ƒë·∫ßu",
          "index": 1274
        },
        {
          "kind": "StringLiteral",
          "text": "K·∫øt th√∫c",
          "index": 1303
        },
        {
          "kind": "StringLiteral",
          "text": "Ho√†n th√†nh",
          "index": 1335
        },
        {
          "kind": "StringLiteral",
          "text": "Ti·∫øp t·ª•c",
          "index": 1369
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang x·ª≠ l√Ω...",
          "index": 1403
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng c√≥ d·ªØ li·ªáu",
          "index": 1438
        },
        {
          "kind": "StringLiteral",
          "text": "Vui l√≤ng th·ª≠ l·∫°i",
          "index": 1478
        },
        {
          "kind": "StringLiteral",
          "text": "Th·ª≠ l·∫°i",
          "index": 1515
        },
        {
          "kind": "StringLiteral",
          "text": "L√†m m·ªõi",
          "index": 1545
        },
        {
          "kind": "StringLiteral",
          "text": "Th√†nh c√¥ng",
          "index": 1575
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói",
          "index": 1606
        },
        {
          "kind": "StringLiteral",
          "text": "C·∫£nh b√°o",
          "index": 1632
        },
        {
          "kind": "StringLiteral",
          "text": "Th√¥ng tin",
          "index": 1660
        },
        {
          "kind": "StringLiteral",
          "text": "Trang ch·ªß",
          "index": 1739
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫£ng ƒëi·ªÅu khi·ªÉn",
          "index": 1773
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆°i c√πng",
          "index": 1842
        },
        {
          "kind": "StringLiteral",
          "text": "Y√™u th√≠ch",
          "index": 1876
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫£ng x·∫øp h·∫°ng",
          "index": 1912
        },
        {
          "kind": "StringLiteral",
          "text": "H·ªì s∆°",
          "index": 1948
        },
        {
          "kind": "StringLiteral",
          "text": "Qu·∫£n tr·ªã",
          "index": 2004
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêƒÉng nh·∫≠p",
          "index": 2033
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêƒÉng xu·∫•t",
          "index": 2064
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêƒÉng k√Ω",
          "index": 2097
        },
        {
          "kind": "StringLiteral",
          "text": "C√†i ƒë·∫∑t",
          "index": 2128
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆°i c√πng b·∫°n b√®",
          "index": 2215
        },
        {
          "kind": "StringLiteral",
          "text": "Tham gia ph√≤ng v√† thi ƒë·∫•u v·ªõi ng∆∞·ªùi kh√°c",
          "index": 2255
        },
        {
          "kind": "StringLiteral",
          "text": "T·∫°o ph√≤ng m·ªõi",
          "index": 2321
        },
        {
          "kind": "StringLiteral",
          "text": "Tham gia ph√≤ng",
          "index": 2358
        },
        {
          "kind": "StringLiteral",
          "text": "M√£ ph√≤ng",
          "index": 2396
        },
        {
          "kind": "StringLiteral",
          "text": "T√™n ph√≤ng",
          "index": 2428
        },
        {
          "kind": "StringLiteral",
          "text": "S·ªë ng∆∞·ªùi t·ªëi ƒëa",
          "index": 2463
        },
        {
          "kind": "StringLiteral",
          "text": "Th·ªùi gian m·ªói c√¢u",
          "index": 2503
        },
        {
          "kind": "StringLiteral",
          "text": "Quy·ªÅn ri√™ng t∆∞",
          "index": 2543
        },
        {
          "kind": "StringLiteral",
          "text": "C√¥ng khai",
          "index": 2579
        },
        {
          "kind": "StringLiteral",
          "text": "Ri√™ng t∆∞",
          "index": 2611
        },
        {
          "kind": "StringLiteral",
          "text": "M·∫≠t kh·∫©u",
          "index": 2643
        },
        {
          "kind": "StringLiteral",
          "text": "Nh·∫≠p m·∫≠t kh·∫©u",
          "index": 2680
        },
        {
          "kind": "StringLiteral",
          "text": "C√†i ƒë·∫∑t ph√≤ng",
          "index": 2721
        },
        {
          "kind": "StringLiteral",
          "text": "C√†i ƒë·∫∑t game",
          "index": 2762
        },
        {
          "kind": "StringLiteral",
          "text": "Hi·ªÉn th·ªã ƒë√°p √°n",
          "index": 2801
        },
        {
          "kind": "StringLiteral",
          "text": "Cho ph√©p v√†o mu·ªôn",
          "index": 2845
        },
        {
          "kind": "StringLiteral",
          "text": "T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu",
          "index": 2887
        },
        {
          "kind": "StringLiteral",
          "text": "Ph√≤ng ch·ªù",
          "index": 2944
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang ch·ªù ch·ªß ph√≤ng b·∫Øt ƒë·∫ßu",
          "index": 2985
        },
        {
          "kind": "StringLiteral",
          "text": "{{ready}}/{{total}} ng∆∞·ªùi s·∫µn s√†ng",
          "index": 3041
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫Øt ƒë·∫ßu game",
          "index": 3102
        },
        {
          "kind": "StringLiteral",
          "text": "Kick ng∆∞·ªùi ch∆°i",
          "index": 3142
        },
        {
          "kind": "StringLiteral",
          "text": "R·ªùi ph√≤ng",
          "index": 3184
        },
        {
          "kind": "StringLiteral",
          "text": "Sao ch√©p m√£ ph√≤ng",
          "index": 3219
        },
        {
          "kind": "StringLiteral",
          "text": "Chia s·∫ª m√£ ph√≤ng",
          "index": 3263
        },
        {
          "kind": "StringLiteral",
          "text": "Game ƒëang di·ªÖn ra",
          "index": 3330
        },
        {
          "kind": "StringLiteral",
          "text": "C√¢u h·ªèi {{current}}/{{total}}",
          "index": 3373
        },
        {
          "kind": "StringLiteral",
          "text": "C√≤n l·∫°i {{time}}s",
          "index": 3428
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang g·ª≠i c√¢u tr·∫£ l·ªùi...",
          "index": 3473
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang ch·ªù ng∆∞·ªùi kh√°c...",
          "index": 3530
        },
        {
          "kind": "StringLiteral",
          "text": "K·∫øt qu·∫£ c√¢u h·ªèi",
          "index": 3577
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫£ng x·∫øp h·∫°ng",
          "index": 3621
        },
        {
          "kind": "StringLiteral",
          "text": "Game k·∫øt th√∫c",
          "index": 3660
        },
        {
          "kind": "StringLiteral",
          "text": "K·∫øt qu·∫£ cu·ªëi c√πng",
          "index": 3703
        },
        {
          "kind": "StringLiteral",
          "text": "Nh·∫≠p tin nh·∫Øn...",
          "index": 3804
        },
        {
          "kind": "StringLiteral",
          "text": "G·ª≠i",
          "index": 3842
        },
        {
          "kind": "StringLiteral",
          "text": "H·ªá th·ªëng",
          "index": 3869
        },
        {
          "kind": "StringLiteral",
          "text": "{{name}} ƒë√£ tham gia",
          "index": 3907
        },
        {
          "kind": "StringLiteral",
          "text": "{{name}} ƒë√£ r·ªùi kh·ªèi",
          "index": 3955
        },
        {
          "kind": "StringLiteral",
          "text": "{{name}} ƒë√£ b·ªã kick",
          "index": 4005
        },
        {
          "kind": "StringLiteral",
          "text": "Game ƒë√£ b·∫Øt ƒë·∫ßu",
          "index": 4053
        },
        {
          "kind": "StringLiteral",
          "text": "Game ƒë√£ k·∫øt th√∫c",
          "index": 4095
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t√¨m th·∫•y ph√≤ng",
          "index": 4171
        },
        {
          "kind": "StringLiteral",
          "text": "Ph√≤ng ƒë√£ ƒë·∫ßy",
          "index": 4217
        },
        {
          "kind": "StringLiteral",
          "text": "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng",
          "index": 4260
        },
        {
          "kind": "StringLiteral",
          "text": "Game ƒëang di·ªÖn ra",
          "index": 4311
        },
        {
          "kind": "StringLiteral",
          "text": "M·∫•t k·∫øt n·ªëi",
          "index": 4360
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang k·∫øt n·ªëi l·∫°i...",
          "index": 4401
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ tham gia ph√≤ng",
          "index": 4450
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫°o ph√≤ng",
          "index": 4506
        },
        {
          "kind": "StringLiteral",
          "text": "T·∫°o ph√≤ng th√†nh c√¥ng",
          "index": 4585
        },
        {
          "kind": "StringLiteral",
          "text": "Tham gia ph√≤ng th√†nh c√¥ng",
          "index": 4633
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ r·ªùi kh·ªèi ph√≤ng",
          "index": 4684
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ kick ng∆∞·ªùi ch∆°i",
          "index": 4731
        },
        {
          "kind": "StringLiteral",
          "text": "Game ƒë√£ b·∫Øt ƒë·∫ßu",
          "index": 4778
        },
        {
          "kind": "StringLiteral",
          "text": "Th·ª≠ th√°ch ki·∫øn th·ª©c c·ªßa b·∫°n",
          "index": 4900
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√°m ph√° h√†ng ng√†n quiz th√∫ v·ªã, th·ª≠ th√°ch b·∫£n th√¢n v√† n√¢ng cao ki·∫øn th·ª©c v·ªõi Quiz Trivia - n·ªÅn t·∫£ng quiz t∆∞∆°ng t√°c h√†ng ƒë·∫ßu!",
          "index": 4953
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫Øt ƒë·∫ßu ngay - Mi·ªÖn ph√≠!",
          "index": 5129
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ c√≥ t√†i kho·∫£n?",
          "index": 5180
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêa d·∫°ng ch·ªß ƒë·ªÅ",
          "index": 5278
        },
        {
          "kind": "StringLiteral",
          "text": "Khoa h·ªçc, l·ªãch s·ª≠, th·ªÉ thao, gi·∫£i tr√≠ v√† nhi·ªÅu ch·ªß ƒë·ªÅ h·∫•p d·∫´n kh√°c",
          "index": 5323
        },
        {
          "kind": "StringLiteral",
          "text": "Th·ªùi gian th·ª±c",
          "index": 5450
        },
        {
          "kind": "StringLiteral",
          "text": "Th·ª≠ th√°ch v·ªõi timer ƒë·∫øm ng∆∞·ª£c v√† theo d√µi ti·∫øn ƒë·ªô realtime",
          "index": 5495
        },
        {
          "kind": "StringLiteral",
          "text": "X·∫øp h·∫°ng & Th√†nh t√≠ch",
          "index": 5613
        },
        {
          "kind": "StringLiteral",
          "text": "Theo d√µi ƒëi·ªÉm s·ªë, th·ªëng k√™ v√† so s√°nh v·ªõi b·∫°n b√®",
          "index": 5665
        },
        {
          "kind": "StringLiteral",
          "text": "Quiz ƒëa d·∫°ng",
          "index": 5779
        },
        {
          "kind": "StringLiteral",
          "text": "Ng∆∞·ªùi ch∆°i",
          "index": 5816
        },
        {
          "kind": "StringLiteral",
          "text": "L∆∞·ª£t ch∆°i",
          "index": 5849
        },
        {
          "kind": "StringLiteral",
          "text": "H·ªó tr·ª£",
          "index": 5883
        },
        {
          "kind": "StringLiteral",
          "text": "T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.",
          "index": 5943
        },
        {
          "kind": "StringLiteral",
          "text": "Nh·∫≠p c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n...",
          "index": 6064
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√°m ph√° Quiz",
          "index": 6121
        },
        {
          "kind": "StringLiteral",
          "text": "T√¨m hi·ªÉu ki·∫øn th·ª©c m·ªõi qua c√°c quiz th√∫ v·ªã",
          "index": 6168
        },
        {
          "kind": "StringLiteral",
          "text": "Quiz kh√¥ng t√™n",
          "index": 6234
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêƒÉng nh·∫≠p",
          "index": 6327
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêƒÉng k√Ω",
          "index": 6360
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêƒÉng xu·∫•t",
          "index": 6389
        },
        {
          "kind": "StringLiteral",
          "text": "M·∫≠t kh·∫©u",
          "index": 6448
        },
        {
          "kind": "StringLiteral",
          "text": "X√°c nh·∫≠n m·∫≠t kh·∫©u",
          "index": 6487
        },
        {
          "kind": "StringLiteral",
          "text": "T√™n hi·ªÉn th·ªã",
          "index": 6531
        },
        {
          "kind": "StringLiteral",
          "text": "Nh·∫≠p email c·ªßa b·∫°n",
          "index": 6575
        },
        {
          "kind": "StringLiteral",
          "text": "Nh·∫≠p m·∫≠t kh·∫©u",
          "index": 6628
        },
        {
          "kind": "StringLiteral",
          "text": "Nh·∫≠p t√™n hi·ªÉn th·ªã",
          "index": 6679
        },
        {
          "kind": "StringLiteral",
          "text": "Ch√†o m·ª´ng tr·ªü l·∫°i!",
          "index": 6723
        },
        {
          "kind": "StringLiteral",
          "text": "T·∫°o t√†i kho·∫£n m·ªõi",
          "index": 6773
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
          "index": 6818
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêƒÉng k√Ω th√†nh c√¥ng!",
          "index": 6870
        },
        {
          "kind": "StringLiteral",
          "text": "Qu√™n m·∫≠t kh·∫©u?",
          "index": 6919
        },
        {
          "kind": "StringLiteral",
          "text": "Ghi nh·ªõ ƒëƒÉng nh·∫≠p",
          "index": 6959
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêƒÉng nh·∫≠p v·ªõi Google",
          "index": 7007
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêƒÉng k√Ω v·ªõi Google",
          "index": 7061
        },
        {
          "kind": "StringLiteral",
          "text": "T√¥i ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán",
          "index": 7107
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ c√≥ t√†i kho·∫£n?",
          "index": 7183
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆∞a c√≥ t√†i kho·∫£n?",
          "index": 7230
        },
        {
          "kind": "StringLiteral",
          "text": "Vui l√≤ng nh·∫≠p email",
          "index": 7303
        },
        {
          "kind": "StringLiteral",
          "text": "Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng",
          "index": 7352
        },
        {
          "kind": "StringLiteral",
          "text": "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u",
          "index": 7412
        },
        {
          "kind": "StringLiteral",
          "text": "Vui l√≤ng nh·∫≠p t√™n hi·ªÉn th·ªã",
          "index": 7471
        },
        {
          "kind": "StringLiteral",
          "text": "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp",
          "index": 7531
        },
        {
          "kind": "StringLiteral",
          "text": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±",
          "index": 7593
        },
        {
          "kind": "StringLiteral",
          "text": "Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng",
          "index": 7656
        },
        {
          "kind": "StringLiteral",
          "text": "Email kh√¥ng t·ªìn t·∫°i",
          "index": 7754
        },
        {
          "kind": "StringLiteral",
          "text": "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng",
          "index": 7804
        },
        {
          "kind": "StringLiteral",
          "text": "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng",
          "index": 7858
        },
        {
          "kind": "StringLiteral",
          "text": "Email kh√¥ng h·ª£p l·ªá",
          "index": 7918
        },
        {
          "kind": "StringLiteral",
          "text": "T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a",
          "index": 7966
        },
        {
          "kind": "StringLiteral",
          "text": "Qu√° nhi·ªÅu l·∫ßn th·ª≠. Vui l√≤ng th·ª≠ l·∫°i sau",
          "index": 8026
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói ƒëƒÉng nh·∫≠p: {{message}}",
          "index": 8093
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói x·∫£y ra khi g·ª≠i m√£ x√°c th·ª±c: {{message}}",
          "index": 8149
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒëƒÉng k√Ω",
          "index": 8237
        },
        {
          "kind": "StringLiteral",
          "text": "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng",
          "index": 8304
        },
        {
          "kind": "StringLiteral",
          "text": "M·∫≠t kh·∫©u qu√° y·∫øu",
          "index": 8359
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói t·∫°o t√†i kho·∫£n: {{message}}",
          "index": 8406
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói ƒëƒÉng nh·∫≠p Google: {{message}}",
          "index": 8470
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng!",
          "index": 8547
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ h·ªßy qu√° tr√¨nh ƒëƒÉng k√Ω",
          "index": 8612
        },
        {
          "kind": "StringLiteral",
          "text": "X√°c nh·∫≠n m·∫≠t kh·∫©u",
          "index": 8678
        },
        {
          "kind": "StringLiteral",
          "text": "ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng",
          "index": 8725
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆∞a c√≥ t√†i kho·∫£n? ƒêƒÉng k√Ω ngay",
          "index": 8768
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ c√≥ t√†i kho·∫£n? ƒêƒÉng nh·∫≠p",
          "index": 8825
        },
        {
          "kind": "StringLiteral",
          "text": "C·∫ßn ƒëƒÉng nh·∫≠p",
          "index": 8880
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p trang Creator",
          "index": 8977
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫°n c·∫ßn c√≥ vai tr√≤ Creator ho·∫∑c Admin ƒë·ªÉ truy c·∫≠p trang n√†y",
          "index": 9048
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o quiz",
          "index": 9194
        },
        {
          "kind": "StringLiteral",
          "text": "Th√¥ng tin c∆° b·∫£n",
          "index": 9268
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêi·ªÅn th√¥ng tin c∆° b·∫£n v·ªÅ quiz c·ªßa b·∫°n",
          "index": 9310
        },
        {
          "kind": "StringLiteral",
          "text": "Ti√™u ƒë·ªÅ Quiz",
          "index": 9375
        },
        {
          "kind": "StringLiteral",
          "text": "Nh·∫≠p ti√™u ƒë·ªÅ quiz...",
          "index": 9421
        },
        {
          "kind": "StringLiteral",
          "text": "M√¥ t·∫£",
          "index": 9475
        },
        {
          "kind": "StringLiteral",
          "text": "M√¥ t·∫£ chi ti·∫øt v·ªÅ quiz...",
          "index": 9520
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p",
          "index": 9636
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i sau.",
          "index": 9686
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...",
          "index": 9761
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ k·∫øt n·ªëi Firestore",
          "index": 9868
        },
        {
          "kind": "StringLiteral",
          "text": "üîç T√¨m ki·∫øm ng∆∞·ªùi ch∆°i...",
          "index": 9983
        },
        {
          "kind": "StringLiteral",
          "text": "Thu g·ªçn",
          "index": 10032
        },
        {
          "kind": "StringLiteral",
          "text": "Xem th√™m {{count}} ng∆∞·ªùi",
          "index": 10063
        },
        {
          "kind": "StringLiteral",
          "text": "Xin ch√†o, {{name}}!",
          "index": 10165
        },
        {
          "kind": "StringLiteral",
          "text": "Th·ª≠ th√°ch ki·∫øn th·ª©c v·ªõi c√°c b√†i quiz ƒëa d·∫°ng",
          "index": 10211
        },
        {
          "kind": "StringLiteral",
          "text": "C√°c quiz b·∫°n ƒë√£ l∆∞u ƒë·ªÉ l√†m sau",
          "index": 10286
        },
        {
          "kind": "StringLiteral",
          "text": "Xem th·ª© h·∫°ng v√† th√†nh t√≠ch c·ªßa b·∫°n",
          "index": 10343
        },
        {
          "kind": "StringLiteral",
          "text": "Xem v√† ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n",
          "index": 10404
        },
        {
          "kind": "StringLiteral",
          "text": "T·∫°o c√°c b√†i quiz c·ªßa ri√™ng b·∫°n",
          "index": 10467
        },
        {
          "kind": "StringLiteral",
          "text": "Qu·∫£n l√Ω ng∆∞·ªùi d√πng v√† h·ªá th·ªëng",
          "index": 10523
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫£ng Qu·∫£n Tr·ªã",
          "index": 10621
        },
        {
          "kind": "StringLiteral",
          "text": "Xin ch√†o, {{name}}",
          "index": 10658
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ ph√™ duy·ªát quiz th√†nh c√¥ng!",
          "index": 10704
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói x·∫£y ra khi ph√™ duy·ªát quiz!",
          "index": 10766
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ t·ª´ ch·ªëi quiz!",
          "index": 10827
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói x·∫£y ra khi t·ª´ ch·ªëi quiz!",
          "index": 10877
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ t·∫£i d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ Firebase!",
          "index": 10939
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói khi t·∫£i d·ªØ li·ªáu",
          "index": 11003
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói khi t·∫£i d·ªØ li·ªáu th·ª±c t·∫ø",
          "index": 11055
        },
        {
          "kind": "StringLiteral",
          "text": "Ch·ª©c nƒÉng xu·∫•t d·ªØ li·ªáu ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn",
          "index": 11119
        },
        {
          "kind": "StringLiteral",
          "text": "Tab hi·ªán t·∫°i: {{tab}}",
          "index": 11188
        },
        {
          "kind": "StringLiteral",
          "text": "V·ªÅ T·ªïng quan",
          "index": 11239
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫°n ƒëang xem ph·∫ßn Th·ªëng k√™ & T·ªïng quan",
          "index": 11286
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√¢y l√† trang ch·ª©a bi·ªÉu ƒë·ªì v√† th·ªëng k√™ n√¢ng cao m√† b·∫°n v·ª´a th√™m",
          "index": 11364
        },
        {
          "kind": "StringLiteral",
          "text": "Qu·∫£n l√Ω ng∆∞·ªùi d√πng",
          "index": 11456
        },
        {
          "kind": "StringLiteral",
          "text": "T·ªïng quan",
          "index": 11518
        },
        {
          "kind": "StringLiteral",
          "text": "Ng∆∞·ªùi d√πng",
          "index": 11550
        },
        {
          "kind": "StringLiteral",
          "text": "Danh m·ª•c",
          "index": 11618
        },
        {
          "kind": "StringLiteral",
          "text": "T·ªïng quan & Th·ªëng k√™",
          "index": 11657
        },
        {
          "kind": "StringLiteral",
          "text": "Qu·∫£n l√Ω Ng∆∞·ªùi d√πng",
          "index": 11709
        },
        {
          "kind": "StringLiteral",
          "text": "Qu·∫£n l√Ω Quiz",
          "index": 11759
        },
        {
          "kind": "StringLiteral",
          "text": "Qu·∫£n l√Ω Danh m·ª•c",
          "index": 11807
        },
        {
          "kind": "StringLiteral",
          "text": "T·ªïng t√†i kho·∫£n",
          "index": 11880
        },
        {
          "kind": "StringLiteral",
          "text": "Quiz ƒë√£ xu·∫•t b·∫£n",
          "index": 11928
        },
        {
          "kind": "StringLiteral",
          "text": "L∆∞·ª£t l√†m b√†i",
          "index": 11980
        },
        {
          "kind": "StringLiteral",
          "text": "Ng∆∞·ªùi s√°ng t·∫°o",
          "index": 12023
        },
        {
          "kind": "StringLiteral",
          "text": "TƒÉng tr∆∞·ªüng ng∆∞·ªùi d√πng",
          "index": 12065
        }
      ]
    },
    {
      "file": "lib\\firebase\\config.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{\r\n    console.error(\"Auth persistence error:\", error);\r\n    toast.error(\"C√≥ l·ªói x·∫£y ra khi thi·∫øt l·∫≠p x√°c th·ª±c. Vui l√≤ng t·∫£i l·∫°i trang.\");\r\n  });\r\n\r\n// Initialize Firestore with modern configuration\r\nexport const db = getFirestore(app);\r\n\r\n// Use modern cache settings instead of deprecated enableIndexedDbPersistence\r\n// This is automatically handled by the new Firebase SDK\r\n\r\n// Configure timeout for Firestore operations\r\nexport const FIRESTORE_TIMEOUT = 15000; // 15 seconds\r\n\r\nexport const withTimeout = async (promise: Promise",
          "index": 1134
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói x·∫£y ra khi thi·∫øt l·∫≠p x√°c th·ª±c. Vui l√≤ng t·∫£i l·∫°i trang.",
          "index": 1209
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.",
          "index": 2101
        }
      ]
    },
    {
      "file": "features\\quiz\\store.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{\r\n    try {\r\n      const result = await quizService.getQuizzes(undefined, undefined);\r\n      return result.quizzes;\r\n    } catch (error: any) {\r\n      console.error('Failed to fetch quizzes:', error);\r\n      \r\n      if (error.type === 'CONNECTION_ERROR') {\r\n        return rejectWithValue('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n.');\r\n      }\r\n      \r\n      if (error.type === 'TIMEOUT_ERROR') {\r\n        return rejectWithValue('Server kh√¥ng ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.');\r\n      }\r\n      \r\n      return rejectWithValue('ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch quiz. Vui l√≤ng th·ª≠ l·∫°i.');\r\n    }\r\n  }\r\n);\r\n\r\nexport const fetchQuizById = createAsyncThunk(\r\n  'quiz/fetchQuizById',\r\n  async (quizId: string) => {\r\n    const quiz = await quizService.getQuizById(quizId);\r\n    return quiz;\r\n  }\r\n);\r\n\r\nexport const fetchUserQuizResults = createAsyncThunk(\r\n  'quiz/fetchUserQuizResults',\r\n  async (userId: string) => {\r\n    const results = await getUserQuizResults(userId);\r\n    return results;\r\n  }\r\n);\r\n\r\n// Th√™m isTimeWarning v√† totalTime v√†o QuizState\r\ninterface QuizState {\r\n  quizzes: Quiz[];\r\n  currentQuiz: Quiz | null;\r\n  userResults: QuizResult[];\r\n  loading: boolean;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  connectionError: boolean;\r\n  filters: QuizFilters;\r\n  currentQuestionIndex: number;\r\n  userAnswers: Record",
          "index": 369
        },
        {
          "kind": "JSXText",
          "text": ") => {\r\n      state.currentQuiz = action.payload;\r\n      if (action.payload) {\r\n        state.currentQuestionIndex = 0;\r\n        state.userAnswers = {};\r\n        state.totalTime = action.payload.duration * 60; // T·ªïng th·ªùi gian (gi√¢y)\r\n        state.timeLeft = state.totalTime;\r\n        state.quizStartTime = Date.now();\r\n        state.isTimeWarning = false;\r\n      } else {\r\n        state.currentQuestionIndex = 0;\r\n        state.userAnswers = {};\r\n        state.timeLeft = 0;\r\n        state.quizStartTime = null;\r\n        state.totalTime = 0;\r\n        state.isTimeWarning = false;\r\n      }\r\n    },\r\n\r\n    // C·∫≠p nh·∫≠t timeLeft d·ª±a tr√™n th·ªùi gian th·ª±c t·∫ø ƒë√£ tr√¥i qua\r\n    updateTimeLeft: (state) => {\r\n      if (state.quizStartTime && state.totalTime > 0) {\r\n        const elapsed = Math.floor((Date.now() - state.quizStartTime) / 1000);\r\n        const newTimeLeft = Math.max(state.totalTime - elapsed, 0);\r\n        state.timeLeft = newTimeLeft;\r\n        // C·∫£nh b√°o khi c√≤n",
          "index": 3450
        },
        {
          "kind": "JSXText",
          "text": "{\r\n      if (state.timeLeft > 0) {\r\n        state.timeLeft -= 1;\r\n        // C·∫£nh b√°o khi c√≤n",
          "index": 4626
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n.",
          "index": 661
        },
        {
          "kind": "StringLiteral",
          "text": "Server kh√¥ng ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.",
          "index": 829
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch quiz. Vui l√≤ng th·ª≠ l·∫°i.",
          "index": 925
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói khi t·∫£i quiz",
          "index": 6825
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói khi t·∫£i quiz",
          "index": 7567
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói khi t·∫£i k·∫øt qu·∫£ quiz",
          "index": 8000
        }
      ]
    },
    {
      "file": "features\\auth\\store.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": ") => {\r\n      console.log('üéØ Auth loginSuccess reducer called with:', action.payload);\r\n      state.isLoading = false;\r\n      state.user = action.payload;\r\n      state.isAuthenticated = true;\r\n      state.error = null;\r\n      // Ki·ªÉm tra xem user ƒë√£ ch·ªçn role ch∆∞a (∆∞u ti√™n needsRoleSelection t·ª´ payload)\r\n      state.needsRoleSelection = action.payload.needsRoleSelection ?? !action.payload.role;\r\n      console.log('üéØ Auth state after loginSuccess:', {\r\n        isAuthenticated: state.isAuthenticated,\r\n        user: state.user,\r\n        needsRoleSelection: state.needsRoleSelection,\r\n        isLoading: state.isLoading\r\n      });\r\n    },\r\n    loginFailure: (state, action: PayloadAction",
          "index": 577
        },
        {
          "kind": "JSXText",
          "text": ") => {\r\n      if (state.user) {\r\n        state.user.role = action.payload;\r\n        // Kh√¥ng c·∫ßn ch·ªçn role n·ªØa\r\n        state.needsRoleSelection = false;\r\n      }\r\n    },\r\n    setLoading: (state, action: PayloadAction",
          "index": 1727
        }
      ]
    },
    {
      "file": "features\\auth\\services.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "=> {\r\n  try {\r\n    console.log('üîµ Attempting login for:', credentials.email);\r\n    \r\n    const userCredential = await signInWithEmailAndPassword(\r\n      auth,\r\n      credentials.email,\r\n      credentials.password\r\n    );\r\n    \r\n    console.log('üü¢ Firebase login successful, UID:', userCredential.user.uid);\r\n    \r\n    // Ki·ªÉm tra n·∫øu l√† t√†i kho·∫£n admin c·ªë ƒë·ªãnh\r\n    const isAdminAccount = credentials.email === 'admin123@gmail.com';\r\n    let userRole: 'user' | 'creator' | 'admin' | undefined;\r\n    \r\n    if (isAdminAccount) {\r\n      // T·ª± ƒë·ªông g√°n role admin\r\n      userRole = 'admin';\r\n      console.log('üõ°Ô∏è Admin account detected, setting role to admin');\r\n      \r\n      // L∆∞u role admin v√†o Firestore\r\n      await setDoc(doc(db, 'users', userCredential.user.uid), {\r\n        role: 'admin',\r\n        isAdmin: true,\r\n        email: userCredential.user.email,\r\n        displayName: userCredential.user.displayName || 'System Admin',\r\n        updatedAt: new Date()\r\n      }, { merge: true });\r\n      \r\n      // L∆∞u v√†o localStorage\r\n      localStorage.setItem(`user_role_${userCredential.user.uid}`, 'admin');\r\n      localStorage.setItem('isAdmin', 'true');\r\n      console.log('üíæ Admin role saved');\r\n    } else {\r\n      // L·∫•y role t·ª´ Firestore cho user th∆∞·ªùng\r\n      const userDoc = await getDoc(doc(db, 'users', userCredential.user.uid));\r\n      const userData = userDoc.data();\r\n      userRole = userData?.role;\r\n      console.log('üîç Role from Firestore:', userRole);\r\n    }\r\n    \r\n    const authUser = {\r\n      uid: userCredential.user.uid,\r\n      email: userCredential.user.email,\r\n      displayName: userCredential.user.displayName,\r\n      photoURL: userCredential.user.photoURL,\r\n      emailVerified: userCredential.user.emailVerified,\r\n      role: userRole,\r\n    };\r\n    \r\n    console.log('üöÄ Returning auth user:', authUser);\r\n    return authUser;\r\n    \r\n  } catch (error) {\r\n    const authError = error as FirebaseAuthError;\r\n    console.error('‚ùå Login error:', authError);\r\n    throw new Error(getAuthErrorMessage(authError.code));\r\n  }\r\n};\r\n\r\n/**\r\n * Register new user\r\n */\r\nexport const register = async (credentials: RegisterCredentials): Promise",
          "index": 622
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n  try {\r\n    const userCredential = await createUserWithEmailAndPassword(\r\n      auth,\r\n      credentials.email,\r\n      credentials.password\r\n    );\r\n\r\n    // C·∫≠p nh·∫≠t t√™n hi·ªÉn th·ªã\r\n    await updateProfile(userCredential.user, {\r\n      displayName: credentials.displayName,\r\n    });\r\n\r\n    // T·∫°o t√†i kho·∫£n ng∆∞·ªùi d√πng trong Firestore v·ªõi vai tr√≤ m·∫∑c ƒë·ªãnh l√† 'user'\r\n    const userData: User = {\r\n      id: userCredential.user.uid,\r\n      email: credentials.email,\r\n      displayName: credentials.displayName,\r\n      role: 'user', // Lu√¥n l√† 'user' khi ƒëƒÉng k√Ω\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n      preferences: {\r\n        theme: 'light',\r\n        language: 'vi',\r\n        notifications: {\r\n          email: true,\r\n          push: true,\r\n          quizReminders: true,\r\n          newQuizzes: true,\r\n        },\r\n      },\r\n      stats: {\r\n        totalQuizzesTaken: 0,\r\n        totalQuizzesCreated: 0,\r\n        averageScore: 0,\r\n        totalTimeSpent: 0,\r\n        favoriteCategories: [],\r\n        streak: 0,\r\n        achievements: [],\r\n      },\r\n    };\r\n\r\n    await setDoc(doc(db, 'users', userCredential.user.uid), userData);\r\n\r\n    // G·ª≠i email x√°c th·ª±c\r\n    await sendEmailVerification(userCredential.user);\r\n\r\n    return {\r\n      uid: userCredential.user.uid,\r\n      email: userCredential.user.email,\r\n      displayName: userCredential.user.displayName,\r\n      photoURL: userCredential.user.photoURL,\r\n      emailVerified: userCredential.user.emailVerified,\r\n      role: 'user', // Lu√¥n tr·∫£ v·ªÅ 'user'\r\n    };\r\n  } catch (error) {\r\n    const authError = error as FirebaseAuthError;\r\n    // Tr·∫£ v·ªÅ l·ªói ti·∫øng Vi·ªát\r\n    throw new Error(getAuthErrorMessage(authError.code));\r\n  }\r\n};\r\n\r\n/**\r\n * Sign out user\r\n */\r\nexport const signOutUser = async (): Promise",
          "index": 2800
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n  if (!auth.currentUser) {\r\n    throw new Error('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');\r\n  }\r\n\r\n  try {\r\n    await updatePassword(auth.currentUser, newPassword);\r\n  } catch (error) {\r\n    const authError = error as FirebaseAuthError;\r\n    throw new Error(getAuthErrorMessage(authError.code));\r\n  }\r\n};\r\n\r\n/**\r\n * Update user profile\r\n */\r\nexport const updateUserProfile = async (updates: {\r\n  displayName?: string;\r\n  photoURL?: string;\r\n}): Promise",
          "index": 5200
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n  if (!auth.currentUser) {\r\n    throw new Error('Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p');\r\n  }\r\n\r\n  try {\r\n    await updateProfile(auth.currentUser, updates);\r\n    \r\n    // Update user document in Firestore\r\n    const userDoc = doc(db, 'users', auth.currentUser.uid);\r\n    await setDoc(userDoc, {\r\n      displayName: updates.displayName,\r\n      updatedAt: new Date(),\r\n    }, { merge: true });\r\n  } catch (error) {\r\n    throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t profile');\r\n  }\r\n};\r\n\r\n/**\r\n * Get current user data from Firestore\r\n */\r\nexport const getCurrentUserData = async (): Promise",
          "index": 5652
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n  if (!auth.currentUser) {\r\n    return null;\r\n  }\r\n\r\n  try {\r\n    const userDoc = await getDoc(doc(db, 'users', auth.currentUser.uid));\r\n    if (userDoc.exists()) {\r\n      return userDoc.data() as User;\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error fetching user data:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Convert Firebase auth error codes to Vietnamese messages\r\n */\r\nconst getAuthErrorMessage = (errorCode: string): string => {\r\n  switch (errorCode) {\r\n    case 'auth/user-not-found':\r\n      return 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y';\r\n    case 'auth/wrong-password':\r\n      return 'M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c';\r\n    case 'auth/email-already-in-use':\r\n      return 'Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng';\r\n    case 'auth/weak-password':\r\n      return 'M·∫≠t kh·∫©u qu√° y·∫øu';\r\n    case 'auth/invalid-email':\r\n      return 'Email kh√¥ng h·ª£p l·ªá';\r\n    case 'auth/user-disabled':\r\n      return 'T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a';\r\n    case 'auth/too-many-requests':\r\n      return 'Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau';\r\n    case 'auth/network-request-failed':\r\n      return 'L·ªói k·∫øt n·ªëi m·∫°ng';\r\n    default:\r\n      return 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh';\r\n  }\r\n};\r\n\r\n/**\r\n * Check if user is authenticated\r\n */\r\nexport const isAuthenticated = (): boolean => {\r\n  return !!auth.currentUser;\r\n};\r\n\r\n/**\r\n * Get current Firebase user\r\n */\r\nexport const getCurrentUser = (): FirebaseUser | null => {\r\n  return auth.currentUser;\r\n};\r\n\r\n/**\r\n * Sign up new user (alias for register)\r\n */\r\nexport const signUp = register;\r\n\r\n/**\r\n * Update user quiz stats after completing a quiz\r\n */\r\nexport const updateUserStats = async (\r\n  userId: string, \r\n  quizData: {\r\n    score: number;\r\n    totalQuestions: number;\r\n    correctAnswers: number;\r\n    timeSpent: number;\r\n    difficulty: string;\r\n  }\r\n): Promise",
          "index": 6241
        },
        {
          "kind": "StringLiteral",
          "text": "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p",
          "index": 5256
        },
        {
          "kind": "StringLiteral",
          "text": "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p",
          "index": 5708
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t profile",
          "index": 6084
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y",
          "index": 6787
        },
        {
          "kind": "StringLiteral",
          "text": "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c",
          "index": 6876
        },
        {
          "kind": "StringLiteral",
          "text": "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng",
          "index": 6957
        },
        {
          "kind": "StringLiteral",
          "text": "M·∫≠t kh·∫©u qu√° y·∫øu",
          "index": 7032
        },
        {
          "kind": "StringLiteral",
          "text": "Email kh√¥ng h·ª£p l·ªá",
          "index": 7098
        },
        {
          "kind": "StringLiteral",
          "text": "T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a",
          "index": 7166
        },
        {
          "kind": "StringLiteral",
          "text": "Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau",
          "index": 7247
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói k·∫øt n·ªëi m·∫°ng",
          "index": 7345
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh",
          "index": 7393
        }
      ]
    },
    {
      "file": "shared\\components\\ui\\RichTextEditor.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "= ({\r\n  value,\r\n  onChange,\r\n  placeholder = 'Nh·∫≠p n·ªôi dung...',\r\n  readOnly = false,\r\n  height = 300,\r\n  className = ''\r\n}) => {\r\n  // Memoize the change handler to prevent unnecessary re-renders\r\n  const handleChange = useCallback((content: string) => {\r\n    onChange(content);\r\n  }, [onChange]);\r\n\r\n  // Quill modules configuration\r\n  const modules = useMemo(() => ({\r\n    toolbar: !readOnly ? {\r\n      container: [\r\n        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n        [{ 'font': [] }],\r\n        [{ 'size': ['small', false, 'large', 'huge'] }],\r\n        ['bold', 'italic', 'underline', 'strike'],\r\n        [{ 'color': [] }, { 'background': [] }],\r\n        [{ 'script': 'sub' }, { 'script': 'super' }],\r\n        [{ 'list': 'ordered' }, { 'list': 'bullet' }],\r\n        [{ 'indent': '-1' }, { 'indent': '+1' }],\r\n        [{ 'direction': 'rtl' }],\r\n        [{ 'align': [] }],\r\n        ['link', 'image', 'video'],\r\n        ['blockquote', 'code-block'],\r\n        ['clean']\r\n      ]\r\n    } : false,\r\n    clipboard: {\r\n      matchVisual: false,\r\n    }\r\n  }), [readOnly]);\r\n\r\n  // Quill formats\r\n  const formats = [\r\n    'header', 'font', 'size',\r\n    'bold', 'italic', 'underline', 'strike',\r\n    'color', 'background',\r\n    'script',\r\n    'list', 'bullet', 'indent',\r\n    'direction', 'align',\r\n    'link', 'image', 'video',\r\n    'blockquote', 'code-block'\r\n  ];\r\n\r\n  return (",
          "index": 373
        },
        {
          "kind": "StringLiteral",
          "text": "Nh·∫≠p n·ªôi dung...",
          "index": 420
        }
      ]
    },
    {
      "file": "shared\\components\\ui\\Modal.tsx",
      "matches": [
        {
          "kind": "StringLiteral",
          "text": "ƒê√≥ng modal",
          "index": 2185
        }
      ]
    },
    {
      "file": "shared\\components\\layout\\Loading.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": ");\r\n  }\r\n  // Skeleton cho loading danh s√°ch\r\n  return (",
          "index": 722
        }
      ]
    },
    {
      "file": "features\\quiz\\services\\reviewService.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{\r\n    try {\r\n      console.log('Creating review with data:', { reviewData, userId, userName, userAvatar });\r\n      \r\n      const reviewDoc = {\r\n        ...reviewData,\r\n        userId,\r\n        userName,\r\n        userAvatar: userAvatar || null,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        helpful: [],\r\n        reported: []\r\n      };\r\n\r\n      console.log('Review document to be saved:', reviewDoc);\r\n      \r\n      const docRef = await addDoc(collection(db, REVIEWS_COLLECTION), reviewDoc);\r\n      console.log('Review saved successfully with ID:', docRef.id);\r\n      \r\n      // Update quiz with new review stats\r\n      try {\r\n        await this.updateQuizReviewStats(reviewData.quizId);\r\n        console.log('Quiz stats updated successfully');\r\n      } catch (statsError) {\r\n        console.warn('Error updating quiz stats (review still saved):', statsError);\r\n      }\r\n      \r\n      return docRef.id;\r\n    } catch (error) {\r\n      console.error('Error creating review:', error);\r\n      console.error('Error details:', JSON.stringify(error, null, 2));\r\n      throw new Error(`Kh√¥ng th·ªÉ t·∫°o ƒë√°nh gi√°: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  },\r\n\r\n  // Simple get reviews without ordering (to avoid index requirements)\r\n  async getQuizReviewsSimple(quizId: string): Promise",
          "index": 572
        }
      ]
    },
    {
      "file": "features\\quiz\\services\\firebaseAIService.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{\r\n    const { \r\n      content, \r\n      customPrompt, \r\n      numQuestions = 5, \r\n      difficulty = 'mixed', \r\n      language = 'vi' \r\n    } = options;\r\n\r\n    // Ki·ªÉm tra x√°c th·ª±c\r\n    const auth = getAuth();\r\n    if (!auth.currentUser) {\r\n      throw new Error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng AI');\r\n    }\r\n\r\n    try {\r\n      // T·∫°o system prompt\r\n      const systemPrompt = customPrompt || this.getDefaultPrompt(numQuestions, difficulty, language);\r\n      \r\n      // G·ªçi Firebase Function\r\n      const generateQuestions = httpsCallable(this.functions, 'generateQuestions');\r\n      \r\n      const result = await generateQuestions({\r\n        prompt: systemPrompt,\r\n        content: content,\r\n        config: {\r\n          model: config.model || 'gemini-pro',\r\n          temperature: config.temperature || 0.7,\r\n          maxTokens: config.maxTokens || 2000\r\n        }\r\n      });\r\n\r\n      const data = result.data as any;\r\n      \r\n      if (!data.success) {\r\n        throw new Error(data.error || 'AI generation failed');\r\n      }\r\n\r\n      return this.parseQuestionsFromResponse(data.questions);\r\n    } catch (error) {\r\n      console.error('Firebase AI Service Error:', error);\r\n      throw new Error(`Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fallback method using direct Vertex AI REST API\r\n   */\r\n  static async generateQuestionsDirectAPI(\r\n    config: FirebaseAIConfig = {},\r\n    options: QuestionGenerationOptions\r\n  ): Promise",
          "index": 923
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    const { \r\n      content, \r\n      customPrompt, \r\n      numQuestions = 5, \r\n      difficulty = 'mixed', \r\n      language = 'vi' \r\n    } = options;\r\n\r\n    try {\r\n      // S·ª≠ d·ª•ng endpoint c·ªßa Firebase project\r\n      const projectId = 'quiz-app-85db6';\r\n      const apiEndpoint = `https://us-central1-aiplatform.googleapis.com/v1/projects/${projectId}/locations/us-central1/publishers/google/models/gemini-pro:generateContent`;\r\n      \r\n      const systemPrompt = customPrompt || this.getDefaultPrompt(numQuestions, difficulty, language);\r\n      \r\n      // Get auth token from Firebase\r\n      const auth = getAuth();\r\n      const idToken = await auth.currentUser?.getIdToken();\r\n      \r\n      if (!idToken) {\r\n        throw new Error('Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng');\r\n      }\r\n\r\n      const response = await fetch(apiEndpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${idToken}`\r\n        },\r\n        body: JSON.stringify({\r\n          contents: [{\r\n            parts: [{\r\n              text: `${systemPrompt}\\n\\nN·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}`\r\n            }]\r\n          }],\r\n          generationConfig: {\r\n            temperature: config.temperature || 0.7,\r\n            maxOutputTokens: config.maxTokens || 2000,\r\n            topP: 0.8,\r\n            topK: 40\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Vertex AI API Error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;\r\n\r\n      if (!generatedText) {\r\n        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI');\r\n      }\r\n\r\n      return this.parseQuestionsFromText(generatedText);\r\n    } catch (error) {\r\n      console.error('Direct API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * T·∫°o prompt m·∫∑c ƒë·ªãnh cho vi·ªác generate c√¢u h·ªèi\r\n   */\r\n  private static getDefaultPrompt(numQuestions: number, difficulty: string, language: string): string {\r\n    const lang = language === 'vi' ? 'ti·∫øng Vi·ªát' : 'English';\r\n    \r\n    return `\r\nB·∫°n l√† m·ªôt chuy√™n gia t·∫°o c√¢u h·ªèi tr·∫Øc nghi·ªám ch·∫•t l∆∞·ª£ng cao. H√£y t·∫°o ${numQuestions} c√¢u h·ªèi tr·∫Øc nghi·ªám b·∫±ng ${lang} d·ª±a tr√™n n·ªôi dung ƒë∆∞·ª£c cung c·∫•p.\r\n\r\nY√™u c·∫ßu:\r\n- M·ªói c√¢u h·ªèi c√≥ 4 ƒë√°p √°n (A, B, C, D)\r\n- Ch·ªâ c√≥ 1 ƒë√°p √°n ƒë√∫ng\r\n- C√¢u h·ªèi ph·∫£i li√™n quan tr·ª±c ti·∫øp ƒë·∫øn n·ªôi dung\r\n- ƒê·ªô kh√≥: ${difficulty}\r\n- Bao g·ªìm gi·∫£i th√≠ch cho ƒë√°p √°n ƒë√∫ng\r\n- ƒê·∫£m b·∫£o c√¢u h·ªèi c√≥ t√≠nh ph√¢n bi·ªát cao\r\n\r\nTr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng JSON ch√≠nh x√°c nh∆∞ sau:\r\n{\r\n  \"questions\": [\r\n    {\r\n      \"text\": \"C√¢u h·ªèi ·ªü ƒë√¢y\",\r\n      \"answers\": [\r\n        {\"text\": \"ƒê√°p √°n A\", \"isCorrect\": true},\r\n        {\"text\": \"ƒê√°p √°n B\", \"isCorrect\": false},\r\n        {\"text\": \"ƒê√°p √°n C\", \"isCorrect\": false},\r\n        {\"text\": \"ƒê√°p √°n D\", \"isCorrect\": false}\r\n      ],\r\n      \"explanation\": \"Gi·∫£i th√≠ch t·∫°i sao ƒë√°p √°n A ƒë√∫ng\",\r\n      \"points\": 10,\r\n      \"difficulty\": \"${difficulty}\"\r\n    }\r\n  ]\r\n}\r\n\r\nQUAN TR·ªåNG: Ch·ªâ tr·∫£ v·ªÅ JSON thu·∫ßn t√∫y, kh√¥ng th√™m text ho·∫∑c markdown n√†o kh√°c.\r\n`;\r\n  }\r\n\r\n  /**\r\n   * Parse questions t·ª´ Firebase Function response\r\n   */\r\n  private static parseQuestionsFromResponse(questionsData: any[]): Question[] {\r\n    try {\r\n      const questions: Question[] = [];\r\n      \r\n      for (const questionData of questionsData) {\r\n        const question: Question = {\r\n          id: `q_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n          text: questionData.text || '',\r\n          type: 'multiple',\r\n          answers: questionData.answers?.map((answer: any, index: number) => ({\r\n            id: `a_${index + 1}`,\r\n            text: answer.text || '',\r\n            isCorrect: answer.isCorrect === true\r\n          })) || [],\r\n          explanation: questionData.explanation || '',\r\n          points: questionData.points || 10,\r\n          difficulty: questionData.difficulty || 'medium'\r\n        };\r\n\r\n        // Validate question\r\n        if (question.text && question.answers.length >= 2) {\r\n          questions.push(question);\r\n        }\r\n      }\r\n\r\n      return questions;\r\n    } catch (error) {\r\n      console.error('Error parsing questions from response:', error);\r\n      throw new Error('Kh√¥ng th·ªÉ ph√¢n t√≠ch c√¢u h·ªèi t·ª´ AI');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse questions t·ª´ raw text response\r\n   */\r\n  private static parseQuestionsFromText(text: string): Question[] {\r\n    try {\r\n      // Remove markdown code blocks if present\r\n      const cleanText = text.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\r\n      \r\n      // Try to parse JSON\r\n      const parsed = JSON.parse(cleanText);\r\n      const questionsData = parsed.questions || [];\r\n\r\n      return this.parseQuestionsFromResponse(questionsData);\r\n    } catch (error) {\r\n      console.error('Error parsing questions from text:', error);\r\n      throw new Error('Kh√¥ng th·ªÉ ph√¢n t√≠ch c√¢u h·ªèi t·ª´ ph·∫£n h·ªìi AI');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Ki·ªÉm tra availability c·ªßa Firebase AI\r\n   */\r\n  static async checkAvailability(): Promise",
          "index": 2446
        },
        {
          "kind": "StringLiteral",
          "text": "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng AI",
          "index": 1188
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng",
          "index": 3186
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI",
          "index": 4156
        },
        {
          "kind": "StringLiteral",
          "text": "ti·∫øng Vi·ªát",
          "index": 4576
        },
        {
          "kind": "StringLiteral",
          "text": "C√¢u h·ªèi ·ªü ƒë√¢y",
          "index": 5091
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n A",
          "index": 5146
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n B",
          "index": 5196
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n C",
          "index": 5247
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n D",
          "index": 5298
        },
        {
          "kind": "StringLiteral",
          "text": "Gi·∫£i th√≠ch t·∫°i sao ƒë√°p √°n A ƒë√∫ng",
          "index": 5362
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ ph√¢n t√≠ch c√¢u h·ªèi t·ª´ AI",
          "index": 6702
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ ph√¢n t√≠ch c√¢u h·ªèi t·ª´ ph·∫£n h·ªìi AI",
          "index": 7339
        }
      ]
    },
    {
      "file": "features\\quiz\\services\\fileProcessingService.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{\r\n    try {\r\n      const worker = await this.initializeWorker();\r\n      \r\n      // ƒê·ªçc file th√†nh blob URL ƒë·ªÉ OCR\r\n      const imageUrl = URL.createObjectURL(file);\r\n      \r\n      const { data: { text, confidence } } = await worker.recognize(imageUrl);\r\n      \r\n      // Clean up\r\n      URL.revokeObjectURL(imageUrl);\r\n      \r\n      return {\r\n        extractedText: text,\r\n        success: true,\r\n        metadata: { confidence, fileSize: file.size }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        extractedText: '',\r\n        success: false,\r\n        error: `OCR Error: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n\r\n  static async terminateWorker() {\r\n    if (this.worker) {\r\n      await this.worker.terminate();\r\n      this.worker = null;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * PDF Service - Tr√≠ch xu·∫•t text t·ª´ PDF\r\n */\r\nexport class PDFService {\r\n  static async extractTextFromPDF(file: File): Promise",
          "index": 830
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    try {\r\n      // ƒê·ªçc file PDF\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      \r\n      // Load PDF document\r\n      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\r\n      \r\n      let fullText = '';\r\n      const totalPages = pdf.numPages;\r\n      \r\n      // Tr√≠ch xu·∫•t text t·ª´ t·∫•t c·∫£ c√°c trang\r\n      for (let i = 1; i",
          "index": 1795
        },
        {
          "kind": "JSXText",
          "text": "item.str)\r\n          .join(' ');\r\n        \r\n        fullText += `\\n--- Trang ${i} ---\\n${pageText}\\n`;\r\n      }\r\n      \r\n      return {\r\n        extractedText: fullText.trim(),\r\n        success: true,\r\n        metadata: { \r\n          totalPages, \r\n          fileSize: file.size,\r\n          fileName: file.name \r\n        }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        extractedText: '',\r\n        success: false,\r\n        error: `PDF Error: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Word Document Service - Tr√≠ch xu·∫•t text t·ª´ .docx\r\n */\r\nexport class WordService {\r\n  static async extractTextFromWord(file: File): Promise",
          "index": 2360
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    try {\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      \r\n      // S·ª≠ d·ª•ng mammoth ƒë·ªÉ ƒë·ªçc .docx\r\n      const result = await mammoth.extractRawText({ arrayBuffer });\r\n      \r\n      return {\r\n        extractedText: result.value,\r\n        success: true,\r\n        metadata: {\r\n          fileSize: file.size,\r\n          fileName: file.name,\r\n          messages: result.messages // Warnings t·ª´ mammoth\r\n        }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        extractedText: '',\r\n        success: false,\r\n        error: `Word Error: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Excel/Spreadsheet Service - Tr√≠ch xu·∫•t data t·ª´ Excel/CSV\r\n */\r\nexport class SpreadsheetService {\r\n  static async extractTextFromSpreadsheet(file: File): Promise",
          "index": 3070
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    try {\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      const workbook = XLSX.read(arrayBuffer, { type: 'array' });\r\n      \r\n      let fullText = '';\r\n      \r\n      // ƒê·ªçc t·∫•t c·∫£ worksheets\r\n      workbook.SheetNames.forEach(sheetName => {\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        const csvText = XLSX.utils.sheet_to_csv(worksheet);\r\n        fullText += `\\n=== Sheet: ${sheetName} ===\\n${csvText}\\n`;\r\n      });\r\n      \r\n      return {\r\n        extractedText: fullText.trim(),\r\n        success: true,\r\n        metadata: {\r\n          fileSize: file.size,\r\n          fileName: file.name,\r\n          sheetCount: workbook.SheetNames.length,\r\n          sheetNames: workbook.SheetNames\r\n        }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        extractedText: '',\r\n        success: false,\r\n        error: `Spreadsheet Error: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Text File Service - ƒê·ªçc plain text files\r\n */\r\nexport class TextService {\r\n  static async extractTextFromTextFile(file: File): Promise",
          "index": 3905
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    try {\r\n      const text = await file.text();\r\n      \r\n      return {\r\n        extractedText: text,\r\n        success: true,\r\n        metadata: {\r\n          fileSize: file.size,\r\n          fileName: file.name\r\n        }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        extractedText: '',\r\n        success: false,\r\n        error: `Text Error: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Main File Processor - Router ƒë·ªÉ x·ª≠ l√Ω c√°c lo·∫°i file kh√°c nhau\r\n */\r\nexport class FileProcessor {\r\n  static getSupportedTypes() {\r\n    return {\r\n      images: ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'],\r\n      documents: ['.pdf', '.doc', '.docx', '.txt', '.rtf'],\r\n      spreadsheets: ['.csv', '.xlsx', '.xls']\r\n    };\r\n  }\r\n\r\n  static isFileSupported(fileName: string): boolean {\r\n    const lowercaseName = fileName.toLowerCase();\r\n    const supportedTypes = this.getSupportedTypes();\r\n    \r\n    return Object.values(supportedTypes)\r\n      .flat()\r\n      .some(ext => lowercaseName.endsWith(ext));\r\n  }\r\n\r\n  static async processFile(file: File): Promise",
          "index": 5028
        },
        {
          "kind": "StringLiteral",
          "text": "File qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 50MB.",
          "index": 6462
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.",
          "index": 7393
        }
      ]
    },
    {
      "file": "features\\quiz\\services\\aiService.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{\r\n    const { content, customPrompt, numQuestions = 5, difficulty = 'mixed', language = 'vi' } = options;\r\n    const systemPrompt = customPrompt || this.getDefaultPrompt(numQuestions, difficulty, language);\r\n    // Use hardcoded API key if not provided\r\n    const apiKey = config.apiKey || DEFAULT_OPENAI_API_KEY;\r\n    try {\r\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${apiKey}`\r\n        },\r\n        body: JSON.stringify({\r\n          model: config.model || 'gpt-3.5-turbo',\r\n          messages: [\r\n            { role: 'system', content: systemPrompt },\r\n            { role: 'user', content: `N·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}` }\r\n          ],\r\n          temperature: 0.7,\r\n          max_tokens: 2000\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`OpenAI API Error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const generatedText = data.choices[0]?.message?.content;\r\n\r\n      return this.parseQuestionsFromText(generatedText);\r\n    } catch (error) {\r\n      console.error('OpenAI Service Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public static getDefaultPrompt(numQuestions: number, difficulty: string, language: string): string {\r\n    const lang = language === 'vi' ? 'ti·∫øng Vi·ªát' : 'English';\r\n    \r\n    return `\r\nB·∫°n l√† m·ªôt chuy√™n gia t·∫°o c√¢u h·ªèi tr·∫Øc nghi·ªám ch·∫•t l∆∞·ª£ng cao. H√£y t·∫°o ${numQuestions} c√¢u h·ªèi tr·∫Øc nghi·ªám b·∫±ng ${lang} d·ª±a tr√™n n·ªôi dung ƒë∆∞·ª£c cung c·∫•p.\r\n\r\nY√™u c·∫ßu:\r\n- M·ªói c√¢u h·ªèi c√≥ 4 ƒë√°p √°n (A, B, C, D)\r\n- Ch·ªâ c√≥ 1 ƒë√°p √°n ƒë√∫ng\r\n- C√¢u h·ªèi ph·∫£i li√™n quan tr·ª±c ti·∫øp ƒë·∫øn n·ªôi dung\r\n- ƒê·ªô kh√≥: ${difficulty}\r\n- Bao g·ªìm gi·∫£i th√≠ch cho ƒë√°p √°n ƒë√∫ng\r\n- ƒê·∫£m b·∫£o c√¢u h·ªèi c√≥ t√≠nh ph√¢n bi·ªát cao\r\n\r\nTr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng JSON ch√≠nh x√°c nh∆∞ sau:\r\n{\r\n  \"questions\": [\r\n    {\r\n      \"text\": \"C√¢u h·ªèi ·ªü ƒë√¢y\",\r\n      \"answers\": [\r\n        {\"text\": \"ƒê√°p √°n A\", \"isCorrect\": true},\r\n        {\"text\": \"ƒê√°p √°n B\", \"isCorrect\": false},\r\n        {\"text\": \"ƒê√°p √°n C\", \"isCorrect\": false},\r\n        {\"text\": \"ƒê√°p √°n D\", \"isCorrect\": false}\r\n      ],\r\n      \"explanation\": \"Gi·∫£i th√≠ch t·∫°i sao ƒë√°p √°n A ƒë√∫ng\",\r\n      \"points\": 10,\r\n      \"difficulty\": \"medium\"\r\n    }\r\n  ]\r\n}\r\n\r\nCH·ªà tr·∫£ v·ªÅ JSON, kh√¥ng c√≥ text kh√°c.`;\r\n  }\r\n\r\n  static parseQuestionsFromText(text: string): Question[] {\r\n    try {\r\n      // Clean up the response text\r\n      const cleanText = text.replace(/```json|```/g, '').trim();\r\n      const parsed = JSON.parse(cleanText);\r\n      \r\n      if (!parsed.questions || !Array.isArray(parsed.questions)) {\r\n        throw new Error('Invalid JSON structure');\r\n      }\r\n\r\n      return parsed.questions.map((q: any, index: number) => ({\r\n        id: `ai-${Date.now()}-${index}`,\r\n        text: q.text,\r\n        type: 'multiple' as const,\r\n        answers: q.answers.map((a: any, idx: number) => ({\r\n          id: String.fromCharCode(97 + idx), // a, b, c, d\r\n          text: a.text,\r\n          isCorrect: a.isCorrect\r\n        })),\r\n        explanation: q.explanation,\r\n        points: q.points || 10\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to parse AI response:', error);\r\n      console.log('Raw response:', text);\r\n      \r\n      // Fallback: return empty array with error info\r\n      throw new Error('Kh√¥ng th·ªÉ ph√¢n t√≠ch c√¢u tr·∫£ l·ªùi t·ª´ AI. Vui l√≤ng th·ª≠ l·∫°i.');\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Claude Service (Anthropic)\r\n */\r\nexport class ClaudeService {\r\n  static async generateQuestions(\r\n    config: AIConfig,\r\n    options: QuestionGenerationOptions\r\n  ): Promise",
          "index": 1021
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    const { content, customPrompt, numQuestions = 5, difficulty = 'mixed', language = 'vi' } = options;\r\n\r\n    const systemPrompt = customPrompt || OpenAIService.getDefaultPrompt(numQuestions, difficulty, language);\r\n\r\n    try {\r\n      const response = await fetch('https://api.anthropic.com/v1/messages', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'x-api-key': config.apiKey,\r\n          'anthropic-version': '2023-06-01'\r\n        },\r\n        body: JSON.stringify({\r\n          model: config.model || 'claude-3-sonnet-20240229',\r\n          max_tokens: 2000,\r\n          system: systemPrompt,\r\n          messages: [\r\n            { role: 'user', content: `N·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}` }\r\n          ]\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Claude API Error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const generatedText = data.content[0]?.text;\r\n\r\n      return OpenAIService.parseQuestionsFromText(generatedText);\r\n    } catch (error) {\r\n      console.error('Claude Service Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static getDefaultPrompt(numQuestions: number, difficulty: string, language: string): string {\r\n    // Same as OpenAI for consistency\r\n    return OpenAIService.getDefaultPrompt(numQuestions, difficulty, language);\r\n  }\r\n}\r\n\r\n/**\r\n * Gemini Service (Google)\r\n */\r\nexport class GeminiService {\r\n  static async generateQuestions(\r\n    config: AIConfig,\r\n    options: QuestionGenerationOptions\r\n  ): Promise",
          "index": 4690
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    const { content, customPrompt, numQuestions = 5, difficulty = 'mixed', language = 'vi' } = options;\r\n\r\n    const systemPrompt = customPrompt || OpenAIService.getDefaultPrompt(numQuestions, difficulty, language);\r\n\r\n    try {\r\n      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${config.model || 'gemini-pro'}:generateContent?key=${config.apiKey}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          contents: [{\r\n            parts: [{\r\n              text: `${systemPrompt}\\n\\nN·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}`\r\n            }]\r\n          }],\r\n          generationConfig: {\r\n            temperature: 0.7,\r\n            maxOutputTokens: 2000\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Gemini API Error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const generatedText = data.candidates[0]?.content?.parts[0]?.text;\r\n\r\n      return OpenAIService.parseQuestionsFromText(generatedText);\r\n    } catch (error) {\r\n      console.error('Gemini Service Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static getDefaultPrompt(numQuestions: number, difficulty: string, language: string): string {\r\n    return OpenAIService.getDefaultPrompt(numQuestions, difficulty, language);\r\n  }\r\n}\r\n\r\n/**\r\n * Local AI Service (for local models like Ollama)\r\n */\r\nexport class LocalAIService {\r\n  static async generateQuestions(\r\n    config: AIConfig,\r\n    options: QuestionGenerationOptions\r\n  ): Promise",
          "index": 6307
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    const { content, customPrompt, numQuestions = 5, difficulty = 'mixed', language = 'vi' } = options;\r\n\r\n    const systemPrompt = customPrompt || OpenAIService.getDefaultPrompt(numQuestions, difficulty, language);\r\n    const baseURL = config.baseURL || 'http://localhost:11434'; // Default Ollama port\r\n\r\n    try {\r\n      const response = await fetch(`${baseURL}/api/generate`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          model: config.model || 'llama2',\r\n          prompt: `${systemPrompt}\\n\\nN·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}`,\r\n          stream: false,\r\n          options: {\r\n            temperature: 0.7,\r\n            num_predict: 2000\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Local AI Error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const generatedText = data.response;\r\n\r\n      return OpenAIService.parseQuestionsFromText(generatedText);\r\n    } catch (error) {\r\n      console.error('Local AI Service Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static getDefaultPrompt(numQuestions: number, difficulty: string, language: string): string {\r\n    return OpenAIService.getDefaultPrompt(numQuestions, difficulty, language);\r\n  }\r\n}\r\n\r\n/**\r\n * Main AI Service - Router cho c√°c providers\r\n */\r\nexport class AIService {\r\n  static async generateQuestions(\r\n    config: AIConfig,\r\n    options: QuestionGenerationOptions\r\n  ): Promise",
          "index": 7962
        },
        {
          "kind": "StringLiteral",
          "text": "ti·∫øng Vi·ªát",
          "index": 2470
        },
        {
          "kind": "StringLiteral",
          "text": "C√¢u h·ªèi ·ªü ƒë√¢y",
          "index": 2985
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n A",
          "index": 3040
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n B",
          "index": 3090
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n C",
          "index": 3141
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n D",
          "index": 3192
        },
        {
          "kind": "StringLiteral",
          "text": "Gi·∫£i th√≠ch t·∫°i sao ƒë√°p √°n A ƒë√∫ng",
          "index": 3256
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ ph√¢n t√≠ch c√¢u tr·∫£ l·ªùi t·ª´ AI. Vui l√≤ng th·ª≠ l·∫°i.",
          "index": 4419
        }
      ]
    },
    {
      "file": "features\\quiz\\services\\aiQuestionService.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{\r\n    switch (providerId) {\r\n      case 'openai':\r\n        return {\r\n          model: 'gpt-3.5-turbo',\r\n          temperature: 0.7,\r\n          maxQuestions: 10\r\n        };\r\n      case 'claude':\r\n        return {\r\n          model: 'claude-3-sonnet',\r\n          temperature: 0.6,\r\n          maxQuestions: 10\r\n        };\r\n      case 'gemini':\r\n        return {\r\n          model: 'gemini-pro',\r\n          temperature: 0.8,\r\n          maxQuestions: 8\r\n        };\r\n      case 'ollama':\r\n        return {\r\n          model: 'llama2',\r\n          temperature: 0.7,\r\n          maxQuestions: 6\r\n        };\r\n      default:\r\n        return {};\r\n    }\r\n  }\r\n\r\n  // Generate system prompt based on config\r\n  private generateSystemPrompt(config: AIConfig): string {\r\n    const { difficulty, questionTypes, language, maxQuestions } = config;\r\n    \r\n    const difficultyText = {\r\n      easy: 'd·ªÖ (h·ªçc sinh trung h·ªçc c∆° s·ªü)',\r\n      medium: 'trung b√¨nh (h·ªçc sinh trung h·ªçc ph·ªï th√¥ng)',\r\n      hard: 'kh√≥ (sinh vi√™n ƒë·∫°i h·ªçc)',\r\n      mixed: 'ƒëa d·∫°ng t·ª´ d·ªÖ ƒë·∫øn kh√≥'\r\n    };\r\n\r\n    const typeText = {\r\n      multiple: 'tr·∫Øc nghi·ªám nhi·ªÅu l·ª±a ch·ªçn (4 ƒë√°p √°n, 1 ƒë√∫ng)',\r\n      boolean: 'ƒë√∫ng/sai',\r\n      short_answer: 'tr·∫£ l·ªùi ng·∫Øn'\r\n    };\r\n\r\n    const selectedTypes = questionTypes.map(t => typeText[t]).join(', ');\r\n    const lang = language === 'vi' ? 'ti·∫øng Vi·ªát' : 'English';\r\n\r\n    return `B·∫°n l√† m·ªôt chuy√™n gia t·∫°o c√¢u h·ªèi tr·∫Øc nghi·ªám chuy√™n nghi·ªáp. \r\n\r\nNHI·ªÜM V·ª§: T·∫°o ${maxQuestions} c√¢u h·ªèi ch·∫•t l∆∞·ª£ng cao t·ª´ n·ªôi dung ƒë∆∞·ª£c cung c·∫•p.\r\n\r\nY√äU C·∫¶U:\r\n- ƒê·ªô kh√≥: ${difficultyText[difficulty]}\r\n- Lo·∫°i c√¢u h·ªèi: ${selectedTypes}\r\n- Ng√¥n ng·ªØ: ${lang}\r\n- C√¢u h·ªèi ph·∫£i ch√≠nh x√°c, r√µ r√†ng v√† c√≥ gi√° tr·ªã gi√°o d·ª•c\r\n- ƒê√°p √°n ph·∫£i ch√≠nh x√°c 100%\r\n- Tr√°nh c√¢u h·ªèi qu√° d·ªÖ ho·∫∑c m∆° h·ªì\r\n\r\nFORMAT TR·∫¢I L·ªúI (JSON):\r\n{\r\n  \"questions\": [\r\n    {\r\n      \"id\": \"unique_id\",\r\n      \"text\": \"N·ªôi dung c√¢u h·ªèi\",\r\n      \"type\": \"multiple|boolean|short_answer\",\r\n      \"answers\": [\r\n        {\"id\": \"ans1\", \"text\": \"ƒê√°p √°n A\", \"isCorrect\": true},\r\n        {\"id\": \"ans2\", \"text\": \"ƒê√°p √°n B\", \"isCorrect\": false},\r\n        {\"id\": \"ans3\", \"text\": \"ƒê√°p √°n C\", \"isCorrect\": false},\r\n        {\"id\": \"ans4\", \"text\": \"ƒê√°p √°n D\", \"isCorrect\": false}\r\n      ],\r\n      \"points\": 1,\r\n      \"explanation\": \"Gi·∫£i th√≠ch t·∫°i sao ƒë√°p √°n n√†y ƒë√∫ng\"\r\n    }\r\n  ]\r\n}\r\n\r\nCH·ªà TR·∫¢ V·ªÄ JSON, KH√îNG TH√äM TEXT KH√ÅC.`;\r\n  }\r\n\r\n  // Generate questions using selected AI provider\r\n  async generateQuestions(request: GenerateQuestionsRequest): Promise",
          "index": 2419
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    if (!config.apiKey) {\r\n      throw new Error('OpenAI API key is required');\r\n    }\r\n\r\n    const systemPrompt = customPrompt || this.generateSystemPrompt(config);\r\n    const userPrompt = `N·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}`;\r\n\r\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${config.apiKey}`\r\n      },\r\n      body: JSON.stringify({\r\n        model: config.model,\r\n        messages: [\r\n          { role: 'system', content: systemPrompt },\r\n          { role: 'user', content: userPrompt }\r\n        ],\r\n        temperature: config.temperature,\r\n        max_tokens: 4000\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      throw new Error(`OpenAI API error: ${error}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    const questionsJson = JSON.parse(data.choices[0].message.content);\r\n    \r\n    return {\r\n      questions: this.formatQuestions(questionsJson.questions),\r\n      usage: data.usage\r\n    };\r\n  }\r\n\r\n  private async generateWithGemini(content: string, config: AIConfig, customPrompt?: string): Promise",
          "index": 5897
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    if (!config.apiKey) {\r\n      throw new Error('Gemini API key is required');\r\n    }\r\n\r\n    const prompt = `${customPrompt || this.generateSystemPrompt(config)}\\n\\nN·ªôi dung: ${content}`;\r\n\r\n    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${config.model}:generateContent?key=${config.apiKey}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        contents: [{ parts: [{ text: prompt }] }],\r\n        generationConfig: {\r\n          temperature: config.temperature,\r\n          maxOutputTokens: 4000\r\n        }\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      throw new Error(`Gemini API error: ${error}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    const questionsJson = JSON.parse(data.candidates[0].content.parts[0].text);\r\n    \r\n    return {\r\n      questions: this.formatQuestions(questionsJson.questions)\r\n    };\r\n  }\r\n\r\n  private async generateWithClaude(content: string, config: AIConfig, customPrompt?: string): Promise",
          "index": 7149
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    if (!config.apiKey) {\r\n      throw new Error('Claude API key is required');\r\n    }\r\n\r\n    const systemPrompt = customPrompt || this.generateSystemPrompt(config);\r\n\r\n    const response = await fetch('https://api.anthropic.com/v1/messages', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'x-api-key': config.apiKey,\r\n        'anthropic-version': '2023-06-01'\r\n      },\r\n      body: JSON.stringify({\r\n        model: config.model,\r\n        max_tokens: 4000,\r\n        temperature: config.temperature,\r\n        system: systemPrompt,\r\n        messages: [\r\n          { role: 'user', content: `N·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}` }\r\n        ]\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      throw new Error(`Claude API error: ${error}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    const questionsJson = JSON.parse(data.content[0].text);\r\n    \r\n    return {\r\n      questions: this.formatQuestions(questionsJson.questions),\r\n      usage: data.usage\r\n    };\r\n  }\r\n\r\n  private async generateWithOllama(content: string, config: AIConfig, customPrompt?: string): Promise",
          "index": 8289
        },
        {
          "kind": "JSXText",
          "text": "{\r\n    const prompt = `${customPrompt || this.generateSystemPrompt(config)}\\n\\nN·ªôi dung: ${content}`;\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:11434/api/generate', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          model: config.model,\r\n          prompt: prompt,\r\n          stream: false,\r\n          options: {\r\n            temperature: config.temperature,\r\n            num_predict: 4000\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Ollama not running or model not available. Please install Ollama and pull the ${config.model} model.`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const questionsJson = JSON.parse(data.response);\r\n      \r\n      return {\r\n        questions: this.formatQuestions(questionsJson.questions)\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`Ollama error: ${error instanceof Error ? error.message : 'Unknown error'}. Make sure Ollama is running on localhost:11434`);\r\n    }\r\n  }\r\n\r\n  private formatQuestions(questions: any[]): Question[] {\r\n    return questions.map((q: any) => ({\r\n      id: q.id || `q_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      text: q.text || '',\r\n      type: q.type || 'multiple',\r\n      answers: q.answers || [],\r\n      points: q.points || 1,\r\n      correctAnswer: q.correctAnswer || '',\r\n      acceptedAnswers: q.acceptedAnswers || [],\r\n      explanation: q.explanation || ''\r\n    }));\r\n  }\r\n\r\n  // Test AI connection\r\n  async testConnection(config: AIConfig): Promise",
          "index": 9494
        },
        {
          "kind": "StringLiteral",
          "text": "GPT-4 v√† GPT-3.5 t·ª´ OpenAI - Ch·∫•t l∆∞·ª£ng cao, ƒëa d·∫°ng c√¢u h·ªèi",
          "index": 1329
        },
        {
          "kind": "StringLiteral",
          "text": "Claude 3 t·ª´ Anthropic - T∆∞ duy logic t·ªët, an to√†n",
          "index": 1590
        },
        {
          "kind": "StringLiteral",
          "text": "Gemini Pro t·ª´ Google - Hi·ªÉu ng·ªØ c·∫£nh t·ªët, mi·ªÖn ph√≠ h·∫°n ch·∫ø",
          "index": 1848
        },
        {
          "kind": "StringLiteral",
          "text": "Ch·∫°y local v·ªõi Llama, Mistral, CodeLlama - Ho√†n to√†n mi·ªÖn ph√≠",
          "index": 2096
        },
        {
          "kind": "StringLiteral",
          "text": "d·ªÖ (h·ªçc sinh trung h·ªçc c∆° s·ªü)",
          "index": 3295
        },
        {
          "kind": "StringLiteral",
          "text": "trung b√¨nh (h·ªçc sinh trung h·ªçc ph·ªï th√¥ng)",
          "index": 3343
        },
        {
          "kind": "StringLiteral",
          "text": "kh√≥ (sinh vi√™n ƒë·∫°i h·ªçc)",
          "index": 3401
        },
        {
          "kind": "StringLiteral",
          "text": "ƒëa d·∫°ng t·ª´ d·ªÖ ƒë·∫øn kh√≥",
          "index": 3442
        },
        {
          "kind": "StringLiteral",
          "text": "tr·∫Øc nghi·ªám nhi·ªÅu l·ª±a ch·ªçn (4 ƒë√°p √°n, 1 ƒë√∫ng)",
          "index": 3517
        },
        {
          "kind": "StringLiteral",
          "text": "ƒë√∫ng/sai",
          "index": 3582
        },
        {
          "kind": "StringLiteral",
          "text": "tr·∫£ l·ªùi ng·∫Øn",
          "index": 3615
        },
        {
          "kind": "StringLiteral",
          "text": "ti·∫øng Vi·ªát",
          "index": 3753
        },
        {
          "kind": "StringLiteral",
          "text": "N·ªôi dung c√¢u h·ªèi",
          "index": 4266
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n A",
          "index": 4386
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n B",
          "index": 4450
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n C",
          "index": 4515
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n D",
          "index": 4580
        },
        {
          "kind": "StringLiteral",
          "text": "Gi·∫£i th√≠ch t·∫°i sao ƒë√°p √°n n√†y ƒë√∫ng",
          "index": 4664
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\ResultPage.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": ";\r\n  isTimeUp?: boolean;\r\n  timeSpent?: number;\r\n  quizId?: string;\r\n  tracked?: boolean; // Add this to prevent duplicate tracking\r\n}\r\n\r\ninterface LeaderboardEntry {\r\n  id: string;\r\n  userId: string;\r\n  userName: string;\r\n  userEmail: string;\r\n  score: number;\r\n  correctAnswers: number;\r\n  totalQuestions: number;\r\n  timeSpent: number;\r\n  completedAt: Date;\r\n}\r\n\r\n// **TH√äM M·ªöI**: Confetti animation component\r\nconst Confetti: React.FC = () => {\r\n  return (",
          "index": 713
        },
        {
          "kind": "JSXText",
          "text": ");\r\n};\r\n\r\n// **TH√äM M·ªöI**: Score circle component\r\nconst ScoreCircle: React.FC",
          "index": 1856
        },
        {
          "kind": "JSXText",
          "text": ");\r\n};\r\n\r\n// Helper: format seconds to mm:ss\r\nconst formatTime = (seconds: number) => {\r\n  const m = Math.floor(seconds / 60);\r\n  const s = seconds % 60;\r\n  return `${m}:${s.toString().padStart(2, '0')}`;\r\n};\r\n\r\n// Helper √©p ki·ªÉu an to√†n cho s·ªë\r\nconst safeNumber = (val: any, fallback = 0) => {\r\n  const n = Number(val);\r\n  return isNaN(n) ? fallback : n;\r\n};\r\n\r\nexport const ResultPage: React.FC = () => {\r\n  const { attemptId } = useParams",
          "index": 4034
        },
        {
          "kind": "JSXText",
          "text": "(null);\r\n  const [loadingStats, setLoadingStats] = useState(true);\r\n\r\n  useEffect(() => {\r\n    console.log('üîç ResultPage useEffect - attemptId:', attemptId, 'location.state:', location.state);\r\n    \r\n    if (location.state) {\r\n      // C√≥ state t·ª´ navigation - s·ª≠ d·ª•ng ngay\r\n      const resultData = location.state as ResultState;\r\n      console.log('‚úÖ Using state from navigation:', resultData);\r\n      setResult(resultData);\r\n      setQuizId(resultData.quizId || attemptId || null);\r\n    } else if (attemptId) {\r\n      // Kh√¥ng c√≥ state, c·∫ßn fetch t·ª´ Firestore\r\n      console.log('üì° Fetching result from Firestore for attemptId:', attemptId);\r\n      getQuizResultById(attemptId).then((res: any) => {\r\n        if (res) {\r\n          console.log('‚úÖ Fetched result from Firestore:', res);\r\n          const resultData = res as ResultState;\r\n          setResult(resultData);\r\n          setQuizId(resultData.quizId || null);\r\n        } else {\r\n          console.error('‚ùå No result found for attemptId:', attemptId);\r\n          toast.error('Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ quiz!');\r\n          navigate('/quiz-list');\r\n        }\r\n      }).catch(error => {\r\n        console.error('‚ùå Error fetching result:', error);\r\n        toast.error('Kh√¥ng th·ªÉ t·∫£i k·∫øt qu·∫£ quiz!');\r\n        navigate('/quiz-list');\r\n      });\r\n    } else {\r\n      console.error('‚ùå No attemptId or state provided');\r\n      navigate('/quiz-list');\r\n    }\r\n  }, [attemptId, location.state, navigate]);\r\n\r\n  useEffect(() => {\r\n    if (!quizId) return;\r\n    \r\n    console.log('üîç Looking for quiz with ID:', quizId);\r\n    const foundQuiz = quizzes.find(q => q.id === quizId);\r\n    \r\n    if (foundQuiz) {\r\n      console.log('‚úÖ Found quiz in store:', foundQuiz.title);\r\n      setQuiz(foundQuiz);\r\n    } else {\r\n      console.log('üì° Quiz not in store, fetching from Firestore...');\r\n      // N·∫øu kh√¥ng c√≥ trong store, fetch t·ª´ Firestore\r\n      getQuizById(quizId).then(qz => {\r\n        if (qz) {\r\n          console.log('‚úÖ Fetched quiz from Firestore:', qz.title);\r\n          setQuiz(qz);\r\n        } else {\r\n          console.error('‚ùå Quiz not found:', quizId);\r\n          toast.error('Kh√¥ng t√¨m th·∫•y quiz!');\r\n          navigate('/quiz-list');\r\n        }\r\n      }).catch(error => {\r\n        console.error('‚ùå Error fetching quiz:', error);\r\n        toast.error('Kh√¥ng th·ªÉ t·∫£i quiz!');\r\n        navigate('/quiz-list');\r\n      });\r\n    }\r\n  }, [quizId, quizzes, navigate]);\r\n\r\n  // Track completion when result and quiz are both available\r\n  useEffect(() => {\r\n    if (result && quiz && user && !result.tracked) {\r\n      console.log('üìä Tracking quiz completion for user:', user.uid);\r\n      const score = safeNumber(result.correct, 0);\r\n      const total = safeNumber(result.total, quiz.questions.length);\r\n      \r\n      quizStatsService.trackCompletion(quiz.id, user.uid, score, total);\r\n      \r\n      // Mark as tracked to prevent duplicate tracking\r\n      setResult(prev => prev ? { ...prev, tracked: true } : null);\r\n    }\r\n  }, [result, quiz, user]);\r\n\r\n  useEffect(() => {\r\n    const fetchLeaderboard = async () => {\r\n      if (!quizId) return;\r\n      \r\n      try {\r\n        setLoadingStats(true);\r\n        console.log('üìä Fetching leaderboard for quiz:', quizId);\r\n        const results = await getQuizResults(quizId);\r\n        console.log('üìä Raw results from Firebase:', results);\r\n        \r\n        // Transform results to leaderboard entries with user info\r\n        const leaderboardData: LeaderboardEntry[] = results.map((result: any) => {\r\n          console.log('üîç Processing result:', result);\r\n          return {\r\n            id: result.id,\r\n            userId: result.userId,\r\n            userName: result.userName || result.userEmail?.split('@')[0] || 'Anonymous',\r\n            userEmail: result.userEmail || '',\r\n            score: result.score,\r\n            correctAnswers: result.correctAnswers,\r\n            totalQuestions: result.totalQuestions,\r\n            timeSpent: result.timeSpent || 0,\r\n            completedAt: result.completedAt?.toDate?.() || new Date(result.completedAt)\r\n          };\r\n        });\r\n\r\n        console.log('üìä Leaderboard data processed:', leaderboardData);\r\n\r\n        // Sort by score (descending) then by time (ascending) for same scores\r\n        const sortedLeaderboard = leaderboardData.sort((a, b) => {\r\n          if (a.score !== b.score) {\r\n            return b.score - a.score; // Higher score first\r\n          }\r\n          return a.timeSpent - b.timeSpent; // Faster time first if same score\r\n        });\r\n\r\n        console.log('üìä Sorted leaderboard:', sortedLeaderboard);\r\n        setLeaderboard(sortedLeaderboard.slice(0, 10)); // Top 10\r\n\r\n        // Find current user's rank\r\n        if (user) {\r\n          const userResultIndex = sortedLeaderboard.findIndex(r => r.userId === user.uid);\r\n          setUserRank(userResultIndex >= 0 ? userResultIndex + 1 : null);\r\n          console.log('üë§ User rank:', userResultIndex >= 0 ? userResultIndex + 1 : 'Not found');\r\n        }\r\n\r\n        console.log('üìä Leaderboard loaded:', sortedLeaderboard.length, 'entries');\r\n      } catch (error) {\r\n        console.error('‚ùå Failed to fetch leaderboard:', error);\r\n        toast.error('Kh√¥ng th·ªÉ t·∫£i b·∫£ng x·∫øp h·∫°ng!');\r\n      } finally {\r\n        setLoadingStats(false);\r\n      }\r\n    };\r\n\r\n    fetchLeaderboard();\r\n  }, [quizId, user]);\r\n\r\n  if (!result || !quiz) {\r\n    return (",
          "index": 5126
        },
        {
          "kind": "JSXText",
          "text": ");\r\n  }\r\n\r\n  // T√≠nh to√°n ƒëi·ªÉm s·ªë, ki·ªÉm tra h·ª£p l·ªá\r\n  const correct = safeNumber(result.correct);\r\n  const total = safeNumber(result.total);\r\n  const percentage = total > 0 ? Math.round((correct / total) * 100) : 0;\r\n  const isExcellent = percentage >= 80;\r\n\r\n  return (",
          "index": 10942
        },
        {
          "kind": "JSXText",
          "text": "{/* K·∫øt qu·∫£ t·ªïng quan */}",
          "index": 11396
        },
        {
          "kind": "JSXText",
          "text": "{/* Hi·ªÉn th·ªã th·ªùi gian l√†m b√†i */}\r\n              {typeof result.timeSpent === 'number' && (",
          "index": 12682
        },
        {
          "kind": "JSXText",
          "text": "{/* **TH√äM M·ªöI**: Stats Grid */}",
          "index": 13078
        },
        {
          "kind": "JSXText",
          "text": "{/* **TH√äM M·ªöI**: Performance Analysis */}",
          "index": 13971
        },
        {
          "kind": "JSXText",
          "text": "{/* **TH√äM M·ªöI**: Review Answers Section */}",
          "index": 15769
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ quiz!",
          "index": 6163
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i k·∫øt qu·∫£ quiz!",
          "index": 6349
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t√¨m th·∫•y quiz!",
          "index": 7259
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i quiz!",
          "index": 7435
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i b·∫£ng x·∫øp h·∫°ng!",
          "index": 10306
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\RealQuizListPage.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "ƒêang t·∫£i danh s√°ch quiz th·ª±c t·∫ø...",
          "index": 1216
        },
        {
          "kind": "JSXText",
          "text": "Quay l·∫°i Admin",
          "index": 1684
        },
        {
          "kind": "JSXText",
          "text": "üìö Danh S√°ch Quiz Th·ª±c T·∫ø",
          "index": 1964
        },
        {
          "kind": "JSXText",
          "text": "{quizzes.length} quiz ƒë∆∞·ª£c t√¨m th·∫•y trong database",
          "index": 2079
        },
        {
          "kind": "JSXText",
          "text": "Kh√¥ng c√≥ quiz n√†o trong database",
          "index": 2765
        },
        {
          "kind": "JSXText",
          "text": "H√£y t·∫°o m·ªôt s·ªë quiz ƒë·ªÉ test h·ªá th·ªëng review",
          "index": 2875
        },
        {
          "kind": "JSXText",
          "text": "{quiz.title || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ'}",
          "index": 3357
        },
        {
          "kind": "JSXText",
          "text": "{quiz.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}",
          "index": 3520
        },
        {
          "kind": "JSXText",
          "text": "Danh m·ª•c: {quiz.category}",
          "index": 3872
        },
        {
          "kind": "JSXText",
          "text": "{quiz.status === 'approved' ? 'ƒê√£ duy·ªát' :\r\n                           quiz.status === 'pending' ? 'Ch·ªù duy·ªát' : 'B·ªã t·ª´ ch·ªëi'}",
          "index": 4283
        },
        {
          "kind": "JSXText",
          "text": "ƒê√°nh gi√°",
          "index": 5312
        },
        {
          "kind": "JSXText",
          "text": "üìä Th·ªëng k√™ nhanh",
          "index": 5696
        },
        {
          "kind": "JSXText",
          "text": "T·ªïng quiz",
          "index": 5987
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng c√≥ ti√™u ƒë·ªÅ",
          "index": 3397
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng c√≥ m√¥ t·∫£",
          "index": 3566
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ duy·ªát",
          "index": 4342
        },
        {
          "kind": "StringLiteral",
          "text": "Ch·ªù duy·ªát",
          "index": 4411
        },
        {
          "kind": "StringLiteral",
          "text": "B·ªã t·ª´ ch·ªëi",
          "index": 4425
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\QuizReviewsPage.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showReviewForm, setShowReviewForm] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (quizId) {\r\n      console.log('üéØ QuizReviewsPage mounted with quizId:', quizId);\r\n      loadQuizAndReviews();\r\n    } else {\r\n      console.error('‚ùå No quizId provided in URL params');\r\n      setLoading(false);\r\n    }\r\n  }, [quizId]);\r\n\r\n  const loadQuizAndReviews = async () => {\r\n    if (!quizId) {\r\n      console.error('‚ùå No quizId provided');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    console.log('üîÑ Starting to load quiz and reviews for:', quizId);\r\n    \r\n    try {\r\n      // Step 1: Load quiz details (REQUIRED)\r\n      console.log('üìù Loading quiz details...');\r\n      let quizData;\r\n      try {\r\n        quizData = await getQuizById(quizId);\r\n        console.log('üîç Raw quiz data from API:', quizData);\r\n        \r\n        if (!quizData) {\r\n          console.error('‚ùå Quiz not found in database for ID:', quizId);\r\n          \r\n          // Create a fallback quiz object for testing\r\n          console.log('üîß Creating fallback quiz for testing...');\r\n          const fallbackQuiz: Quiz = {\r\n            id: quizId,\r\n            title: `Quiz Sample ${quizId}`,\r\n            description: 'ƒê√¢y l√† quiz m·∫´u ƒë·ªÉ test h·ªá th·ªëng ƒë√°nh gi√°',\r\n            category: 'General',\r\n            difficulty: 'easy' as const,\r\n            questions: [\r\n              {\r\n                id: '1',\r\n                text: 'C√¢u h·ªèi m·∫´u?',\r\n                type: 'multiple',\r\n                answers: [\r\n                  { id: '1', text: 'ƒê√°p √°n A', isCorrect: true },\r\n                  { id: '2', text: 'ƒê√°p √°n B', isCorrect: false },\r\n                  { id: '3', text: 'ƒê√°p √°n C', isCorrect: false },\r\n                  { id: '4', text: 'ƒê√°p √°n D', isCorrect: false }\r\n                ],\r\n                explanation: 'Gi·∫£i th√≠ch m·∫´u',\r\n                points: 10\r\n              }\r\n            ],\r\n            duration: 300,\r\n            createdBy: 'system',\r\n            createdAt: new Date(),\r\n            updatedAt: new Date(),\r\n            isPublished: true,\r\n            tags: ['sample', 'test']\r\n          };\r\n          setQuiz(fallbackQuiz);\r\n          console.log('‚úÖ Using fallback quiz for testing');\r\n        } else {\r\n          console.log('‚úÖ Quiz data loaded successfully:', quizData.title);\r\n          setQuiz(quizData);\r\n        }\r\n      } catch (quizError) {\r\n        console.error('‚ùå Failed to load quiz:', quizError);\r\n        toast.error('Kh√¥ng t√¨m th·∫•y quiz n√†y');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Step 2: Load reviews (OPTIONAL - don't fail if reviews fail)\r\n      console.log('üìä Loading reviews...');\r\n      try {\r\n        // Try simple query first to avoid index issues\r\n        const reviewsData = await reviewService.getQuizReviewsSimple(quizId);\r\n        console.log(`‚úÖ Reviews loaded: ${reviewsData.length} reviews found`);\r\n        setReviews(reviewsData || []);\r\n\r\n        // Calculate stats from reviews\r\n        if (reviewsData && reviewsData.length > 0) {\r\n          const totalRating = reviewsData.reduce((sum: number, review: any) => sum + (review.rating || 0), 0);\r\n          const averageRating = totalRating / reviewsData.length;\r\n          \r\n          const ratingDistribution = {\r\n            5: reviewsData.filter((r: any) => r.rating === 5).length,\r\n            4: reviewsData.filter((r: any) => r.rating === 4).length,\r\n            3: reviewsData.filter((r: any) => r.rating === 3).length,\r\n            2: reviewsData.filter((r: any) => r.rating === 2).length,\r\n            1: reviewsData.filter((r: any) => r.rating === 1).length\r\n          };\r\n\r\n          setStats({\r\n            totalReviews: reviewsData.length,\r\n            averageRating: Math.round(averageRating * 10) / 10,\r\n            ratingDistribution\r\n          });\r\n          console.log(`üìà Stats calculated: ${reviewsData.length} reviews, ${averageRating.toFixed(1)} avg rating`);\r\n        } else {\r\n          console.log('üìä No reviews found, setting empty stats');\r\n          setStats({\r\n            totalReviews: 0,\r\n            averageRating: 0,\r\n            ratingDistribution: { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 }\r\n          });\r\n        }\r\n      } catch (reviewError) {\r\n        console.error('‚ö†Ô∏è Error loading reviews:', reviewError);\r\n        \r\n        // Set empty state on error\r\n        setReviews([]);\r\n        setStats({\r\n          totalReviews: 0,\r\n          averageRating: 0,\r\n          ratingDistribution: { 5: 0, 4: 0, 3: 0, 2: 0, 1: 0 }\r\n        });\r\n        toast.error('Kh√¥ng th·ªÉ t·∫£i ƒë√°nh gi√°');\r\n      }\r\n\r\n      console.log('üéâ Page loading completed successfully');\r\n    } catch (error) {\r\n      console.error('‚ùå Critical error in loadQuizAndReviews:', error);\r\n      toast.error('C√≥ l·ªói khi t·∫£i trang ƒë√°nh gi√°');\r\n    } finally {\r\n      // ALWAYS set loading to false\r\n      setLoading(false);\r\n      console.log('‚úÖ Loading state set to false');\r\n    }\r\n  };\r\n\r\n  const handleReviewSubmitted = async () => {\r\n    console.log('üîÑ Review submitted, refreshing data...');\r\n    setShowReviewForm(false);\r\n    \r\n    // Clear current reviews to show loading state\r\n    setReviews([]);\r\n    setLoading(true);\r\n    \r\n    // Add delay to ensure Firebase has processed the write\r\n    setTimeout(() => {\r\n      console.log('‚è∞ Delay completed, reloading reviews with cache bypass...');\r\n      loadQuizAndReviews();\r\n    }, 1500); // Increased delay to 1.5 seconds\r\n  };\r\n\r\n  const handleHelpfulClick = async (reviewId: string) => {\r\n    // TODO: Implement helpful functionality\r\n    console.log('Helpful clicked for review:', reviewId);\r\n  };\r\n\r\n  const handleReportClick = async (reviewId: string) => {\r\n    // TODO: Implement report functionality  \r\n    console.log('Report clicked for review:', reviewId);\r\n  };\r\n\r\n  const renderRatingDistribution = () => {\r\n    if (!stats) return null;\r\n\r\n    return (",
          "index": 805
        },
        {
          "kind": "JSXText",
          "text": "ƒêang t·∫£i th√¥ng tin quiz...",
          "index": 8380
        },
        {
          "kind": "JSXText",
          "text": "Quiz kh√¥ng t·ªìn t·∫°i",
          "index": 8723
        },
        {
          "kind": "JSXText",
          "text": "Kh√¥ng th·ªÉ t√¨m th·∫•y quiz n√†y",
          "index": 8792
        },
        {
          "kind": "JSXText",
          "text": "{\r\n                  loadQuizAndReviews();\r\n                }}\r\n                disabled={loading}\r\n                className=\"px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors font-medium disabled:opacity-50\"\r\n                title=\"L√†m m·ªõi ƒë√°nh gi√°\"\r\n              >",
          "index": 10434
        },
        {
          "kind": "JSXText",
          "text": "setShowReviewForm(true)}\r\n                className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium\"\r\n              >\r\n                Vi·∫øt ƒë√°nh gi√°",
          "index": 10902
        },
        {
          "kind": "JSXText",
          "text": "{stats?.totalReviews === 0 ? 'Ch∆∞a c√≥ ƒë√°nh gi√°' : 'ng∆∞·ªùi ƒë√£ ƒë√°nh gi√°'}",
          "index": 13060
        },
        {
          "kind": "JSXText",
          "text": "ƒê√°nh gi√° t√≠ch c·ª±c",
          "index": 13877
        },
        {
          "kind": "JSXText",
          "text": "ƒê√°nh gi√° t·ª´ ng∆∞·ªùi d√πng ({reviews.length})",
          "index": 14567
        },
        {
          "kind": "JSXText",
          "text": "setShowReviewForm(true)}\r\n                    className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm\"\r\n                  >\r\n                    Vi·∫øt ƒë√°nh gi√°",
          "index": 14718
        },
        {
          "kind": "JSXText",
          "text": "Ch∆∞a c√≥ ƒë√°nh gi√° n√†o",
          "index": 15317
        },
        {
          "kind": "JSXText",
          "text": "H√£y tr·ªü th√†nh ng∆∞·ªùi ƒë·∫ßu ti√™n ƒë√°nh gi√° quiz n√†y! \r\n                      Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n ƒë·ªÉ gi√∫p nh·ªØng ng∆∞·ªùi kh√°c.",
          "index": 15461
        },
        {
          "kind": "JSXText",
          "text": "Vi·∫øt ƒë√°nh gi√° ƒë·∫ßu ti√™n",
          "index": 15969
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√¢y l√† quiz m·∫´u ƒë·ªÉ test h·ªá th·ªëng ƒë√°nh gi√°",
          "index": 2092
        },
        {
          "kind": "StringLiteral",
          "text": "C√¢u h·ªèi m·∫´u?",
          "index": 2305
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n A",
          "index": 2420
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n B",
          "index": 2487
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n C",
          "index": 2555
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n D",
          "index": 2623
        },
        {
          "kind": "StringLiteral",
          "text": "Gi·∫£i th√≠ch m·∫´u",
          "index": 2704
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t√¨m th·∫•y quiz n√†y",
          "index": 3342
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i ƒë√°nh gi√°",
          "index": 5412
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói khi t·∫£i trang ƒë√°nh gi√°",
          "index": 5626
        },
        {
          "kind": "StringLiteral",
          "text": "L√†m m·ªõi ƒë√°nh gi√°",
          "index": 10702
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆∞a c√≥ ƒë√°nh gi√°",
          "index": 13112
        },
        {
          "kind": "StringLiteral",
          "text": "ng∆∞·ªùi ƒë√£ ƒë√°nh gi√°",
          "index": 13133
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\QuizPreviewPage.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": ");\r\n  }\r\n\r\n  const getDifficultyColor = (difficulty: string) => {\r\n    switch (difficulty) {\r\n      case 'easy': return 'bg-green-100 text-green-800';\r\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\r\n      case 'hard': return 'bg-red-100 text-red-800';\r\n      default: return 'bg-gray-100 text-gray-800';\r\n    }\r\n  };\r\n\r\n  const getDifficultyText = (difficulty: string) => {\r\n    switch (difficulty) {\r\n      case 'easy': return 'D·ªÖ';\r\n      case 'medium': return 'Trung b√¨nh';\r\n      case 'hard': return 'Kh√≥';\r\n      default: return difficulty;\r\n    }\r\n  };\r\n\r\n  return (",
          "index": 2764
        },
        {
          "kind": "JSXText",
          "text": "Ch∆°i c√πng b·∫°n b√®",
          "index": 7018
        },
        {
          "kind": "StringLiteral",
          "text": "D·ªÖ",
          "index": 3214
        },
        {
          "kind": "StringLiteral",
          "text": "Trung b√¨nh",
          "index": 3249
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√≥",
          "index": 3290
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\QuizList.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "('grid'); // grid, list\r\n  const [showCompleted, setShowCompleted] = useState(true);\r\n  const [showStats, setShowStats] = useState(false);\r\n  \r\n  const categories = Array.from(new Set(quizzes.map(q => q.category)));\r\n  const difficulties = Array.from(new Set(quizzes.map(q => q.difficulty)));\r\n  \r\n  // Ch·ªâ hi·ªÉn th·ªã quiz ƒë√£ ƒë∆∞·ª£c duy·ªát\r\n  let filtered = quizzes.filter(q =>\r\n    q.status === 'approved' &&\r\n    (category === 'all' || q.category === category) &&\r\n    (difficulty === 'all' || q.difficulty === difficulty) &&\r\n    (showCompleted || !q.isCompleted) &&\r\n    q.title.toLowerCase().includes(search.toLowerCase())\r\n  );\r\n\r\n  // Sorting logic\r\n  filtered = filtered.sort((a, b) => {\r\n    switch (sortBy) {\r\n      case 'newest':\r\n        return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\r\n      case 'oldest':\r\n        return new Date(a.createdAt || 0).getTime() - new Date(b.createdAt || 0).getTime();\r\n      case 'popular':\r\n        return (b.totalPlayers || 0) - (a.totalPlayers || 0);\r\n      case 'difficulty':\r\n        const diffOrder = { 'easy': 1, 'medium': 2, 'hard': 3 };\r\n        return (diffOrder[a.difficulty as keyof typeof diffOrder] || 2) - (diffOrder[b.difficulty as keyof typeof diffOrder] || 2);\r\n      default:\r\n        return 0;\r\n    }\r\n  });\r\n\r\n  // Retry connection handler\r\n  const handleRetry = () => {\r\n    setRetryCount(0);\r\n    dispatch(fetchQuizzes({ user }) as any);\r\n  };\r\n\r\n  if (error) {\r\n    return (",
          "index": 2849
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\MyQuizzesPage.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "(null);\r\n  const [editReason, setEditReason] = useState('');\r\n  const [submittingRequest, setSubmittingRequest] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadMyQuizzes();\r\n    }\r\n  }, [user]);\r\n\r\n  const loadMyQuizzes = async () => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const quizzesQuery = query(\r\n        collection(db, 'quizzes'),\r\n        where('createdBy', '==', user.uid)\r\n      );\r\n      \r\n      const snapshot = await getDocs(quizzesQuery);\r\n      const loadedQuizzes: Quiz[] = [];\r\n      \r\n      for (const docSnap of snapshot.docs) {\r\n        const data = docSnap.data();\r\n        \r\n        // Load edit requests for this quiz\r\n        const editRequestsQuery = query(\r\n          collection(db, 'editRequests'),\r\n          where('quizId', '==', docSnap.id)\r\n        );\r\n        const editRequestsSnapshot = await getDocs(editRequestsQuery);\r\n        const editRequests = editRequestsSnapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n          requestedAt: doc.data().requestedAt?.toDate() || new Date(),\r\n          approvedAt: doc.data().approvedAt?.toDate()\r\n        })) as EditRequest[];\r\n        \r\n        loadedQuizzes.push({\r\n          id: docSnap.id,\r\n          ...data,\r\n          // Ensure stats are included\r\n          views: data.stats?.views || data.views || 0,\r\n          attempts: data.stats?.attempts || data.attempts || 0,\r\n          completions: data.stats?.completions || data.completions || 0,\r\n          averageScore: data.stats?.averageScore || data.averageScore || 0,\r\n          createdAt: data.createdAt && typeof data.createdAt.toDate === 'function' \r\n            ? data.createdAt.toDate() \r\n            : data.createdAt instanceof Date \r\n              ? data.createdAt \r\n              : new Date(),\r\n          updatedAt: data.updatedAt && typeof data.updatedAt.toDate === 'function'\r\n            ? data.updatedAt.toDate()\r\n            : data.updatedAt instanceof Date\r\n              ? data.updatedAt\r\n              : new Date(),\r\n          editRequests\r\n        } as Quiz);\r\n      }\r\n      \r\n      // Sort in memory instead of using orderBy in query\r\n      loadedQuizzes.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\r\n      \r\n      setQuizzes(loadedQuizzes);\r\n    } catch (error) {\r\n      console.error('Error loading quizzes:', error);\r\n      toast.error(t('quiz.loadError'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleEditRequest = async () => {\r\n    if (!selectedQuiz || !editReason.trim()) {\r\n      toast.error(t('quiz.editReasonRequired'));\r\n      return;\r\n    }\r\n\r\n    setSubmittingRequest(true);\r\n    try {\r\n      await addDoc(collection(db, 'editRequests'), {\r\n        quizId: selectedQuiz.id,\r\n        requestedBy: user?.uid,\r\n        requestedAt: serverTimestamp(),\r\n        reason: editReason.trim(),\r\n        status: 'pending'\r\n      });\r\n\r\n      toast.success('Y√™u c·∫ßu ch·ªânh s·ª≠a ƒë√£ ƒë∆∞·ª£c g·ª≠i, ch·ªù admin ph√™ duy·ªát');\r\n      setShowEditRequestModal(false);\r\n      setEditReason('');\r\n      setSelectedQuiz(null);\r\n      loadMyQuizzes(); // Reload to get updated data\r\n    } catch (error) {\r\n      console.error('Error submitting edit request:', error);\r\n      toast.error(t('quiz.editRequestError'));\r\n    } finally {\r\n      setSubmittingRequest(false);\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    const styles = {\r\n      pending: 'bg-yellow-100 text-yellow-800',\r\n      approved: 'bg-green-100 text-green-800',\r\n      rejected: 'bg-red-100 text-red-800',\r\n      draft: 'bg-gray-100 text-gray-800'\r\n    };\r\n\r\n    const icons = {\r\n      pending:",
          "index": 1890
        },
        {
          "kind": "JSXText",
          "text": "};\r\n\r\n    const labels = {\r\n      pending: 'Ch·ªù duy·ªát',\r\n      approved: 'ƒê√£ duy·ªát',\r\n      rejected: 'B·ªã t·ª´ ch·ªëi',\r\n      draft: 'B·∫£n nh√°p'\r\n    };\r\n\r\n    return (",
          "index": 5722
        },
        {
          "kind": "JSXText",
          "text": ");\r\n  };\r\n\r\n  const getDifficultyBadge = (difficulty: string) => {\r\n    const styles = {\r\n      easy: 'bg-green-100 text-green-800',\r\n      medium: 'bg-yellow-100 text-yellow-800',\r\n      hard: 'bg-red-100 text-red-800'\r\n    };\r\n\r\n    const labels = {\r\n      easy: 'üü¢ D·ªÖ',\r\n      medium: 'üü° Trung b√¨nh',\r\n      hard: 'üî¥ Kh√≥'\r\n    };\r\n\r\n    return (",
          "index": 6146
        },
        {
          "kind": "JSXText",
          "text": ");\r\n  };\r\n\r\n  const canEdit = (quiz: Quiz): { allowed: boolean; reason?: string } => {\r\n    // Check if there's a pending edit request\r\n    const pendingRequest = quiz.editRequests?.find(req => req.status === 'pending');\r\n    if (pendingRequest) {\r\n      return { allowed: false, reason: 'C√≥ y√™u c·∫ßu ch·ªânh s·ª≠a ƒëang ch·ªù duy·ªát' };\r\n    }\r\n\r\n    // Check if quiz is approved and needs admin permission to edit\r\n    if (quiz.status === 'approved') {\r\n      return { allowed: false, reason: 'Quiz ƒë√£ ƒë∆∞·ª£c duy·ªát, c·∫ßn xin ph√©p admin ƒë·ªÉ ch·ªânh s·ª≠a' };\r\n    }\r\n\r\n    // Can edit if draft or rejected\r\n    return { allowed: true };\r\n  };\r\n\r\n  const handleEditQuiz = (quiz: Quiz) => {\r\n    const editPermission = canEdit(quiz);\r\n    \r\n    if (!editPermission.allowed) {\r\n      if (quiz.status === 'approved') {\r\n        setSelectedQuiz(quiz);\r\n        setShowEditRequestModal(true);\r\n      } else {\r\n        toast.warning(editPermission.reason);\r\n      }\r\n    } else {\r\n      navigate(`/quiz/${quiz.id}/edit`);\r\n    }\r\n  };\r\n\r\n  const filteredQuizzes = quizzes.filter(quiz => {\r\n    const matchesSearch = quiz.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         quiz.description.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesStatus = statusFilter === 'all' || quiz.status === statusFilter;\r\n    \r\n    return matchesSearch && matchesStatus;\r\n  });\r\n\r\n  if (!user || (user.role !== 'creator' && user.role !== 'admin')) {\r\n    return (",
          "index": 6682
        },
        {
          "kind": "JSXText",
          "text": "Qu·∫£n l√Ω v√† theo d√µi quiz b·∫°n ƒë√£ t·∫°o",
          "index": 8871
        },
        {
          "kind": "JSXText",
          "text": "T·∫•t c·∫£ tr·∫°ng th√°i",
          "index": 10437
        },
        {
          "kind": "JSXText",
          "text": "B·∫£n nh√°p",
          "index": 10503
        },
        {
          "kind": "JSXText",
          "text": "T·ªïng quiz",
          "index": 11335
        },
        {
          "kind": "JSXText",
          "text": "T·ªïng l∆∞·ª£t xem",
          "index": 13191
        },
        {
          "kind": "JSXText",
          "text": "T·ªïng l∆∞·ª£t th·ª≠",
          "index": 13817
        },
        {
          "kind": "JSXText",
          "text": "{searchTerm || statusFilter !== 'all' \r\n                  ? 'Kh√¥ng t√¨m th·∫•y quiz ph√π h·ª£p v·ªõi b·ªô l·ªçc'\r\n                  : 'B·∫°n ch∆∞a t·∫°o quiz n√†o. H√£y t·∫°o quiz ƒë·∫ßu ti√™n!'\r\n                }",
          "index": 15367
        },
        {
          "kind": "JSXText",
          "text": "T·∫°o Quiz ƒê·∫ßu Ti√™n",
          "index": 15938
        },
        {
          "kind": "JSXText",
          "text": "Danh m·ª•c & ƒê·ªô kh√≥",
          "index": 16538
        },
        {
          "kind": "JSXText",
          "text": "Ng√†y t·∫°o",
          "index": 17061
        },
        {
          "kind": "JSXText",
          "text": "{quiz.questions?.length || 0} c√¢u h·ªèi",
          "index": 18024
        },
        {
          "kind": "JSXText",
          "text": "C√≥ y√™u c·∫ßu ch·ªânh s·ª≠a",
          "index": 18989
        },
        {
          "kind": "JSXText",
          "text": "üëÅÔ∏è {quiz.views || 0} l∆∞·ª£t xem",
          "index": 19335
        },
        {
          "kind": "JSXText",
          "text": "üéØ {quiz.attempts || 0} l∆∞·ª£t th·ª≠",
          "index": 19404
        },
        {
          "kind": "JSXText",
          "text": "‚úÖ {quiz.completions || 0} ho√†n th√†nh",
          "index": 19475
        },
        {
          "kind": "JSXText",
          "text": "üìä {quiz.averageScore}% ƒëi·ªÉm TB",
          "index": 19617
        },
        {
          "kind": "JSXText",
          "text": "navigate(`/quiz/${quiz.id}/preview`)}\r\n                            className=\"text-blue-600 hover:text-blue-900 p-1\"\r\n                            title=\"Xem tr∆∞·ªõc\"\r\n                          >",
          "index": 20309
        },
        {
          "kind": "JSXText",
          "text": "{\r\n                                // Handle delete\r\n                                if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a quiz n√†y?')) {\r\n                                  // Delete logic here\r\n                                }\r\n                              }}\r\n                              className=\"text-red-600 hover:text-red-900 p-1\"\r\n                              title={t(\"action.clear\")}\r\n                            >",
          "index": 21145
        },
        {
          "kind": "JSXText",
          "text": "Y√™u c·∫ßu ch·ªânh s·ª≠a quiz",
          "index": 22317
        },
        {
          "kind": "JSXText",
          "text": "L√Ω do ch·ªânh s·ª≠a *",
          "index": 22709
        },
        {
          "kind": "JSXText",
          "text": "setEditReason(e.target.value)}\r\n                    placeholder=\"Vui l√≤ng m√¥ t·∫£ l√Ω do b·∫°n mu·ªën ch·ªânh s·ª≠a quiz n√†y...\"\r\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                    rows={4}\r\n                  />",
          "index": 22883
        },
        {
          "kind": "JSXText",
          "text": "‚ö†Ô∏è Quiz ƒë√£ ƒë∆∞·ª£c duy·ªát. Y√™u c·∫ßu ch·ªânh s·ª≠a s·∫Ω ƒë∆∞·ª£c g·ª≠i t·ªõi admin ƒë·ªÉ x√©t duy·ªát. \r\n                    Sau khi ƒë∆∞·ª£c ph√©p ch·ªânh s·ª≠a, b·∫°n c·∫ßn g·ª≠i l·∫°i ƒë·ªÉ admin duy·ªát n·ªôi dung m·ªõi.",
          "index": 23386
        },
        {
          "kind": "JSXText",
          "text": ")}\r\n                  G·ª≠i y√™u c·∫ßu",
          "index": 24683
        },
        {
          "kind": "StringLiteral",
          "text": "Y√™u c·∫ßu ch·ªânh s·ª≠a ƒë√£ ƒë∆∞·ª£c g·ª≠i, ch·ªù admin ph√™ duy·ªát",
          "index": 4833
        },
        {
          "kind": "StringLiteral",
          "text": "Ch·ªù duy·ªát",
          "index": 5772
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ duy·ªát",
          "index": 5802
        },
        {
          "kind": "StringLiteral",
          "text": "B·ªã t·ª´ ch·ªëi",
          "index": 5831
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫£n nh√°p",
          "index": 5859
        },
        {
          "kind": "StringLiteral",
          "text": "üü¢ D·ªÖ",
          "index": 6418
        },
        {
          "kind": "StringLiteral",
          "text": "üü° Trung b√¨nh",
          "index": 6442
        },
        {
          "kind": "StringLiteral",
          "text": "üî¥ Kh√≥",
          "index": 6472
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ y√™u c·∫ßu ch·ªânh s·ª≠a ƒëang ch·ªù duy·ªát",
          "index": 6977
        },
        {
          "kind": "StringLiteral",
          "text": "Quiz ƒë√£ ƒë∆∞·ª£c duy·ªát, c·∫ßn xin ph√©p admin ƒë·ªÉ ch·ªânh s·ª≠a",
          "index": 7175
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t√¨m th·∫•y quiz ph√π h·ª£p v·ªõi b·ªô l·ªçc",
          "index": 15446
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫°n ch∆∞a t·∫°o quiz n√†o. H√£y t·∫°o quiz ƒë·∫ßu ti√™n!",
          "index": 15508
        },
        {
          "kind": "StringLiteral",
          "text": "Xem tr∆∞·ªõc",
          "index": 20463
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a quiz n√†y?",
          "index": 21251
        },
        {
          "kind": "StringLiteral",
          "text": "Vui l√≤ng m√¥ t·∫£ l√Ω do b·∫°n mu·ªën ch·ªânh s·ª≠a quiz n√†y...",
          "index": 22949
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\EditQuizPageAdvanced.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "([]);\r\n\r\n  useEffect(() => {\r\n    if (id) loadQuiz();\r\n  }, [id]);\r\n\r\n  const loadQuiz = async () => {\r\n    if (!id) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const quizData = await getQuizById(id);\r\n      if (quizData) {\r\n        setQuiz(quizData);\r\n        setQuizInfo({\r\n          title: quizData.title || '',\r\n          description: quizData.description || '',\r\n          category: quizData.category || '',\r\n          difficulty: quizData.difficulty || 'medium',\r\n          status: quizData.status || 'pending',\r\n          timeLimit: quizData.duration || 30,\r\n          passingScore: 70,\r\n          tags: quizData.tags || [],\r\n          isPublished: quizData.isPublished || false\r\n        });\r\n        setQuestions(quizData.questions || []);\r\n      } else {\r\n        toast.error('Quiz not found');\r\n        navigate('/admin/stats-test');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading quiz:', error);\r\n      toast.error('Failed to load quiz');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    if (!id || !quiz) return;\r\n\r\n    if (!quizInfo.title.trim()) {\r\n      toast.error('Quiz title is required');\r\n      return;\r\n    }\r\n\r\n    if (questions.length === 0) {\r\n      toast.error('Quiz must have at least one question');\r\n      return;\r\n    }\r\n\r\n    setSaving(true);\r\n    try {\r\n      const updatedQuiz: Quiz = {\r\n        ...quiz,\r\n        ...quizInfo,\r\n        duration: quizInfo.timeLimit,\r\n        questions,\r\n        updatedAt: new Date()\r\n      };\r\n\r\n      // ‚úÖ HANDLE RESUBMISSION AFTER EDIT APPROVAL\r\n      if (quiz.needsReApproval) {\r\n        // Quiz was edited after admin approval, resubmit for approval\r\n        updatedQuiz.status = 'pending';\r\n        updatedQuiz.canEdit = false;\r\n        updatedQuiz.isApproved = false;\r\n        updatedQuiz.needsReApproval = false;\r\n        updatedQuiz.resubmittedAt = new Date();\r\n        \r\n        // Create notification for admin about resubmission\r\n        await addDoc(collection(db, 'notifications'), {\r\n          userId: 'admin', // Or get actual admin IDs\r\n          type: 'quiz_resubmitted',\r\n          title: 'Quiz ƒë√£ ƒë∆∞·ª£c s·ª≠a v√† n·ªôp l·∫°i',\r\n          message: `Quiz \"${updatedQuiz.title}\" ƒë√£ ƒë∆∞·ª£c creator s·ª≠a xong v√† n·ªôp l·∫°i ƒë·ªÉ admin duy·ªát.`,\r\n          quizId: id,\r\n          createdBy: user?.uid,\r\n          createdByName: user?.displayName || user?.email,\r\n          createdAt: serverTimestamp(),\r\n          read: false\r\n        });\r\n        \r\n        toast.success('‚úÖ Quiz ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† n·ªôp l·∫°i ƒë·ªÉ admin duy·ªát!');\r\n      } else {\r\n        toast.success('‚úÖ Quiz updated successfully!');\r\n      }\r\n\r\n      await updateQuiz(id, updatedQuiz);\r\n      navigate('/admin/stats-test');\r\n    } catch (error) {\r\n      console.error('Error updating quiz:', error);\r\n      toast.error('Failed to update quiz');\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const addQuestion = () => {\r\n    const newQuestion: Question = {\r\n      id: `q_${Date.now()}`,\r\n      text: '',\r\n      type: 'multiple',\r\n      answers: [\r\n        { id: 'a1', text: '', isCorrect: true },\r\n        { id: 'a2', text: '', isCorrect: false },\r\n        { id: 'a3', text: '', isCorrect: false },\r\n        { id: 'a4', text: '', isCorrect: false }\r\n      ],\r\n      explanation: '',\r\n      points: 10,\r\n      difficulty: 'medium'\r\n    };\r\n    setQuestions([...questions, newQuestion]);\r\n    setEditingQuestionId(newQuestion.id);\r\n  };\r\n\r\n  const deleteQuestion = (questionId: string) => {\r\n    if (window.confirm('Are you sure you want to delete this question?')) {\r\n      setQuestions(questions.filter(q => q.id !== questionId));\r\n      if (editingQuestionId === questionId) {\r\n        setEditingQuestionId(null);\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateQuestion = (questionId: string, updatedQuestion: Partial",
          "index": 2467
        },
        {
          "kind": "JSXText",
          "text": "Ch·ªânh s·ª≠a th√¥ng tin quiz c·ªßa b·∫°n",
          "index": 11602
        },
        {
          "kind": "JSXText",
          "text": "M√¥ t·∫£ quiz *",
          "index": 12739
        },
        {
          "kind": "JSXText",
          "text": "Th·ªùi gian (ph√∫t)",
          "index": 15617
        },
        {
          "kind": "JSXText",
          "text": "‚è≥ Ch·ªù duy·ªát",
          "index": 16890
        },
        {
          "kind": "JSXText",
          "text": "‚úÖ ƒê√£ duy·ªát",
          "index": 16961
        },
        {
          "kind": "JSXText",
          "text": "‚ùå T·ª´ ch·ªëi",
          "index": 17031
        },
        {
          "kind": "StringLiteral",
          "text": "T·ªïng h·ª£p",
          "index": 839
        },
        {
          "kind": "StringLiteral",
          "text": "Khoa h·ªçc",
          "index": 883
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªãch s·ª≠",
          "index": 927
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê·ªãa l√Ω",
          "index": 972
        },
        {
          "kind": "StringLiteral",
          "text": "VƒÉn h·ªçc",
          "index": 1017
        },
        {
          "kind": "StringLiteral",
          "text": "To√°n h·ªçc",
          "index": 1057
        },
        {
          "kind": "StringLiteral",
          "text": "C√¥ng ngh·ªá",
          "index": 1104
        },
        {
          "kind": "StringLiteral",
          "text": "Th·ªÉ thao",
          "index": 1148
        },
        {
          "kind": "StringLiteral",
          "text": "Gi·∫£i tr√≠",
          "index": 1198
        },
        {
          "kind": "StringLiteral",
          "text": "·∫®m th·ª±c",
          "index": 1239
        },
        {
          "kind": "StringLiteral",
          "text": "D·ªÖ",
          "index": 1308
        },
        {
          "kind": "StringLiteral",
          "text": "Trung b√¨nh",
          "index": 1383
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√≥",
          "index": 1466
        },
        {
          "kind": "StringLiteral",
          "text": "Quiz ƒë√£ ƒë∆∞·ª£c s·ª≠a v√† n·ªôp l·∫°i",
          "index": 4623
        },
        {
          "kind": "StringLiteral",
          "text": "‚úÖ Quiz ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† n·ªôp l·∫°i ƒë·ªÉ admin duy·ªát!",
          "index": 4983
        },
        {
          "kind": "StringLiteral",
          "text": "M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ n·ªôi dung quiz...",
          "index": 13040
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\EditQuizPage.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [formData, setFormData] = useState({\r\n    title: '',\r\n    description: '',\r\n    category: '',\r\n    difficulty: 'medium' as 'easy' | 'medium' | 'hard',\r\n    status: 'pending' as 'pending' | 'approved' | 'rejected' | 'draft'\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      loadQuiz();\r\n    }\r\n  }, [id]);\r\n\r\n  const loadQuiz = async () => {\r\n    if (!id) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const quizData = await getQuizById(id);\r\n      if (quizData) {\r\n        setQuiz(quizData);\r\n        setFormData({\r\n          title: quizData.title || '',\r\n          description: quizData.description || '',\r\n          category: quizData.category || '',\r\n          difficulty: quizData.difficulty || 'medium',\r\n          status: quizData.status || 'pending'\r\n        });\r\n      } else {\r\n        toast.error('Kh√¥ng t√¨m th·∫•y quiz n√†y');\r\n        navigate('/admin');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading quiz:', error);\r\n      toast.error('L·ªói khi t·∫£i quiz');\r\n      navigate('/admin');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!id || !quiz) return;\r\n\r\n    setSaving(true);\r\n    try {\r\n      const updatedQuiz = {\r\n        ...quiz,\r\n        ...formData,\r\n        updatedAt: new Date()\r\n      };\r\n\r\n      await updateQuiz(id, updatedQuiz);\r\n      toast.success('C·∫≠p nh·∫≠t quiz th√†nh c√¥ng!');\r\n      navigate('/admin');\r\n    } catch (error) {\r\n      console.error('Error updating quiz:', error);\r\n      toast.error('L·ªói khi c·∫≠p nh·∫≠t quiz');\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: string, value: string) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n\r\n  if (loading) {\r\n    return (",
          "index": 576
        },
        {
          "kind": "JSXText",
          "text": "ƒêang t·∫£i quiz...",
          "index": 2814
        },
        {
          "kind": "JSXText",
          "text": "Quay l·∫°i Admin",
          "index": 3613
        },
        {
          "kind": "JSXText",
          "text": "‚úèÔ∏è Ch·ªânh s·ª≠a Quiz",
          "index": 3805
        },
        {
          "kind": "JSXText",
          "text": "Ti√™u ƒë·ªÅ Quiz",
          "index": 4311
        },
        {
          "kind": "JSXText",
          "text": ")}\r\n                {saving ? 'ƒêang l∆∞u...' : 'L∆∞u thay ƒë·ªïi'}",
          "index": 8198
        },
        {
          "kind": "JSXText",
          "text": "üìä Th√¥ng tin Quiz",
          "index": 8521
        },
        {
          "kind": "JSXText",
          "text": "S·ªë c√¢u h·ªèi:",
          "index": 8709
        },
        {
          "kind": "JSXText",
          "text": "Ng∆∞·ªùi t·∫°o:",
          "index": 8929
        },
        {
          "kind": "JSXText",
          "text": "Ng√†y t·∫°o:",
          "index": 9144
        },
        {
          "kind": "JSXText",
          "text": "L·∫ßn s·ª≠a cu·ªëi:",
          "index": 9446
        },
        {
          "kind": "JSXText",
          "text": "{quiz.updatedAt ? new Date(quiz.updatedAt).toLocaleDateString('vi-VN') : 'Ch∆∞a s·ª≠a'}",
          "index": 9519
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t√¨m th·∫•y quiz n√†y",
          "index": 1509
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói khi t·∫£i quiz",
          "index": 1669
        },
        {
          "kind": "StringLiteral",
          "text": "C·∫≠p nh·∫≠t quiz th√†nh c√¥ng!",
          "index": 2097
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói khi c·∫≠p nh·∫≠t quiz",
          "index": 2249
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang l∆∞u...",
          "index": 8247
        },
        {
          "kind": "StringLiteral",
          "text": "L∆∞u thay ƒë·ªïi",
          "index": 8263
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆∞a s·ª≠a",
          "index": 9611
        }
      ]
    },
    {
      "file": "features\\quiz\\components\\ReviewList.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": ");\r\n  };\r\n\r\n  const getRatingText = (rating: number) => {\r\n    switch (rating) {\r\n      case 1: return 'R·∫•t t·ªá';\r\n      case 2: return 'T·ªá';\r\n      case 3: return 'B√¨nh th∆∞·ªùng';\r\n      case 4: return 'T·ªët';\r\n      case 5: return 'R·∫•t t·ªët';\r\n      default: return '';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (",
          "index": 1492
        },
        {
          "kind": "JSXText",
          "text": "Ch∆∞a c√≥ ƒë√°nh gi√° n√†o",
          "index": 2877
        },
        {
          "kind": "JSXText",
          "text": "H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n ƒë√°nh gi√° quiz n√†y!",
          "index": 2941
        },
        {
          "kind": "JSXText",
          "text": "toggleExpanded(review.id)}\r\n                    className=\"mt-2 text-blue-600 hover:text-blue-700 text-sm font-medium\"\r\n                  >\r\n                    {isExpanded ? 'Thu g·ªçn' : 'Xem th√™m'}",
          "index": 5655
        },
        {
          "kind": "JSXText",
          "text": "H·ªØu √≠ch ({review.helpful?.length || 0})",
          "index": 6433
        },
        {
          "kind": "JSXText",
          "text": "B√°o c√°o",
          "index": 6822
        },
        {
          "kind": "JSXText",
          "text": "ƒê√£ ch·ªânh s·ª≠a {formatDate(review.updatedAt)}",
          "index": 7024
        },
        {
          "kind": "StringLiteral",
          "text": "R·∫•t t·ªá",
          "index": 1602
        },
        {
          "kind": "StringLiteral",
          "text": "T·ªá",
          "index": 1634
        },
        {
          "kind": "StringLiteral",
          "text": "B√¨nh th∆∞·ªùng",
          "index": 1662
        },
        {
          "kind": "StringLiteral",
          "text": "T·ªët",
          "index": 1699
        },
        {
          "kind": "StringLiteral",
          "text": "R·∫•t t·ªët",
          "index": 1728
        },
        {
          "kind": "StringLiteral",
          "text": "Ng∆∞·ªùi d√πng ·∫©n danh",
          "index": 4322
        },
        {
          "kind": "StringLiteral",
          "text": "Thu g·ªçn",
          "index": 5832
        },
        {
          "kind": "StringLiteral",
          "text": "Xem th√™m",
          "index": 5844
        }
      ]
    },
    {
      "file": "features\\quiz\\components\\ReviewForm.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "= ({\r\n  quizId,\r\n  onReviewSubmitted,\r\n  onClose,\r\n  existingReview\r\n}) => {\n  const { t } = useTranslation();\n\r\n  const { user } = useSelector((state: RootState) => state.auth);\r\n  const [rating, setRating] = useState(existingReview?.rating || 0);\r\n  const [comment, setComment] = useState(existingReview?.comment || '');\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!user) {\r\n      toast.error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°');\r\n      return;\r\n    }\r\n\r\n    if (rating === 0) {\r\n      toast.error('Vui l√≤ng ch·ªçn s·ªë sao');\r\n      return;\r\n    }\r\n\r\n    setSubmitting(true);\r\n    try {\r\n      if (existingReview) {\r\n        // Update existing review\r\n        await reviewService.updateReview(existingReview.id, {\r\n          rating,\r\n          comment\r\n        });\r\n        toast.success('C·∫≠p nh·∫≠t ƒë√°nh gi√° th√†nh c√¥ng!');\r\n      } else {\r\n        // Create new review\r\n        await reviewService.createReview({\r\n          quizId,\r\n          rating,\r\n          comment\r\n        }, user.uid, user.displayName || user.email || '');\r\n        toast.success('G·ª≠i ƒë√°nh gi√° th√†nh c√¥ng!');\r\n      }\r\n      \r\n      onReviewSubmitted();\r\n    } catch (error) {\r\n      console.error('Error submitting review:', error);\r\n      toast.error('C√≥ l·ªói khi g·ª≠i ƒë√°nh gi√°');\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (",
          "index": 574
        },
        {
          "kind": "JSXText",
          "text": "{existingReview ? 'Ch·ªânh s·ª≠a ƒë√°nh gi√°' : 'Vi·∫øt ƒë√°nh gi√°'}",
          "index": 2374
        },
        {
          "kind": "JSXText",
          "text": "ƒê√°nh gi√° c·ªßa b·∫°n",
          "index": 2906
        },
        {
          "kind": "JSXText",
          "text": "{rating === 1 && 'R·∫•t kh√¥ng h√†i l√≤ng'}\r\n                  {rating === 2 && 'Kh√¥ng h√†i l√≤ng'}\r\n                  {rating === 3 && 'B√¨nh th∆∞·ªùng'}\r\n                  {rating === 4 && 'H√†i l√≤ng'}\r\n                  {rating === 5 && 'R·∫•t h√†i l√≤ng'}",
          "index": 3844
        },
        {
          "kind": "JSXText",
          "text": "Nh·∫≠n x√©t (t√πy ch·ªçn)",
          "index": 4297
        },
        {
          "kind": "JSXText",
          "text": "setComment(e.target.value)}\r\n                rows={4}\r\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none\"\r\n                placeholder=\"Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n v·ªÅ quiz n√†y...\"\r\n                maxLength={500}\r\n              />",
          "index": 4450
        },
        {
          "kind": "JSXText",
          "text": "{comment.length}/500 k√Ω t·ª±",
          "index": 4837
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°",
          "index": 1081
        },
        {
          "kind": "StringLiteral",
          "text": "Vui l√≤ng ch·ªçn s·ªë sao",
          "index": 1183
        },
        {
          "kind": "StringLiteral",
          "text": "C·∫≠p nh·∫≠t ƒë√°nh gi√° th√†nh c√¥ng!",
          "index": 1470
        },
        {
          "kind": "StringLiteral",
          "text": "G·ª≠i ƒë√°nh gi√° th√†nh c√¥ng!",
          "index": 1735
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói khi g·ª≠i ƒë√°nh gi√°",
          "index": 1908
        },
        {
          "kind": "StringLiteral",
          "text": "Ch·ªânh s·ª≠a ƒë√°nh gi√°",
          "index": 2409
        },
        {
          "kind": "StringLiteral",
          "text": "Vi·∫øt ƒë√°nh gi√°",
          "index": 2432
        },
        {
          "kind": "StringLiteral",
          "text": "R·∫•t kh√¥ng h√†i l√≤ng",
          "index": 3882
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng h√†i l√≤ng",
          "index": 3940
        },
        {
          "kind": "StringLiteral",
          "text": "B√¨nh th∆∞·ªùng",
          "index": 3994
        },
        {
          "kind": "StringLiteral",
          "text": "H√†i l√≤ng",
          "index": 4045
        },
        {
          "kind": "StringLiteral",
          "text": "R·∫•t h√†i l√≤ng",
          "index": 4093
        },
        {
          "kind": "StringLiteral",
          "text": "Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n v·ªÅ quiz n√†y...",
          "index": 4685
        },
        {
          "kind": "StringLiteral",
          "text": "C·∫≠p nh·∫≠t",
          "index": 6000
        },
        {
          "kind": "StringLiteral",
          "text": "G·ª≠i ƒë√°nh gi√°",
          "index": 6013
        }
      ]
    },
    {
      "file": "features\\quiz\\components\\QuizStats.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "Ti·∫øn ƒë·ªô",
          "index": 3288
        },
        {
          "kind": "JSXText",
          "text": "{totalQuizzes > 0 ? Math.round(totalPlayers / totalQuizzes) : 0} trung b√¨nh/quiz",
          "index": 4456
        },
        {
          "kind": "JSXText",
          "text": "Ch·∫•t l∆∞·ª£ng t·ªët",
          "index": 5667
        },
        {
          "kind": "JSXText",
          "text": "Ph√¢n b·ªë ƒë·ªô kh√≥",
          "index": 5922
        },
        {
          "kind": "JSXText",
          "text": "Danh m·ª•c ph·ªï bi·∫øn",
          "index": 8520
        },
        {
          "kind": "JSXText",
          "text": "Ch∆∞a c√≥ d·ªØ li·ªáu danh m·ª•c",
          "index": 9674
        }
      ]
    },
    {
      "file": "features\\quiz\\components\\QuizFilters.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{d === 'easy' ? 'üòä D·ªÖ' : d === 'medium' ? 'üòê Trung b√¨nh' : 'üò§ Kh√≥'}",
          "index": 4299
        },
        {
          "kind": "JSXText",
          "text": "üî• Ph·ªï bi·∫øn nh·∫•t",
          "index": 5127
        },
        {
          "kind": "JSXText",
          "text": "üî¢ Theo s·ªë c√¢u h·ªèi",
          "index": 5277
        },
        {
          "kind": "JSXText",
          "text": "‚è±Ô∏è Theo th·ªùi l∆∞·ª£ng",
          "index": 5345
        },
        {
          "kind": "JSXText",
          "text": "S·ªë c√¢u h·ªèi t·ªëi thi·ªÉu: {filters.minQuestions}",
          "index": 5519
        },
        {
          "kind": "JSXText",
          "text": "Th·ªùi l∆∞·ª£ng t·ªëi ƒëa: {filters.maxDuration} ph√∫t",
          "index": 6007
        },
        {
          "kind": "StringLiteral",
          "text": "·∫®n",
          "index": 2445
        },
        {
          "kind": "StringLiteral",
          "text": "Hi·ªán",
          "index": 2452
        },
        {
          "kind": "StringLiteral",
          "text": "üîç T√¨m ki·∫øm quiz...",
          "index": 3103
        },
        {
          "kind": "StringLiteral",
          "text": "üòä D·ªÖ",
          "index": 4330
        },
        {
          "kind": "StringLiteral",
          "text": "üòê Trung b√¨nh",
          "index": 4357
        },
        {
          "kind": "StringLiteral",
          "text": "üò§ Kh√≥",
          "index": 4375
        }
      ]
    },
    {
      "file": "features\\quiz\\components\\QuizCard.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "= ({ quiz, viewMode = 'grid' }) => {\r\n  // **TH√äM M·ªöI**: Helper functions\r\n  const getDifficultyColor = (difficulty: string) => {\r\n    switch (difficulty) {\r\n      case 'easy': return 'bg-green-100 text-green-800 border-green-200';\r\n      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\r\n      case 'hard': return 'bg-red-100 text-red-800 border-red-200';\r\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const formatDuration = (minutes: number) => {\r\n    if (minutes",
          "index": 683
        },
        {
          "kind": "JSXText",
          "text": "(null);\r\n\r\n  // Fetch review stats\r\n  useEffect(() => {\r\n    const fetchReviewStats = async () => {\r\n      try {\r\n        const stats = await reviewService.getQuizReviewStats(quiz.id);\r\n        setReviewStats(stats);\r\n      } catch (error) {\r\n        console.error('Error fetching review stats:', error);\r\n      }\r\n    };\r\n    \r\n    fetchReviewStats();\r\n  }, [quiz.id]);\r\n\r\n  useEffect(() => {\r\n    if (!user) return;\r\n    const checkFavorite = async () => {\r\n      const favRef = doc(db, 'user_favorites', user.uid);\r\n      const favSnap = await getDoc(favRef);\r\n      if (favSnap.exists()) {\r\n        const data = favSnap.data();\r\n        setIsFavorite(Array.isArray(data.quizIds) && data.quizIds.includes(quiz.id));\r\n      } else {\r\n        setIsFavorite(false);\r\n      }\r\n    };\r\n    checkFavorite();\r\n  }, [user, quiz.id]);\r\n\r\n  const handleToggleFavorite = async (e: React.MouseEvent) => {\r\n    e.preventDefault();\r\n    if (!user) return;\r\n    setFavLoading(true);\r\n    const favRef = doc(db, 'user_favorites', user.uid);\r\n    try {\r\n      const favSnap = await getDoc(favRef);\r\n      if (favSnap.exists()) {\r\n        await updateDoc(favRef, {\r\n          quizIds: isFavorite ? arrayRemove(quiz.id) : arrayUnion(quiz.id)\r\n        });\r\n      } else {\r\n        await setDoc(favRef, {\r\n          quizIds: [quiz.id]\r\n        });\r\n      }\r\n      setIsFavorite(!isFavorite);\r\n      toast.success(isFavorite ? 'ƒê√£ b·ªè y√™u th√≠ch quiz!' : 'ƒê√£ th√™m v√†o y√™u th√≠ch!');\r\n      // N·∫øu ƒëang ·ªü trang Favorites, refetch l·∫°i\r\n      if (window.location.pathname.startsWith('/favorites')) {\r\n        window.location.reload();\r\n      }\r\n    } catch (err) {\r\n      toast.error('L·ªói khi c·∫≠p nh·∫≠t y√™u th√≠ch!');\r\n    } finally {\r\n      setFavLoading(false);\r\n    }\r\n  };\r\n\r\n  // **TH√äM M·ªöI**: Render list view\r\n  if (viewMode === 'list') {\r\n    return (",
          "index": 2647
        },
        {
          "kind": "JSXText",
          "text": "‚úì Ho√†n th√†nh",
          "index": 5868
        },
        {
          "kind": "JSXText",
          "text": "{quiz.questions.length} c√¢u h·ªèi",
          "index": 7066
        },
        {
          "kind": "JSXText",
          "text": "{quiz.totalPlayers} l∆∞·ª£t ch∆°i",
          "index": 7666
        },
        {
          "kind": "JSXText",
          "text": "console.log('Quiz card clicked:', quiz.id, quiz.title)}\r\n            >\r\n              {quiz.isCompleted ? 'Ch∆°i l·∫°i' : 'Xem chi ti·∫øt'}",
          "index": 10362
        },
        {
          "kind": "JSXText",
          "text": "{/* **TH√äM M·ªöI**: Image Header */}",
          "index": 10853
        },
        {
          "kind": "JSXText",
          "text": "{/* **TH√äM M·ªöI**: Overlay badges */}",
          "index": 11993
        },
        {
          "kind": "JSXText",
          "text": "{quiz.difficulty === 'easy' ? 'üü¢ D·ªÖ' : quiz.difficulty === 'medium' ? 'üü° Trung b√¨nh' : 'üî¥ Kh√≥'}",
          "index": 12268
        },
        {
          "kind": "JSXText",
          "text": "üì¢ C√¥ng khai",
          "index": 12562
        },
        {
          "kind": "JSXText",
          "text": "{/* **TH√äM M·ªöI**: Favorite button in overlay */}",
          "index": 12641
        },
        {
          "kind": "JSXText",
          "text": "{/* **TH√äM M·ªöI**: Quiz metadata */}",
          "index": 15165
        },
        {
          "kind": "JSXText",
          "text": "{/* **TH√äM M·ªöI**: Completion status */}\r\n        {quiz.isCompleted && (",
          "index": 17292
        },
        {
          "kind": "JSXText",
          "text": "ƒê√£ ho√†n th√†nh: {quiz.score}%",
          "index": 17839
        },
        {
          "kind": "JSXText",
          "text": ")}\r\n\r\n        {/* **TH√äM M·ªöI**: Tags */}\r\n        {quiz.tags && quiz.tags.length > 0 && (",
          "index": 17892
        },
        {
          "kind": "JSXText",
          "text": "console.log('Quiz card clicked:', quiz.id, quiz.title)}\r\n          >\r\n            {quiz.isCompleted ? 'üîÑ Ch∆°i l·∫°i' : 'üöÄ B·∫Øt ƒë·∫ßu'}",
          "index": 19085
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ b·ªè y√™u th√≠ch quiz!",
          "index": 4056
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ th√™m v√†o y√™u th√≠ch!",
          "index": 4082
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói khi c·∫≠p nh·∫≠t y√™u th√≠ch!",
          "index": 4307
        },
        {
          "kind": "StringLiteral",
          "text": "B·ªè y√™u th√≠ch",
          "index": 9120
        },
        {
          "kind": "StringLiteral",
          "text": "Y√™u th√≠ch quiz n√†y",
          "index": 9137
        },
        {
          "kind": "StringLiteral",
          "text": "Xem ƒë√°nh gi√°",
          "index": 9990
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆°i l·∫°i",
          "index": 10470
        },
        {
          "kind": "StringLiteral",
          "text": "Xem chi ti·∫øt",
          "index": 10483
        },
        {
          "kind": "StringLiteral",
          "text": "üü¢ D·ªÖ",
          "index": 12313
        },
        {
          "kind": "StringLiteral",
          "text": "üü° Trung b√¨nh",
          "index": 12354
        },
        {
          "kind": "StringLiteral",
          "text": "üî¥ Kh√≥",
          "index": 12372
        },
        {
          "kind": "StringLiteral",
          "text": "B·ªè y√™u th√≠ch",
          "index": 13142
        },
        {
          "kind": "StringLiteral",
          "text": "Y√™u th√≠ch quiz n√†y",
          "index": 13159
        },
        {
          "kind": "StringLiteral",
          "text": "üîÑ Ch∆°i l·∫°i",
          "index": 19189
        },
        {
          "kind": "StringLiteral",
          "text": "üöÄ B·∫Øt ƒë·∫ßu",
          "index": 19205
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆°i c√πng b·∫°n b√®",
          "index": 19578
        },
        {
          "kind": "StringLiteral",
          "text": "Xem ƒë√°nh gi√°",
          "index": 20287
        }
      ]
    },
    {
      "file": "features\\quiz\\api\\user.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "=> {\r\n  try {\r\n    // Simple test query\r\n    const testQuery = query(\r\n      collection(db, QUIZZES_COLLECTION),\r\n      limit(1)\r\n    );\r\n    await getDocs(testQuery);\r\n    console.log('‚úÖ Firestore connection successful');\r\n    return true;\r\n  } catch (error: any) {\r\n    console.error('‚ùå Firestore connection failed:', error);\r\n    \r\n    if (error.code === 'unavailable' || error.message?.includes('ERR_BLOCKED_BY_CLIENT')) {\r\n      console.error('üö´ Firestore b·ªã ch·∫∑n b·ªüi ad blocker ho·∫∑c network. Vui l√≤ng:');\r\n      console.error('   1. T·∫Øt ad blocker cho localhost');\r\n      console.error('   2. Th√™m *.googleapis.com v√†o whitelist');\r\n      console.error('   3. Th·ª≠ ch·∫ø ƒë·ªô Incognito');\r\n    }\r\n    \r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get quizzes for USER role - can see published quizzes only\r\n */\r\nexport const getUserQuizzes = async (\r\n  filters?: QuizFilters, \r\n  pageSize = 20, \r\n  lastDoc?: DocumentSnapshot\r\n): Promise",
          "index": 1273
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n  try {\r\n    // Check Firestore connection first\r\n    const isConnected = await checkFirestoreConnection();\r\n    if (!isConnected) {\r\n      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi Firestore. Vui l√≤ng t·∫Øt ad blocker ho·∫∑c th·ª≠ ch·∫ø ƒë·ªô Incognito.');\r\n    }\r\n\r\n    console.log('üîç [USER] Fetching published quizzes for regular user');\r\n    \r\n    let q = query(collection(db, QUIZZES_COLLECTION));\r\n    q = query(q, orderBy('createdAt', 'desc'), limit(pageSize || 50));\r\n\r\n    if (lastDoc) {\r\n      q = query(q, startAfter(lastDoc));\r\n    }\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    const allQuizzes: Quiz[] = [];\r\n    let lastDocument: DocumentSnapshot | null = null;\r\n\r\n    console.log('üìù [USER] Found', querySnapshot.size, 'quiz documents');\r\n\r\n    querySnapshot.forEach((doc) => {\r\n      const quizData = doc.data();\r\n      const convertedData = convertTimestamps(quizData);\r\n      allQuizzes.push({\r\n        id: doc.id,\r\n        ...convertedData,\r\n      } as Quiz);\r\n      lastDocument = doc;\r\n    });\r\n\r\n    // Filter quizzes for regular user:\r\n    // Only approved AND published quizzes\r\n    const filteredQuizzes = allQuizzes.filter(quiz => {\r\n      const isApproved = quiz.status === 'approved';\r\n      const isPublished = quiz.isPublished === true;\r\n      \r\n      if (isApproved && isPublished) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n\r\n    console.log('‚úÖ [USER] Filtered quizzes:', {\r\n      total: allQuizzes.length,\r\n      userVisible: filteredQuizzes.length,\r\n      publishedQuizzes: filteredQuizzes.length\r\n    });\r\n\r\n    // Apply client-side filters\r\n    const finalQuizzes = applyQuizFilters(filteredQuizzes, filters);\r\n\r\n    console.log('‚úÖ [USER] Returning', finalQuizzes.length, 'quizzes after filters');\r\n\r\n    return {\r\n      quizzes: finalQuizzes,\r\n      lastDoc: lastDocument,\r\n      hasMore: querySnapshot.size === pageSize,\r\n    };\r\n  } catch (error) {\r\n    console.error('‚ùå [USER] Error fetching quizzes:', error);\r\n    throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch quiz');\r\n  }\r\n};\r\n\r\n/**\r\n * Get quizzes for anonymous (not logged in) users\r\n */\r\nexport const getAnonymousQuizzes = async (\r\n  filters?: QuizFilters, \r\n  pageSize = 20, \r\n  lastDoc?: DocumentSnapshot\r\n): Promise",
          "index": 2291
        },
        {
          "kind": "StringLiteral",
          "text": "üö´ Firestore b·ªã ch·∫∑n b·ªüi ad blocker ho·∫∑c network. Vui l√≤ng:",
          "index": 1723
        },
        {
          "kind": "StringLiteral",
          "text": "   1. T·∫Øt ad blocker cho localhost",
          "index": 1808
        },
        {
          "kind": "StringLiteral",
          "text": "   2. Th√™m *.googleapis.com v√†o whitelist",
          "index": 1868
        },
        {
          "kind": "StringLiteral",
          "text": "   3. Th·ª≠ ch·∫ø ƒë·ªô Incognito",
          "index": 1935
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ k·∫øt n·ªëi Firestore. Vui l√≤ng t·∫Øt ad blocker ho·∫∑c th·ª≠ ch·∫ø ƒë·ªô Incognito.",
          "index": 2455
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i danh s√°ch quiz",
          "index": 4301
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ k·∫øt n·ªëi Firestore. Vui l√≤ng t·∫Øt ad blocker ho·∫∑c th·ª≠ ch·∫ø ƒë·ªô Incognito.",
          "index": 4785
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i danh s√°ch quiz",
          "index": 6804
        }
      ]
    },
    {
      "file": "features\\quiz\\api\\shared.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "=> {\r\n  try {\r\n    const q = query(\r\n      collection(db, QUIZ_RESULTS_COLLECTION),\r\n      where('userId', '==', userId),\r\n      orderBy('completedAt', 'desc')\r\n    );\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    const results: QuizResult[] = [];\r\n\r\n    querySnapshot.forEach((doc) => {\r\n      const data = doc.data();\r\n      console.log('üîç Raw Firestore data for result:', doc.id, data);\r\n      \r\n      let result = {\r\n        id: doc.id,\r\n        ...data,\r\n        completedAt: data.completedAt?.toDate\r\n          ? data.completedAt.toDate().toISOString()\r\n          : (data.completedAt instanceof Date\r\n              ? data.completedAt.toISOString()\r\n              : typeof data.completedAt === 'string'\r\n                ? data.completedAt\r\n                : ''),\r\n      } as any;\r\n\r\n      // Validate and fix score data for legacy results\r\n      const hasValidCorrectAnswers = typeof result.correctAnswers === 'number';\r\n      const hasValidTotalQuestions = typeof result.totalQuestions === 'number' && result.totalQuestions > 0;\r\n      const hasValidScore = typeof result.score === 'number' && !isNaN(result.score);\r\n\r\n      // If missing critical fields but has answers, compute them\r\n      if ((!hasValidCorrectAnswers || !hasValidTotalQuestions) && Array.isArray(result.answers) && result.answers.length > 0) {\r\n        const computedCorrect = result.answers.filter((a: any) => a && a.isCorrect === true).length;\r\n        const computedTotal = result.answers.length;\r\n        \r\n        if (!hasValidCorrectAnswers) {\r\n          result.correctAnswers = computedCorrect;\r\n        }\r\n        if (!hasValidTotalQuestions) {\r\n          result.totalQuestions = computedTotal;\r\n        }\r\n        \r\n        // Recompute score if missing or zero\r\n        if (!hasValidScore || result.score === 0) {\r\n          result.score = result.totalQuestions > 0 ? Math.round((result.correctAnswers / result.totalQuestions) * 100) : 0;\r\n        }\r\n        \r\n        console.log('üõ†Ô∏è Hydrated legacy result:', { \r\n          id: result.id, \r\n          correctAnswers: result.correctAnswers, \r\n          totalQuestions: result.totalQuestions, \r\n          score: result.score,\r\n          computedFromAnswers: true\r\n        });\r\n      }\r\n\r\n      results.push(result as QuizResult);\r\n    });\r\n\r\n    return results;\r\n  } catch (error) {\r\n    console.error('Error fetching user quiz results:', error);\r\n    throw new Error('Kh√¥ng th·ªÉ t·∫£i k·∫øt qu·∫£ quiz');\r\n  }\r\n};\r\n\r\n/**\r\n * Get quiz categories (from existing quizzes)\r\n */\r\nexport const getQuizCategories = async (): Promise",
          "index": 405
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n  try {\r\n    // This would require aggregation queries or a separate collection\r\n    // For now, we'll get recent quizzes as a placeholder\r\n    const q = query(\r\n      collection(db, QUIZZES_COLLECTION),\r\n      where('isPublished', '==', true),\r\n      orderBy('createdAt', 'desc'),\r\n      limit(limitCount)\r\n    );\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    const quizzes: Quiz[] = [];\r\n\r\n    querySnapshot.forEach((doc) => {\r\n      quizzes.push({ id: doc.id, ...doc.data() } as Quiz);\r\n    });\r\n\r\n    return quizzes;\r\n  } catch (error) {\r\n    console.error('Error fetching popular quizzes:', error);\r\n    throw new Error('Kh√¥ng th·ªÉ t·∫£i quiz ph·ªï bi·∫øn');\r\n  }\r\n};\r\n\r\n/**\r\n * Search quizzes by title or description\r\n */\r\nexport const searchQuizzes = async (searchTerm: string, limitCount = 20): Promise",
          "index": 3583
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i k·∫øt qu·∫£ quiz",
          "index": 2818
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i quiz ph·ªï bi·∫øn",
          "index": 4222
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t√¨m ki·∫øm quiz",
          "index": 5317
        }
      ]
    },
    {
      "file": "features\\quiz\\api\\creator.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "=> {\r\n  try {\r\n    console.log('üîç [CREATOR] Fetching quizzes for creator:', userId);\r\n    \r\n    let q = query(collection(db, QUIZZES_COLLECTION));\r\n    q = query(q, orderBy('createdAt', 'desc'), limit(pageSize || 50));\r\n\r\n    if (lastDoc) {\r\n      q = query(q, startAfter(lastDoc));\r\n    }\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    const allQuizzes: Quiz[] = [];\r\n    let lastDocument: DocumentSnapshot | null = null;\r\n\r\n    console.log('üìù [CREATOR] Found', querySnapshot.size, 'quiz documents');\r\n\r\n    querySnapshot.forEach((doc) => {\r\n      const quizData = doc.data();\r\n      const convertedData = convertTimestamps(quizData);\r\n      allQuizzes.push({ id: doc.id, ...convertedData } as Quiz);\r\n      lastDocument = doc;\r\n    });\r\n\r\n    // Filter quizzes for creator:\r\n    // 1. Own quizzes (regardless of status)\r\n    // 2. Other's approved and published quizzes\r\n    const filteredQuizzes = allQuizzes.filter(quiz => {\r\n      // Own quiz - always show\r\n      if (quiz.createdBy === userId) {\r\n        console.log('üìù [CREATOR] Own quiz:', quiz.title, 'Status:', quiz.status);\r\n        return true;\r\n      }\r\n      \r\n      // Other's quiz - must be approved and published\r\n      if (quiz.status === 'approved' && quiz.isPublished === true) {\r\n        console.log('üìù [CREATOR] Approved quiz:', quiz.title);\r\n        return true;\r\n      }\r\n      \r\n      console.log('üìù [CREATOR] Filtered out quiz:', quiz.title, 'Status:', quiz.status, 'Published:', quiz.isPublished);\r\n      return false;\r\n    });\r\n\r\n    console.log('‚úÖ [CREATOR] Filtered quizzes:', {\r\n      total: allQuizzes.length,\r\n      creatorVisible: filteredQuizzes.length,\r\n      ownQuizzes: filteredQuizzes.filter(q => q.createdBy === userId).length,\r\n      approvedQuizzes: filteredQuizzes.filter(q => q.createdBy !== userId).length\r\n    });\r\n\r\n    // Apply client-side filters\r\n    const finalQuizzes = applyQuizFilters(filteredQuizzes, filters);\r\n\r\n    console.log('‚úÖ [CREATOR] Returning', finalQuizzes.length, 'quizzes after filters');\r\n\r\n    return {\r\n      quizzes: finalQuizzes,\r\n      lastDoc: lastDocument,\r\n      hasMore: querySnapshot.size === pageSize,\r\n    };\r\n  } catch (error) {\r\n    console.error('‚ùå [CREATOR] Error fetching quizzes:', error);\r\n    throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch quiz');\r\n  }\r\n};\r\n\r\n/**\r\n * Get quizzes created by a specific creator\r\n */\r\nexport const getCreatorOwnQuizzes = async (userId: string): Promise",
          "index": 1492
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i danh s√°ch quiz",
          "index": 3752
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i quiz c·ªßa ng∆∞·ªùi d√πng",
          "index": 4792
        }
      ]
    },
    {
      "file": "features\\quiz\\api\\base.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "= {\r\n      ...quizData,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n    };\r\n\r\n    const docRef = await addDoc(collection(db, QUIZZES_COLLECTION), quiz);\r\n    toast.success('T·∫°o quiz th√†nh c√¥ng!');\r\n    return docRef.id;\r\n  } catch (error) {\r\n    console.error('Error creating quiz:', error);\r\n    toast.error('Kh√¥ng th·ªÉ t·∫°o quiz');\r\n    throw new Error('Kh√¥ng th·ªÉ t·∫°o quiz');\r\n  }\r\n};\r\n\r\n/**\r\n * Update an existing quiz\r\n */\r\nexport const updateQuiz = async (quizId: string, updates: Partial",
          "index": 1714
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n  try {\r\n    const quizRef = doc(db, QUIZZES_COLLECTION, quizId);\r\n    await updateDoc(quizRef, {\r\n      ...updates,\r\n      updatedAt: new Date(),\r\n    });\r\n    toast.success('C·∫≠p nh·∫≠t quiz th√†nh c√¥ng!');\r\n  } catch (error) {\r\n    console.error('Error updating quiz:', error);\r\n    toast.error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t quiz');\r\n    throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t quiz');\r\n  }\r\n};\r\n\r\n/**\r\n * Delete a quiz\r\n */\r\nexport const deleteQuiz = async (quizId: string): Promise",
          "index": 2245
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n  try {\r\n    await deleteDoc(doc(db, QUIZZES_COLLECTION, quizId));\r\n    toast.success('X√≥a quiz th√†nh c√¥ng!');\r\n  } catch (error) {\r\n    console.error('Error deleting quiz:', error);\r\n    toast.error('Kh√¥ng th·ªÉ x√≥a quiz');\r\n    throw new Error('Kh√¥ng th·ªÉ x√≥a quiz');\r\n  }\r\n};\r\n\r\n/**\r\n * Get quiz by ID\r\n */\r\nexport const getQuizById = async (quizId: string): Promise",
          "index": 2726
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n  try {\r\n    const quizDoc = await getDoc(doc(db, QUIZZES_COLLECTION, quizId));\r\n    if (quizDoc.exists()) {\r\n      const data = quizDoc.data();\r\n      const convertedData = convertTimestamps(data);\r\n      return {\r\n        id: quizDoc.id,\r\n        ...convertedData,\r\n      } as Quiz;\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    console.error('Error fetching quiz:', error);\r\n    throw new Error('Kh√¥ng th·ªÉ t·∫£i quiz');\r\n  }\r\n};\r\n\r\n/**\r\n * Submit quiz result\r\n */\r\nexport const submitQuizResult = async (result: Omit",
          "index": 3112
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n  console.log('üîç [submitQuizResult] Input data:', result);\r\n  \r\n  // Enhanced validation for all required fields\r\n  const requiredFields = ['userId', 'quizId', 'score', 'correctAnswers', 'totalQuestions', 'answers', 'completedAt'];\r\n  const missingFields = requiredFields.filter(field => {\r\n    const value = (result as any)[field];\r\n    if (field === 'answers') return !Array.isArray(value);\r\n    if (field === 'completedAt') return !value;\r\n    if (['score', 'correctAnswers', 'totalQuestions'].includes(field)) {\r\n      return typeof value !== 'number' || isNaN(value);\r\n    }\r\n    return !value;\r\n  });\r\n\r\n  if (missingFields.length > 0) {\r\n    console.error('‚ùå [submitQuizResult] Missing required fields:', missingFields, result);\r\n    throw new Error(`Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: ${missingFields.join(', ')}`);\r\n  }\r\n\r\n  // Validate score range\r\n  if (result.score",
          "index": 3677
        },
        {
          "kind": "JSXText",
          "text": "100) {\r\n    console.error('‚ùå [submitQuizResult] Invalid score range:', result.score);\r\n    throw new Error('ƒêi·ªÉm s·ªë ph·∫£i trong kho·∫£ng 0-100');\r\n  }\r\n\r\n  // Validate correctAnswers vs totalQuestions\r\n  if (result.correctAnswers > result.totalQuestions) {\r\n    console.error('‚ùå [submitQuizResult] correctAnswers > totalQuestions:', { \r\n      correctAnswers: result.correctAnswers, \r\n      totalQuestions: result.totalQuestions \r\n    });\r\n    throw new Error('S·ªë c√¢u ƒë√∫ng kh√¥ng th·ªÉ l·ªõn h∆°n t·ªïng s·ªë c√¢u');\r\n  }\r\n\r\n  // Validate answers array has isCorrect field\r\n  const answersWithoutCorrect = result.answers.filter(a => typeof a.isCorrect !== 'boolean');\r\n  if (answersWithoutCorrect.length > 0) {\r\n    console.warn('‚ö†Ô∏è [submitQuizResult] Some answers missing isCorrect field:', answersWithoutCorrect.length);\r\n  }\r\n  \r\n  console.log('‚úÖ [submitQuizResult] All validations passed, saving to Firestore...');\r\n  console.log('üìä [submitQuizResult] Final data to save:', {\r\n    userId: result.userId,\r\n    quizId: result.quizId,\r\n    score: result.score,\r\n    correctAnswers: result.correctAnswers,\r\n    totalQuestions: result.totalQuestions,\r\n    answersCount: result.answers.length,\r\n    answersWithCorrect: result.answers.filter(a => a.isCorrect).length\r\n  });\r\n  \r\n  try {\r\n    const docRef = await addDoc(collection(db, QUIZ_RESULTS_COLLECTION), result);\r\n    console.log('‚úÖ [submitQuizResult] Successfully saved with ID:', docRef.id);\r\n    toast.success('N·ªôp b√†i th√†nh c√¥ng!');\r\n    return docRef.id;\r\n  } catch (error) {\r\n    console.error('‚ùå [submitQuizResult] Firestore error:', error);\r\n    console.error('‚ùå [submitQuizResult] Data that failed to save:', result);\r\n    toast.error('Kh√¥ng th·ªÉ l∆∞u k·∫øt qu·∫£ quiz');\r\n    throw new Error('Kh√¥ng th·ªÉ l∆∞u k·∫øt qu·∫£ quiz');\r\n  }\r\n};\r\n\r\n/**\r\n * Get quiz results for a specific quiz\r\n */\r\nexport const getQuizResults = async (quizId: string): Promise",
          "index": 4572
        },
        {
          "kind": "StringLiteral",
          "text": "T·∫°o quiz th√†nh c√¥ng!",
          "index": 1905
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫°o quiz",
          "index": 2042
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫°o quiz",
          "index": 2086
        },
        {
          "kind": "StringLiteral",
          "text": "C·∫≠p nh·∫≠t quiz th√†nh c√¥ng!",
          "index": 2428
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t quiz",
          "index": 2547
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t quiz",
          "index": 2596
        },
        {
          "kind": "StringLiteral",
          "text": "X√≥a quiz th√†nh c√¥ng!",
          "index": 2820
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ x√≥a quiz",
          "index": 2934
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ x√≥a quiz",
          "index": 2978
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i quiz",
          "index": 3523
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêi·ªÉm s·ªë ph·∫£i trong kho·∫£ng 0-100",
          "index": 4681
        },
        {
          "kind": "StringLiteral",
          "text": "S·ªë c√¢u ƒë√∫ng kh√¥ng th·ªÉ l·ªõn h∆°n t·ªïng s·ªë c√¢u",
          "index": 5030
        },
        {
          "kind": "StringLiteral",
          "text": "N·ªôp b√†i th√†nh c√¥ng!",
          "index": 6027
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ l∆∞u k·∫øt qu·∫£ quiz",
          "index": 6258
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ l∆∞u k·∫øt qu·∫£ quiz",
          "index": 6310
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i k·∫øt qu·∫£ quiz",
          "index": 8065
        }
      ]
    },
    {
      "file": "features\\quiz\\api\\admin.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "=> {\r\n  try {\r\n    console.log('üîç [ADMIN] Fetching ALL quizzes from Firestore...');\r\n    \r\n    let q = query(collection(db, QUIZZES_COLLECTION));\r\n    q = query(q, orderBy('createdAt', 'desc'), limit(pageSize || 50));\r\n\r\n    if (lastDoc) {\r\n      q = query(q, startAfter(lastDoc));\r\n    }\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    const quizzes: Quiz[] = [];\r\n    let lastDocument: DocumentSnapshot | null = null;\r\n\r\n    console.log('üìù [ADMIN] Found', querySnapshot.size, 'quiz documents');\r\n\r\n    querySnapshot.forEach((doc) => {\r\n      const quizData = doc.data();\r\n      const convertedData = convertTimestamps(quizData);\r\n      console.log('üìù [ADMIN] Quiz data:', doc.id, {\r\n        title: convertedData.title,\r\n        status: convertedData.status,\r\n        isPublished: convertedData.isPublished,\r\n        createdBy: convertedData.createdBy\r\n      });\r\n      quizzes.push({\r\n        id: doc.id,\r\n        ...convertedData,\r\n      } as Quiz);\r\n      lastDocument = doc;\r\n    });\r\n\r\n    console.log('‚úÖ [ADMIN] Total quizzes before filtering:', quizzes.length);\r\n\r\n    // Admin sees ALL quizzes - no role-based filtering\r\n    let filteredQuizzes = quizzes;\r\n\r\n    // Apply client-side filters only\r\n    filteredQuizzes = applyQuizFilters(filteredQuizzes, filters);\r\n\r\n    console.log('‚úÖ [ADMIN] Returning', filteredQuizzes.length, 'filtered quizzes');\r\n\r\n    return {\r\n      quizzes: filteredQuizzes,\r\n      lastDoc: lastDocument,\r\n      hasMore: querySnapshot.size === pageSize,\r\n    };\r\n  } catch (error) {\r\n    console.error('‚ùå [ADMIN] Error fetching quizzes:', error);\r\n    throw new Error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch quiz');\r\n  }\r\n};\r\n\r\n/**\r\n * Get quizzes created by a specific user (Admin function)\r\n */\r\nexport const getUserQuizzesAdmin = async (userId: string): Promise",
          "index": 1537
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i danh s√°ch quiz",
          "index": 3148
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i quiz c·ªßa ng∆∞·ªùi d√πng",
          "index": 4077
        }
      ]
    },
    {
      "file": "features\\multiplayer\\components\\MultiplayerTestComponent.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "navigate('/multiplayer')}\r\n              className=\"px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors\"\r\n            >\r\n              Xem ph√≤ng",
          "index": 1036
        },
        {
          "kind": "JSXText",
          "text": "alert('H∆∞·ªõng d·∫´n multiplayer:\\n1. T·∫°o ho·∫∑c tham gia ph√≤ng\\n2. Ch·ªù host b·∫Øt ƒë·∫ßu\\n3. Tr·∫£ l·ªùi c√¢u h·ªèi nhanh ƒë·ªÉ ƒë∆∞·ª£c ƒëi·ªÉm cao\\n4. Xem k·∫øt qu·∫£ cu·ªëi game')}\r\n            >\r\n              Xem h∆∞·ªõng d·∫´n",
          "index": 2383
        },
        {
          "kind": "StringLiteral",
          "text": "H∆∞·ªõng d·∫´n multiplayer:\\n1. T·∫°o ho·∫∑c tham gia ph√≤ng\\n2. Ch·ªù host b·∫Øt ƒë·∫ßu\\n3. Tr·∫£ l·ªùi c√¢u h·ªèi nhanh ƒë·ªÉ ƒë∆∞·ª£c ƒëi·ªÉm cao\\n4. Xem k·∫øt qu·∫£ cu·ªëi game",
          "index": 2391
        }
      ]
    },
    {
      "file": "features\\multiplayer\\components\\CreateRoomModal.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "2 ng∆∞·ªùi",
          "index": 3356
        },
        {
          "kind": "JSXText",
          "text": "4 ng∆∞·ªùi",
          "index": 3406
        },
        {
          "kind": "JSXText",
          "text": "6 ng∆∞·ªùi",
          "index": 3456
        },
        {
          "kind": "JSXText",
          "text": "8 ng∆∞·ªùi",
          "index": 3506
        },
        {
          "kind": "JSXText",
          "text": "10 ng∆∞·ªùi",
          "index": 3557
        },
        {
          "kind": "JSXText",
          "text": "15 gi√¢y",
          "index": 4177
        },
        {
          "kind": "JSXText",
          "text": "20 gi√¢y",
          "index": 4228
        },
        {
          "kind": "JSXText",
          "text": "30 gi√¢y",
          "index": 4279
        },
        {
          "kind": "JSXText",
          "text": "45 gi√¢y",
          "index": 4330
        },
        {
          "kind": "JSXText",
          "text": "60 gi√¢y",
          "index": 4381
        },
        {
          "kind": "JSXText",
          "text": "{selectedQuiz.questions?.length || 0} c√¢u h·ªèi",
          "index": 7099
        }
      ]
    },
    {
      "file": "features\\admin\\pages\\StatsDashboard.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "Th·ªëng k√™ Admin",
          "index": 740
        },
        {
          "kind": "JSXText",
          "text": "‚Üê V·ªÅ Admin Dashboard",
          "index": 1060
        },
        {
          "kind": "JSXText",
          "text": "Th√†nh c√¥ng! B·∫°n ƒëang xem trang th·ªëng k√™ v·ªõi bi·ªÉu ƒë·ªì",
          "index": 1545
        },
        {
          "kind": "JSXText",
          "text": "Trang n√†y hi·ªÉn th·ªã:",
          "index": 1709
        },
        {
          "kind": "JSXText",
          "text": "üìä Bi·ªÉu ƒë·ªì c·ªôt - Danh m·ª•c ph·ªï bi·∫øn",
          "index": 1813
        },
        {
          "kind": "JSXText",
          "text": "ü•ß Bi·ªÉu ƒë·ªì tr√≤n - T·ª∑ l·ªá quiz ƒë√£ duy·ªát/ch·ªù duy·ªát",
          "index": 1874
        },
        {
          "kind": "JSXText",
          "text": "üìà 8 Cards th·ªëng k√™ chi ti·∫øt",
          "index": 1948
        },
        {
          "kind": "JSXText",
          "text": "üéØ D·ªØ li·ªáu m·∫´u ƒë·ªÉ demo",
          "index": 2003
        }
      ]
    },
    {
      "file": "features\\admin\\pages\\CreatorManagement.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "(null);\r\n  const [showCreatorModal, setShowCreatorModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadCreators();\r\n    loadStats();\r\n  }, []);\r\n\r\n  const loadCreators = async () => {\r\n    setLoading(true);\r\n    try {\r\n      console.log('Loading creators...');\r\n      \r\n      // Load users with creator role\r\n      const usersQuery = query(\r\n        collection(db, 'users'),\r\n        where('role', 'in', ['creator', 'admin']),\r\n        orderBy('createdAt', 'desc')\r\n      );\r\n      \r\n      const usersSnapshot = await getDocs(usersQuery);\r\n      console.log('Found users:', usersSnapshot.docs.length);\r\n      const loadedCreators: Creator[] = [];\r\n\r\n      for (const userDoc of usersSnapshot.docs) {\r\n        const userData = userDoc.data();\r\n        \r\n        try {\r\n          // Count quizzes created by this user\r\n          const quizzesQuery = query(\r\n            collection(db, 'quizzes'),\r\n            where('createdBy', '==', userDoc.id)\r\n          );\r\n          const quizzesSnapshot = await getCountFromServer(quizzesQuery);\r\n          const quizCount = quizzesSnapshot.data().count;\r\n\r\n          // Get quiz IDs for this creator\r\n          const quizIds = await getQuizIdsByCreator(userDoc.id);\r\n          \r\n          // Count total plays (quiz results) - only if there are quizzes\r\n          let totalPlays = 0;\r\n          if (quizIds.length > 0) {\r\n            const resultsQuery = query(\r\n              collection(db, 'quizResults'),\r\n              where('quizId', 'in', quizIds.slice(0, 10)) // Limit to avoid Firestore 'in' constraint\r\n            );\r\n            const resultsSnapshot = await getCountFromServer(resultsQuery);\r\n            totalPlays = resultsSnapshot.data().count;\r\n          }\r\n\r\n          loadedCreators.push({\r\n            id: userDoc.id,\r\n            displayName: userData.displayName || userData.email || 'Ng∆∞·ªùi d√πng',\r\n            email: userData.email || '',\r\n            role: userData.role || 'creator',\r\n            isActive: userData.isActive !== false,\r\n            createdAt: userData.createdAt?.toDate() || new Date(),\r\n            lastLoginAt: userData.lastLoginAt?.toDate(),\r\n            quizCount,\r\n            totalPlays,\r\n            avgRating: 4.2 + Math.random() * 0.8, // Mock rating\r\n            status: userData.status || 'active',\r\n            permissions: userData.permissions || {\r\n              canCreateQuiz: true,\r\n              canEditOwnQuiz: true,\r\n              canDeleteOwnQuiz: true,\r\n              canViewAnalytics: true\r\n            }\r\n          });\r\n        } catch (userError) {\r\n          console.warn(`Error loading data for user ${userDoc.id}:`, userError);\r\n          // Add user with minimal data if there's an error\r\n          loadedCreators.push({\r\n            id: userDoc.id,\r\n            displayName: userData.displayName || userData.email || 'Ng∆∞·ªùi d√πng',\r\n            email: userData.email || '',\r\n            role: userData.role || 'creator',\r\n            isActive: userData.isActive !== false,\r\n            createdAt: userData.createdAt?.toDate() || new Date(),\r\n            lastLoginAt: userData.lastLoginAt?.toDate(),\r\n            quizCount: 0,\r\n            totalPlays: 0,\r\n            avgRating: 0,\r\n            status: userData.status || 'active',\r\n            permissions: userData.permissions || {\r\n              canCreateQuiz: true,\r\n              canEditOwnQuiz: true,\r\n              canDeleteOwnQuiz: true,\r\n              canViewAnalytics: true\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      console.log('Loaded creators:', loadedCreators.length);\r\n      setCreators(loadedCreators);\r\n      \r\n      // Show empty state if no real creators found\r\n      if (loadedCreators.length === 0) {\r\n        console.log('No real creators found');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading creators:', error);\r\n      toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch creator');\r\n      setCreators([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getQuizIdsByCreator = async (creatorId: string): Promise",
          "index": 1803
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n    try {\r\n      const quizzesQuery = query(\r\n        collection(db, 'quizzes'),\r\n        where('createdBy', '==', creatorId)\r\n      );\r\n      const snapshot = await getDocs(quizzesQuery);\r\n      return snapshot.docs.map(doc => doc.id);\r\n    } catch (error) {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const loadStats = async () => {\r\n    try {\r\n      const usersQuery = query(\r\n        collection(db, 'users'),\r\n        where('role', 'in', ['creator', 'admin'])\r\n      );\r\n      const usersSnapshot = await getDocs(usersQuery);\r\n      \r\n      const allCreators = usersSnapshot.docs.map(doc => doc.data());\r\n      const totalCreators = allCreators.length;\r\n      const activeCreators = allCreators.filter(u => u.status !== 'banned' && u.status !== 'suspended').length;\r\n      const suspendedCreators = allCreators.filter(u => u.status === 'suspended').length;\r\n      const bannedCreators = allCreators.filter(u => u.status === 'banned').length;\r\n\r\n      // Count total quizzes\r\n      const quizzesSnapshot = await getCountFromServer(collection(db, 'quizzes'));\r\n      const totalQuizzes = quizzesSnapshot.data().count;\r\n\r\n      setStats({\r\n        totalCreators,\r\n        activeCreators,\r\n        suspendedCreators,\r\n        bannedCreators,\r\n        totalQuizzes,\r\n        thisMonth: Math.floor(totalQuizzes * 0.3) // Mock this month data\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading stats:', error);\r\n      // Set empty stats on error\r\n      setStats({\r\n        totalCreators: 0,\r\n        activeCreators: 0,\r\n        suspendedCreators: 0,\r\n        bannedCreators: 0,\r\n        totalQuizzes: 0,\r\n        thisMonth: 0\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleStatusChange = async (creatorId: string, newStatus: 'active' | 'suspended' | 'banned') => {\r\n    try {\r\n      await updateDoc(doc(db, 'users', creatorId), {\r\n        status: newStatus,\r\n        isActive: newStatus === 'active'\r\n      });\r\n\r\n      setCreators(creators.map(creator =>\r\n        creator.id === creatorId\r\n          ? { ...creator, status: newStatus, isActive: newStatus === 'active' }\r\n          : creator\r\n      ));\r\n\r\n      toast.success(`ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng`);\r\n    } catch (error) {\r\n      console.error('Error updating status:', error);\r\n      toast.error('C√≥ l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i');\r\n    }\r\n  };\r\n\r\n  const handleDeleteCreator = async (creatorId: string) => {\r\n    if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a creator n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await deleteDoc(doc(db, 'users', creatorId));\r\n      setCreators(creators.filter(creator => creator.id !== creatorId));\r\n      toast.success('ƒê√£ x√≥a creator th√†nh c√¥ng');\r\n    } catch (error) {\r\n      console.error('Error deleting creator:', error);\r\n      toast.error('C√≥ l·ªói khi x√≥a creator');\r\n    }\r\n  };\r\n\r\n  const filteredCreators = creators.filter(creator => {\r\n    const matchesSearch = creator.displayName.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         creator.email.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesStatus = statusFilter === 'all' || creator.status === statusFilter;\r\n    return matchesSearch && matchesStatus;\r\n  });\r\n\r\n  const renderStatsCard = (icon: React.ReactNode, title: string, value: number, color: string) => (",
          "index": 5851
        },
        {
          "kind": "JSXText",
          "text": ");\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    const styles = {\r\n      active: 'bg-green-100 text-green-800',\r\n      suspended: 'bg-yellow-100 text-yellow-800',\r\n      banned: 'bg-red-100 text-red-800'\r\n    };\r\n\r\n    const labels = {\r\n      active: 'Ho·∫°t ƒë·ªông',\r\n      suspended: 'T·∫°m kh√≥a',\r\n      banned: 'B·ªã c·∫•m'\r\n    };\r\n\r\n    return (",
          "index": 9602
        },
        {
          "kind": "JSXText",
          "text": "B·∫°n c·∫ßn quy·ªÅn admin ƒë·ªÉ truy c·∫≠p trang n√†y",
          "index": 10535
        },
        {
          "kind": "JSXText",
          "text": "Qu·∫£n l√Ω Creator",
          "index": 10870
        },
        {
          "kind": "JSXText",
          "text": "Qu·∫£n l√Ω v√† theo d√µi ho·∫°t ƒë·ªông c·ªßa c√°c creator",
          "index": 10936
        },
        {
          "kind": "JSXText",
          "text": ",\r\n              'T·ªïng Creator',\r\n              stats.totalCreators,\r\n              'bg-blue-500'\r\n            )}\r\n            {renderStatsCard(",
          "index": 11227
        },
        {
          "kind": "JSXText",
          "text": ",\r\n              'ƒêang ho·∫°t ƒë·ªông',\r\n              stats.activeCreators,\r\n              'bg-green-500'\r\n            )}\r\n            {renderStatsCard(",
          "index": 11431
        },
        {
          "kind": "JSXText",
          "text": ",\r\n              'T·∫°m kh√≥a',\r\n              stats.suspendedCreators,\r\n              'bg-yellow-500'\r\n            )}\r\n            {renderStatsCard(",
          "index": 11639
        },
        {
          "kind": "JSXText",
          "text": ",\r\n              'B·ªã c·∫•m',\r\n              stats.bannedCreators,\r\n              'bg-red-500'\r\n            )}",
          "index": 11841
        },
        {
          "kind": "JSXText",
          "text": "T·∫•t c·∫£ tr·∫°ng th√°i",
          "index": 13151
        },
        {
          "kind": "JSXText",
          "text": "T·∫°m kh√≥a",
          "index": 13298
        },
        {
          "kind": "JSXText",
          "text": "B·ªã c·∫•m",
          "index": 13356
        },
        {
          "kind": "JSXText",
          "text": "Hi·ªÉn th·ªã {filteredCreators.length} trong t·ªïng {creators.length} creator",
          "index": 13471
        },
        {
          "kind": "JSXText",
          "text": "ƒêang t·∫£i danh s√°ch creator...",
          "index": 13973
        },
        {
          "kind": "JSXText",
          "text": "Kh√¥ng c√≥ creator n√†o",
          "index": 14267
        },
        {
          "kind": "JSXText",
          "text": "Kh√¥ng t√¨m th·∫•y creator ph√π h·ª£p v·ªõi b·ªô l·ªçc",
          "index": 14337
        },
        {
          "kind": "JSXText",
          "text": "ƒê√°nh gi√°",
          "index": 15401
        },
        {
          "kind": "JSXText",
          "text": "Ho·∫°t ƒë·ªông cu·ªëi",
          "index": 15577
        },
        {
          "kind": "JSXText",
          "text": ") : (\r\n                          'Ch∆∞a ƒëƒÉng nh·∫≠p'\r\n                        )}",
          "index": 18682
        },
        {
          "kind": "JSXText",
          "text": "Chi ti·∫øt Creator",
          "index": 21331
        },
        {
          "kind": "JSXText",
          "text": "setShowCreatorModal(false)}\r\n                    className=\"text-gray-400 hover:text-gray-600\"\r\n                  >\r\n                    √ó",
          "index": 21457
        },
        {
          "kind": "JSXText",
          "text": "Quiz ƒë√£ t·∫°o",
          "index": 23084
        },
        {
          "kind": "JSXText",
          "text": "ƒê√°nh gi√° TB",
          "index": 23847
        },
        {
          "kind": "JSXText",
          "text": "Quy·ªÅn h·∫°n",
          "index": 24012
        },
        {
          "kind": "JSXText",
          "text": "T·∫°o quiz",
          "index": 24216
        },
        {
          "kind": "JSXText",
          "text": "{selectedCreator.permissions.canCreateQuiz ? 'C√≥' : 'Kh√¥ng'}",
          "index": 24522
        },
        {
          "kind": "JSXText",
          "text": "{selectedCreator.permissions.canEditOwnQuiz ? 'C√≥' : 'Kh√¥ng'}",
          "index": 25154
        },
        {
          "kind": "JSXText",
          "text": "X√≥a quiz",
          "index": 25447
        },
        {
          "kind": "JSXText",
          "text": "{selectedCreator.permissions.canDeleteOwnQuiz ? 'C√≥' : 'Kh√¥ng'}",
          "index": 25756
        },
        {
          "kind": "JSXText",
          "text": "{selectedCreator.permissions.canViewAnalytics ? 'C√≥' : 'Kh√¥ng'}",
          "index": 26365
        },
        {
          "kind": "StringLiteral",
          "text": "Ng∆∞·ªùi d√πng",
          "index": 3653
        },
        {
          "kind": "StringLiteral",
          "text": "Ng∆∞·ªùi d√πng",
          "index": 4635
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i danh s√°ch creator",
          "index": 5659
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i",
          "index": 8123
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a creator n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.",
          "index": 8253
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ x√≥a creator th√†nh c√¥ng",
          "index": 8515
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói khi x√≥a creator",
          "index": 8643
        },
        {
          "kind": "StringLiteral",
          "text": "Ho·∫°t ƒë·ªông",
          "index": 9867
        },
        {
          "kind": "StringLiteral",
          "text": "T·∫°m kh√≥a",
          "index": 9898
        },
        {
          "kind": "StringLiteral",
          "text": "B·ªã c·∫•m",
          "index": 9925
        },
        {
          "kind": "StringLiteral",
          "text": "T·ªïng Creator",
          "index": 11245
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang ho·∫°t ƒë·ªông",
          "index": 11449
        },
        {
          "kind": "StringLiteral",
          "text": "T·∫°m kh√≥a",
          "index": 11657
        },
        {
          "kind": "StringLiteral",
          "text": "B·ªã c·∫•m",
          "index": 11859
        },
        {
          "kind": "StringLiteral",
          "text": "T√¨m ki·∫øm creator...",
          "index": 12509
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆∞a ƒëƒÉng nh·∫≠p",
          "index": 18742
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥",
          "index": 24596
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng",
          "index": 24603
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥",
          "index": 25229
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng",
          "index": 25236
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥",
          "index": 25833
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng",
          "index": 25840
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥",
          "index": 26442
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng",
          "index": 26449
        }
      ]
    },
    {
      "file": "features\\admin\\pages\\CategoryManagement.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "(null);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  \r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    description: '',\r\n    icon: 'üìö',\r\n    color: 'blue'\r\n  });\r\n\r\n  const colors = [\r\n    { value: 'blue', label: t('categories.colors.blue'), class: 'bg-blue-500' },\r\n    { value: 'green', label: t('categories.colors.green'), class: 'bg-green-500' },\r\n    { value: 'purple', label: t('categories.colors.purple'), class: 'bg-purple-500' },\r\n    { value: 'red', label: t('categories.colors.red'), class: 'bg-red-500' },\r\n    { value: 'yellow', label: t('categories.colors.yellow'), class: 'bg-yellow-500' },\r\n    { value: 'pink', label: t('categories.colors.pink'), class: 'bg-pink-500' },\r\n    { value: 'indigo', label: t('categories.colors.indigo'), class: 'bg-indigo-500' },\r\n    { value: 'gray', label: t('categories.colors.gray'), class: 'bg-gray-500' }\r\n  ];\r\n\r\n  const icons = ['üìö', 'üî¨', 'üíª', 'üé®', 'üìä', 'üåç', 'üèÉ‚Äç‚ôÇÔ∏è', 'üéµ', 'üç≥', 'üìà', 'üßÆ', 'üìù'];\r\n\r\n  // Ki·ªÉm tra quy·ªÅn admin\r\n  if (!user || user.role !== 'admin') {\r\n    return (",
          "index": 1206
        },
        {
          "kind": "JSXText",
          "text": ");\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadCategories();\r\n  }, []);\r\n\r\n  const loadCategories = async () => {\r\n    try {\r\n      setLoading(true);\r\n      console.log('üîç Loading categories from Firebase...');\r\n      \r\n      // Initialize default categories if none exist\r\n      await initializeCategories();\r\n      \r\n      const categoriesRef = collection(db, 'categories');\r\n      const snapshot = await getDocs(categoriesRef);\r\n      \r\n      console.log('üìä Found categories in DB:', snapshot.size);\r\n      const loadedCategories: Category[] = [];\r\n      \r\n      for (const doc of snapshot.docs) {\r\n        const data = doc.data();\r\n        console.log('üìù Category data:', { id: doc.id, ...data });\r\n        \r\n        // ƒê·∫øm s·ªë quiz trong danh m·ª•c n√†y\r\n        const quizzesRef = collection(db, 'quizzes');\r\n        const quizzesSnapshot = await getDocs(query(quizzesRef, where('category', '==', data.name)));\r\n        \r\n        loadedCategories.push({\r\n          id: doc.id,\r\n          name: data.name,\r\n          description: data.description,\r\n          icon: data.icon,\r\n          color: data.color,\r\n          createdAt: data.createdAt?.toDate() || new Date(),\r\n          quizCount: quizzesSnapshot.size\r\n        });\r\n      }\r\n      \r\n      console.log('‚úÖ Loaded categories:', loadedCategories);\r\n      setCategories(loadedCategories.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime()));\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading categories:', error);\r\n      toast.error(t('categories.loadError'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!formData.name.trim()) {\r\n      toast.error(t('categories.enterName'));\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (editingCategory) {\r\n        // Update existing category\r\n        const categoryRef = doc(db, 'categories', editingCategory.id);\r\n        await updateDoc(categoryRef, {\r\n          name: formData.name.trim(),\r\n          description: formData.description.trim(),\r\n          icon: formData.icon,\r\n          color: formData.color,\r\n          updatedAt: new Date()\r\n        });\r\n        \r\n        setCategories(prev => prev.map(cat => \r\n          cat.id === editingCategory.id \r\n            ? { ...cat, ...formData, name: formData.name.trim(), description: formData.description.trim() }\r\n            : cat\r\n        ));\r\n        \r\n        toast.success(t('categories.updateSuccess'));\r\n      } else {\r\n        // Add new category\r\n        const docRef = await addDoc(collection(db, 'categories'), {\r\n          name: formData.name.trim(),\r\n          description: formData.description.trim(),\r\n          icon: formData.icon,\r\n          color: formData.color,\r\n          createdAt: new Date()\r\n        });\r\n        \r\n        const newCategory: Category = {\r\n          id: docRef.id,\r\n          name: formData.name.trim(),\r\n          description: formData.description.trim(),\r\n          icon: formData.icon,\r\n          color: formData.color,\r\n          createdAt: new Date(),\r\n          quizCount: 0\r\n        };\r\n        \r\n        setCategories(prev => [newCategory, ...prev]);\r\n        toast.success(t('categories.addSuccess'));\r\n      }\r\n      \r\n      // Reset form\r\n      setFormData({ name: '', description: '', icon: 'üìö', color: 'blue' });\r\n      setShowAddForm(false);\r\n      setEditingCategory(null);\r\n    } catch (error) {\r\n      console.error('Error saving category:', error);\r\n      toast.error(t('categories.saveError'));\r\n    }\r\n  };\r\n\r\n  const handleEdit = (category: Category) => {\r\n    setEditingCategory(category);\r\n    setFormData({\r\n      name: category.name,\r\n      description: category.description,\r\n      icon: category.icon,\r\n      color: category.color\r\n    });\r\n    setShowAddForm(true);\r\n  };\r\n\r\n  const handleDelete = async (categoryId: string, categoryName: string) => {\r\n    if (!confirm(t('categories.confirmDeleteName', {name: categoryName, defaultValue: `Are you sure you want to delete category \"${categoryName}\"?`}))) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await deleteDoc(doc(db, 'categories', categoryId));\r\n      setCategories(prev => prev.filter(cat => cat.id !== categoryId));\r\n      toast.success(t('categories.deleteSuccess'));\r\n    } catch (error) {\r\n      console.error('Error deleting category:', error);\r\n      toast.error(t('categories.deleteError'));\r\n    }\r\n  };\r\n\r\n  const filteredCategories = categories.filter(category =>\r\n    category.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    category.description.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  const getColorClass = (color: string) => {\r\n    const colorMap: { [key: string]: string } = {\r\n      blue: 'bg-blue-500',\r\n      green: 'bg-green-500',\r\n      purple: 'bg-purple-500',\r\n      red: 'bg-red-500',\r\n      yellow: 'bg-yellow-500',\r\n      pink: 'bg-pink-500',\r\n      indigo: 'bg-indigo-500',\r\n      gray: 'bg-gray-500'\r\n    };\r\n    return colorMap[color] || 'bg-blue-500';\r\n  };\r\n\r\n  if (loading) {\r\n    return (",
          "index": 2809
        }
      ]
    },
    {
      "file": "features\\admin\\pages\\AdminUserManagement.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "setConfirmModal({ open: true, type: 'roleChange', payload: { userId: userData.id, newRole: e.target.value }, message: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·ªïi quy·ªÅn cho ng∆∞·ªùi d√πng n√†y th√†nh ${e.target.value}?` })}\r\n                    disabled={userData.id === user?.uid}\r\n                    className=\"text-sm border border-gray-300 rounded px-2 py-1\"\r\n                  >",
          "index": 9452
        },
        {
          "kind": "JSXText",
          "text": "setConfirmModal({ open: true, type: 'toggleUserStatus', payload: { userId: userData.id, currentStatus: userData.isActive !== false }, message: userData.isActive !== false ? 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën kh√≥a t√†i kho·∫£n n√†y?' : 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën k√≠ch ho·∫°t t√†i kho·∫£n n√†y?' })}\r\n                          className={`px-3 py-1 rounded text-xs ${userData.isActive !== false ? 'bg-red-600 text-white hover:bg-red-700' : 'bg-green-600 text-white hover:bg-green-700'}`}\r\n                          disabled={loading}\r\n                        >\r\n                          {userData.isActive !== false ? t('action.deactivate') : t('action.activate')}",
          "index": 11067
        },
        {
          "kind": "JSXText",
          "text": "{/* Modal x√°c nh·∫≠n thao t√°c */}",
          "index": 12382
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën kh√≥a t√†i kho·∫£n n√†y?",
          "index": 11242
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën k√≠ch ho·∫°t t√†i kho·∫£n n√†y?",
          "index": 11288
        }
      ]
    },
    {
      "file": "features\\admin\\pages\\AdminQuizManagement.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "(null);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  // Helper function ƒë·ªÉ x·ª≠ l√Ω date t·ª´ Firestore\r\n  const parseFirestoreDate = (dateValue: any): Date => {\r\n    if (!dateValue) {\r\n      return new Date();\r\n    }\r\n    \r\n    // N·∫øu l√† Firestore Timestamp\r\n    if (dateValue && typeof dateValue.toDate === 'function') {\r\n      return dateValue.toDate();\r\n    }\r\n    \r\n    // N·∫øu l√† Date object\r\n    if (dateValue instanceof Date) {\r\n      return dateValue;\r\n    }\r\n    \r\n    // N·∫øu l√† string ho·∫∑c number\r\n    if (typeof dateValue === 'string' || typeof dateValue === 'number') {\r\n      const date = new Date(dateValue);\r\n      return isNaN(date.getTime()) ? new Date() : date;\r\n    }\r\n    \r\n    // N·∫øu l√† object c√≥ seconds (Firestore server timestamp)\r\n    if (dateValue && typeof dateValue === 'object' && dateValue.seconds) {\r\n      return new Date(dateValue.seconds * 1000);\r\n    }\r\n    \r\n    // Fallback\r\n    console.warn('Unknown date format:', dateValue);\r\n    return new Date();\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadQuizzes();\r\n    loadEditRequests();\r\n  }, []);\r\n\r\n  const loadQuizzes = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      console.log('üîç Loading quizzes from Firestore...');\r\n      const q = query(collection(db, 'quizzes'), orderBy('createdAt', 'desc'));\r\n      const querySnapshot = await getDocs(q);\r\n      \r\n      console.log('üìä Firestore response:', {\r\n        empty: querySnapshot.empty,\r\n        size: querySnapshot.size,\r\n        docs: querySnapshot.docs.length\r\n      });\r\n      \r\n      const loadedQuizzes: Quiz[] = [];\r\n      querySnapshot.forEach((doc) => {\r\n        const data = doc.data();\r\n        console.log('üìù Quiz data raw:', { \r\n          id: doc.id, \r\n          title: data.title, \r\n          status: data.status, \r\n          createdAt: data.createdAt,\r\n          createdAtType: typeof data.createdAt \r\n        });\r\n        \r\n        try {\r\n          loadedQuizzes.push({\r\n            id: doc.id,\r\n            title: data.title || 'Untitled Quiz',\r\n            description: data.description || '',\r\n            status: data.status || 'pending',\r\n            createdBy: data.createdBy || 'unknown',\r\n            createdAt: parseFirestoreDate(data.createdAt),\r\n            questions: data.questions || [],\r\n            difficulty: data.difficulty || 'easy',\r\n            category: data.category || 'general',\r\n            isPublic: data.isPublic || false,\r\n            isPublished: data.isPublished || false\r\n          });\r\n        } catch (error) {\r\n          console.error('Error parsing quiz:', doc.id, error);\r\n          // Skip invalid quiz\r\n        }\r\n      });\r\n      \r\n      console.log('‚úÖ Loaded quizzes:', loadedQuizzes.length);\r\n      setQuizzes(loadedQuizzes);\r\n      \r\n      // N·∫øu kh√¥ng c√≥ quiz, hi·ªÉn th·ªã empty state\r\n      if (loadedQuizzes.length === 0) {\r\n        console.log('‚ö†Ô∏è No quizzes found, showing empty state');\r\n        toast.info('Ch∆∞a c√≥ quiz n√†o trong h·ªá th·ªëng');\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Error loading quizzes:', error);\r\n      setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch quiz');\r\n      toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch quiz: ' + error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const loadEditRequests = async () => {\r\n    try {\r\n      console.log('üîç Loading edit requests...');\r\n      \r\n      // First approach: Try with simple query and client-side filtering/sorting\r\n      const q = query(\r\n        collection(db, 'editRequests'),\r\n        where('status', '==', 'pending')\r\n      );\r\n      const querySnapshot = await getDocs(q);\r\n      \r\n      const loadedRequests: any[] = [];\r\n      querySnapshot.forEach((doc) => {\r\n        const data = doc.data();\r\n        loadedRequests.push({\r\n          id: doc.id,\r\n          ...data,\r\n          requestedAt: parseFirestoreDate(data.requestedAt)\r\n        });\r\n      });\r\n      \r\n      // Sort by requestedAt descending on client side\r\n      loadedRequests.sort((a, b) => {\r\n        const aTime = a.requestedAt ? new Date(a.requestedAt).getTime() : 0;\r\n        const bTime = b.requestedAt ? new Date(b.requestedAt).getTime() : 0;\r\n        return bTime - aTime;\r\n      });\r\n      \r\n      console.log('‚úÖ Loaded edit requests:', loadedRequests.length);\r\n      setEditRequests(loadedRequests);\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Error loading edit requests:', error);\r\n      \r\n      // Fallback: Load all edit requests and filter client-side\r\n      try {\r\n        console.log('üîÑ Trying fallback approach...');\r\n        const fallbackQ = query(collection(db, 'editRequests'));\r\n        const fallbackSnapshot = await getDocs(fallbackQ);\r\n        \r\n        const allRequests: any[] = [];\r\n        fallbackSnapshot.forEach((doc) => {\r\n          const data = doc.data();\r\n          if (data.status === 'pending') {\r\n            allRequests.push({\r\n              id: doc.id,\r\n              ...data,\r\n              requestedAt: parseFirestoreDate(data.requestedAt)\r\n            });\r\n          }\r\n        });\r\n        \r\n        // Sort by requestedAt descending\r\n        allRequests.sort((a, b) => {\r\n          const aTime = a.requestedAt ? new Date(a.requestedAt).getTime() : 0;\r\n          const bTime = b.requestedAt ? new Date(b.requestedAt).getTime() : 0;\r\n          return bTime - aTime;\r\n        });\r\n        \r\n        console.log('‚úÖ Fallback loaded edit requests:', allRequests.length);\r\n        setEditRequests(allRequests);\r\n        \r\n      } catch (fallbackError) {\r\n        console.error('‚ùå Fallback also failed:', fallbackError);\r\n        setEditRequests([]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleEdit = (quizId: string) => {\r\n    navigate(`/admin/edit-quiz/${quizId}`);\r\n  };\r\n\r\n  const handlePreview = (quiz: Quiz) => {\r\n    setPreviewQuiz(quiz);\r\n    setShowPreview(true);\r\n  };\r\n\r\n  const handleApprove = async (quizId: string) => {\r\n    try {\r\n      const quizRef = doc(db, 'quizzes', quizId);\r\n      await updateDoc(quizRef, {\r\n        status: 'approved',\r\n        isPublished: true,\r\n        approvedAt: new Date(),\r\n        approvedBy: user?.uid\r\n      });\r\n      \r\n      setQuizzes(prev => prev.map(quiz => \r\n        quiz.id === quizId \r\n          ? { ...quiz, status: 'approved' as const, isPublished: true }\r\n          : quiz\r\n      ));\r\n      \r\n      toast.success('ƒê√£ ph√™ duy·ªát quiz th√†nh c√¥ng!');\r\n    } catch (error) {\r\n      console.error('Error approving quiz:', error);\r\n      toast.error('Kh√¥ng th·ªÉ duy·ªát quiz');\r\n    }\r\n  };\r\n\r\n  const handleReject = async (quizId: string) => {\r\n    try {\r\n      const quizRef = doc(db, 'quizzes', quizId);\r\n      await updateDoc(quizRef, {\r\n        status: 'rejected',\r\n        isPublished: false,\r\n        rejectedAt: new Date(),\r\n        rejectedBy: user?.uid\r\n      });\r\n      \r\n      setQuizzes(prev => prev.map(quiz => \r\n        quiz.id === quizId \r\n          ? { ...quiz, status: 'rejected' as const, isPublished: false }\r\n          : quiz\r\n      ));\r\n      \r\n      toast.success('ƒê√£ t·ª´ ch·ªëi quiz!');\r\n    } catch (error) {\r\n      console.error('Error rejecting quiz:', error);\r\n      toast.error('Kh√¥ng th·ªÉ t·ª´ ch·ªëi quiz');\r\n    }\r\n  };\r\n\r\n  const handleApproveEditRequest = async (requestId: string, quizId: string) => {\r\n    try {\r\n      const editRequest = editRequests.find(req => req.id === requestId);\r\n      if (!editRequest) {\r\n        toast.error('Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ch·ªânh s·ª≠a');\r\n        return;\r\n      }\r\n\r\n      // Update edit request status\r\n      const requestRef = doc(db, 'editRequests', requestId);\r\n      await updateDoc(requestRef, {\r\n        status: 'approved',\r\n        reviewedBy: user?.uid,\r\n        reviewedByName: user?.displayName || 'Admin',\r\n        reviewedAt: new Date()\r\n      });\r\n\r\n      // G·ª† QUIZ XU·ªêNG ƒê·ªÇ S·ª¨A: Set quiz status to draft v√† allow edit\r\n      const quizRef = doc(db, 'quizzes', quizId);\r\n      await updateDoc(quizRef, {\r\n        status: 'draft', // G·ª° quiz xu·ªëng draft ƒë·ªÉ s·ª≠a\r\n        isApproved: false, // B·ªè approved status\r\n        canEdit: true, // Cho ph√©p creator edit\r\n        editRequestApproved: true,\r\n        lastEditRequestApproved: new Date(),\r\n        approvedBy: user?.uid,\r\n        needsReApproval: true // Flag ƒë·ªÉ bi·∫øt quiz n√†y c·∫ßn ƒë∆∞·ª£c duy·ªát l·∫°i sau khi s·ª≠a\r\n      });\r\n\r\n      // Create notification for the creator\r\n      await addDoc(collection(db, 'notifications'), {\r\n        userId: editRequest.requestedBy,\r\n        type: 'edit_request_approved',\r\n        title: 'Y√™u c·∫ßu ch·ªânh s·ª≠a ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát',\r\n        message: `Y√™u c·∫ßu ch·ªânh s·ª≠a quiz \"${editRequest.quizTitle}\" c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c admin ph√™ duy·ªát. Quiz ƒë√£ ƒë∆∞·ª£c g·ª° xu·ªëng ƒë·ªÉ b·∫°n ch·ªânh s·ª≠a. Sau khi s·ª≠a xong, vui l√≤ng n·ªôp l·∫°i ƒë·ªÉ admin duy·ªát.`,\r\n        quizId: quizId,\r\n        createdAt: serverTimestamp(),\r\n        read: false\r\n      });\r\n\r\n      // Remove from edit requests list\r\n      setEditRequests(prev => prev.filter(req => req.id !== requestId));\r\n      \r\n      toast.success(`ƒê√£ ph√™ duy·ªát y√™u c·∫ßu ch·ªânh s·ª≠a c·ªßa ${editRequest.requestedByName || editRequest.requestedByEmail}!`);\r\n    } catch (error) {\r\n      console.error('Error approving edit request:', error);\r\n      toast.error('Kh√¥ng th·ªÉ ph√™ duy·ªát y√™u c·∫ßu ch·ªânh s·ª≠a');\r\n    }\r\n  };\r\n\r\n  const handleRejectEditRequest = async (requestId: string) => {\r\n    try {\r\n      const editRequest = editRequests.find(req => req.id === requestId);\r\n      if (!editRequest) {\r\n        toast.error('Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ch·ªânh s·ª≠a');\r\n        return;\r\n      }\r\n\r\n      const requestRef = doc(db, 'editRequests', requestId);\r\n      await updateDoc(requestRef, {\r\n        status: 'rejected',\r\n        reviewedBy: user?.uid,\r\n        reviewedByName: user?.displayName || 'Admin',\r\n        reviewedAt: new Date()\r\n      });\r\n\r\n      // Create notification for the creator\r\n      await addDoc(collection(db, 'notifications'), {\r\n        userId: editRequest.requestedBy,\r\n        type: 'edit_request_rejected', \r\n        title: 'Y√™u c·∫ßu ch·ªânh s·ª≠a ƒë√£ b·ªã t·ª´ ch·ªëi',\r\n        message: `Y√™u c·∫ßu ch·ªânh s·ª≠a quiz \"${editRequest.quizTitle}\" c·ªßa b·∫°n ƒë√£ b·ªã admin t·ª´ ch·ªëi. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.`,\r\n        quizId: editRequest.quizId,\r\n        createdAt: serverTimestamp(),\r\n        read: false\r\n      });\r\n\r\n      // Remove from edit requests list\r\n      setEditRequests(prev => prev.filter(req => req.id !== requestId));\r\n      \r\n      toast.success(`ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu ch·ªânh s·ª≠a c·ªßa ${editRequest.requestedByName || editRequest.requestedByEmail}!`);\r\n    } catch (error) {\r\n      console.error('Error rejecting edit request:', error);\r\n      toast.error('Kh√¥ng th·ªÉ t·ª´ ch·ªëi y√™u c·∫ßu ch·ªânh s·ª≠a');\r\n    }\r\n  };\r\n\r\n  const handleReopen = async (quizId: string) => {\r\n    try {\r\n      const quizRef = doc(db, 'quizzes', quizId);\r\n      await updateDoc(quizRef, {\r\n        status: 'pending',\r\n        isPublished: false,\r\n        reopenedAt: new Date(),\r\n        reopenedBy: user?.uid\r\n      });\r\n      \r\n      setQuizzes(prev => prev.map(quiz => \r\n        quiz.id === quizId \r\n          ? { ...quiz, status: 'pending' as const, isPublished: false }\r\n          : quiz\r\n      ));\r\n      \r\n      toast.success('ƒê√£ m·ªü l·∫°i quiz ƒë·ªÉ xem x√©t!');\r\n    } catch (error) {\r\n      console.error('Error reopening quiz:', error);\r\n      toast.error('Kh√¥ng th·ªÉ m·ªü l·∫°i quiz');\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (quizId: string) => {\r\n    if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a quiz n√†y kh√¥ng?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log('üóëÔ∏è Deleting quiz from database:', quizId);\r\n      await deleteDoc(doc(db, 'quizzes', quizId));\r\n      console.log('‚úÖ Quiz deleted from database successfully');\r\n      \r\n      setQuizzes(prev => prev.filter(quiz => quiz.id !== quizId));\r\n      toast.success('Quiz ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi database');\r\n    } catch (error) {\r\n      console.error('‚ùå Error deleting quiz:', error);\r\n      toast.error('Kh√¥ng th·ªÉ x√≥a quiz: ' + error);\r\n    }\r\n  };\r\n\r\n  const filteredQuizzes = quizzes.filter(quiz => {\r\n    const matchesFilter = filterStatus === 'all' || quiz.status === filterStatus;\r\n    const matchesSearch = quiz.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         quiz.description.toLowerCase().includes(searchTerm.toLowerCase());\r\n    return matchesFilter && matchesSearch;\r\n  });\r\n\r\n  const getStatusCounts = () => {\r\n    return {\r\n      all: quizzes.length,\r\n      pending: quizzes.filter(q => q.status === 'pending').length,\r\n      approved: quizzes.filter(q => q.status === 'approved').length,\r\n      rejected: quizzes.filter(q => q.status === 'rejected').length\r\n    };\r\n  };\r\n\r\n  const statusCounts = getStatusCounts();\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    switch (status) {\r\n      case 'approved':\r\n        return",
          "index": 1943
        },
        {
          "kind": "JSXText",
          "text": "‚úÖ ƒê√£ duy·ªát",
          "index": 14747
        },
        {
          "kind": "JSXText",
          "text": "‚ùå T·ª´ ch·ªëi",
          "index": 14891
        },
        {
          "kind": "JSXText",
          "text": "‚è≥ Ch·ªù duy·ªát",
          "index": 15032
        },
        {
          "kind": "JSXText",
          "text": "üü¢ D·ªÖ",
          "index": 15263
        },
        {
          "kind": "JSXText",
          "text": "üî¥ Kh√≥",
          "index": 15386
        },
        {
          "kind": "JSXText",
          "text": "üü° Trung b√¨nh",
          "index": 15512
        },
        {
          "kind": "JSXText",
          "text": "{loadQuizzes(); loadEditRequests();}}\r\n                className=\"w-full sm:w-auto px-4 py-2.5 bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white rounded-xl transition-all duration-200 flex items-center justify-center gap-2 border border-white/20 hover:border-white/40 shadow-lg hover:shadow-xl\"\r\n                title=\"L√†m m·ªõi danh s√°ch\"\r\n              >",
          "index": 18095
        },
        {
          "kind": "JSXText",
          "text": "{/* Actions - 6 ch·ª©c nƒÉng: View, Edit, Approve, Reject, Reopen, Delete */}",
          "index": 29549
        },
        {
          "kind": "JSXText",
          "text": "{/* 1. Xem tr∆∞·ªõc (lu√¥n hi·ªÉn th·ªã) */}",
          "index": 29729
        },
        {
          "kind": "JSXText",
          "text": "{/* 2. Ch·ªânh s·ª≠a (lu√¥n hi·ªÉn th·ªã) */}",
          "index": 30157
        },
        {
          "kind": "JSXText",
          "text": "{/* 3 & 4. Duy·ªát & T·ª´ ch·ªëi (ch·ªâ hi·ªÉn th·ªã khi pending) */}\r\n                    {quiz.status === 'pending' && (",
          "index": 30590
        },
        {
          "kind": "JSXText",
          "text": ")}\r\n\r\n                    {/* 5. M·ªü l·∫°i (hi·ªÉn th·ªã khi ƒë√£ duy·ªát ho·∫∑c t·ª´ ch·ªëi) */}\r\n                      {(quiz.status === 'approved' || quiz.status === 'rejected') && (",
          "index": 31597
        },
        {
          "kind": "JSXText",
          "text": ")}\r\n                    \r\n                    {/* 6. X√≥a (lu√¥n hi·ªÉn th·ªã) */}",
          "index": 32180
        },
        {
          "kind": "JSXText",
          "text": "Y√™u c·∫ßu ch·ªânh s·ª≠a Quiz ({editRequests.length})",
          "index": 33143
        },
        {
          "kind": "JSXText",
          "text": "{request.requestedByName || request.requestedByEmail || 'Ng∆∞·ªùi d√πng kh√¥ng x√°c ƒë·ªãnh'}",
          "index": 34388
        },
        {
          "kind": "JSXText",
          "text": "{request.requestedByEmail || request.requestedBy || 'Email kh√¥ng x√°c ƒë·ªãnh'}",
          "index": 34606
        },
        {
          "kind": "JSXText",
          "text": "üìù Quiz: {request.quizTitle || 'T√™n quiz kh√¥ng x√°c ƒë·ªãnh'}",
          "index": 34988
        },
        {
          "kind": "JSXText",
          "text": "L√Ω do y√™u c·∫ßu:",
          "index": 35216
        },
        {
          "kind": "JSXText",
          "text": "{request.reason || 'Kh√¥ng c√≥ l√Ω do c·ª• th·ªÉ'}",
          "index": 35239
        },
        {
          "kind": "JSXText",
          "text": "Chi ti·∫øt:",
          "index": 35475
        },
        {
          "kind": "JSXText",
          "text": "{request.requestedAt?.toLocaleDateString('vi-VN', {\r\n                              day: '2-digit',\r\n                              month: '2-digit', \r\n                              year: 'numeric',\r\n                              hour: '2-digit',\r\n                              minute: '2-digit'\r\n                            }) || 'Th·ªùi gian kh√¥ng x√°c ƒë·ªãnh'}",
          "index": 35855
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆∞a c√≥ quiz n√†o trong h·ªá th·ªëng",
          "index": 4896
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i danh s√°ch quiz",
          "index": 5045
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i danh s√°ch quiz: ",
          "index": 5097
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ ph√™ duy·ªát quiz th√†nh c√¥ng!",
          "index": 8268
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ duy·ªát quiz",
          "index": 8398
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ t·ª´ ch·ªëi quiz!",
          "index": 8932
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·ª´ ch·ªëi quiz",
          "index": 9049
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ch·ªânh s·ª≠a",
          "index": 9308
        },
        {
          "kind": "StringLiteral",
          "text": "Y√™u c·∫ßu ch·ªânh s·ª≠a ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát",
          "index": 10394
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ ph√™ duy·ªát y√™u c·∫ßu ch·ªânh s·ª≠a",
          "index": 11077
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ch·ªânh s·ª≠a",
          "index": 11334
        },
        {
          "kind": "StringLiteral",
          "text": "Y√™u c·∫ßu ch·ªânh s·ª≠a ƒë√£ b·ªã t·ª´ ch·ªëi",
          "index": 11859
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·ª´ ch·ªëi y√™u c·∫ßu ch·ªânh s·ª≠a",
          "index": 12499
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ m·ªü l·∫°i quiz ƒë·ªÉ xem x√©t!",
          "index": 13046
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ m·ªü l·∫°i quiz",
          "index": 13173
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a quiz n√†y kh√¥ng?",
          "index": 13291
        },
        {
          "kind": "StringLiteral",
          "text": "Quiz ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi database",
          "index": 13652
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ x√≥a quiz: ",
          "index": 13784
        },
        {
          "kind": "StringLiteral",
          "text": "L√†m m·ªõi danh s√°ch",
          "index": 18423
        },
        {
          "kind": "StringLiteral",
          "text": "Ng∆∞·ªùi d√πng kh√¥ng x√°c ƒë·ªãnh",
          "index": 34477
        },
        {
          "kind": "StringLiteral",
          "text": "Email kh√¥ng x√°c ƒë·ªãnh",
          "index": 34691
        },
        {
          "kind": "StringLiteral",
          "text": "T√™n quiz kh√¥ng x√°c ƒë·ªãnh",
          "index": 35050
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng c√≥ l√Ω do c·ª• th·ªÉ",
          "index": 35260
        },
        {
          "kind": "StringLiteral",
          "text": "Th·ªùi gian kh√¥ng x√°c ƒë·ªãnh",
          "index": 36215
        }
      ]
    },
    {
      "file": "features\\admin\\pages\\AdminDashboard.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": ")\r\n    );\r\n  };\r\n\r\n  // New category form\r\n  const [newCategory, setNewCategory] = useState({ name: '', description: '' });\r\n  const [showAddCategory, setShowAddCategory] = useState(false);\r\n\r\n  // State cho modal x√°c nh·∫≠n\r\n  const [confirmModal, setConfirmModal] = useState",
          "index": 3872
        },
        {
          "kind": "JSXText",
          "text": "Thao t√°c",
          "index": 13716
        },
        {
          "kind": "JSXText",
          "text": "{user.displayName || 'Ch∆∞a c√≥ t√™n'}",
          "index": 14062
        },
        {
          "kind": "JSXText",
          "text": "{user.isActive !== false ? 'Ho·∫°t ƒë·ªông' : 'B·ªã kh√≥a'}",
          "index": 15085
        },
        {
          "kind": "JSXText",
          "text": "setConfirmModal({ open: true, type: 'toggleUserStatus', payload: { userId: user.id, currentStatus: user.isActive !== false }, message: user.isActive !== false ? 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën kh√≥a t√†i kho·∫£n n√†y?' : 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën m·ªü kh√≥a t√†i kho·∫£n n√†y?' })}\r\n                    className={`px-3 py-1 rounded text-xs ${user.isActive !== false ? 'bg-red-100 text-red-600 hover:bg-red-200' : 'bg-green-100 text-green-600 hover:bg-green-200'}`}\r\n                  >\r\n                    {user.isActive !== false ? 'Kh√≥a' : 'M·ªü kh√≥a'}",
          "index": 15363
        },
        {
          "kind": "JSXText",
          "text": "setConfirmModal({ open: true, type: 'deleteUser', payload: { userId: user.id }, message: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?' })}\r\n                      className=\"px-3 py-1 bg-red-100 text-red-600 rounded text-xs hover:bg-red-200\"\r\n                    >{t(\"action.clear\")}",
          "index": 16071
        },
        {
          "kind": "JSXText",
          "text": "ƒê·ªÉ xem th·ªëng k√™ bi·ªÉu ƒë·ªì",
          "index": 25982
        },
        {
          "kind": "JSXText",
          "text": "Nh·∫•n v√†o tab \"üìä T·ªïng quan\" b√™n d∆∞·ªõi ho·∫∑c",
          "index": 26065
        },
        {
          "kind": "JSXText",
          "text": "‚û§ Xem trang th·ªëng k√™ ri√™ng",
          "index": 26229
        },
        {
          "kind": "JSXText",
          "text": "Tab hi·ªán t·∫°i:",
          "index": 26456
        },
        {
          "kind": "JSXText",
          "text": "Th·ªëng k√™ ri√™ng",
          "index": 27974
        },
        {
          "kind": "JSXText",
          "text": "{\r\n                  console.log('Force switching to dashboard');\r\n                  setActiveTab('dashboard');\r\n                }}\r\n                className=\"bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors duration-200 flex items-center space-x-2\"\r\n                title=\"Force chuy·ªÉn v·ªÅ tab T·ªïng quan\"\r\n              >",
          "index": 28070
        },
        {
          "kind": "JSXText",
          "text": "C·∫≠p nh·∫≠t: {lastUpdate.toLocaleTimeString()}",
          "index": 29421
        },
        {
          "kind": "JSXText",
          "text": "üîß Debug: activeTab = \"{activeTab}\" | T·∫•t c·∫£ tabs: dashboard, users, quizzes, categories",
          "index": 29981
        },
        {
          "kind": "JSXText",
          "text": "{\r\n                  console.log('Clicking tab:', tab.id);\r\n                  setActiveTab(tab.id);\r\n                }}\r\n                className={`py-4 px-3 border-b-2 font-medium text-sm transition-colors duration-200 ${\r\n                  activeTab === tab.id\r\n                    ? 'border-red-500 text-red-600 bg-red-50'\r\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 hover:bg-gray-50'\r\n                } ${tab.id === 'dashboard' ? 'ring-2 ring-blue-300' : ''}`}\r\n                title={`Chuy·ªÉn ƒë·∫øn tab ${tab.label}`}\r\n              >",
          "index": 30604
        },
        {
          "kind": "JSXText",
          "text": "{/* Modal x√°c nh·∫≠n thao t√°c */}",
          "index": 33181
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆∞a c√≥ t√™n",
          "index": 14106
        },
        {
          "kind": "StringLiteral",
          "text": "Ho·∫°t ƒë·ªông",
          "index": 15135
        },
        {
          "kind": "StringLiteral",
          "text": "B·ªã kh√≥a",
          "index": 15149
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën kh√≥a t√†i kho·∫£n n√†y?",
          "index": 15526
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën m·ªü kh√≥a t√†i kho·∫£n n√†y?",
          "index": 15572
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√≥a",
          "index": 15876
        },
        {
          "kind": "StringLiteral",
          "text": "M·ªü kh√≥a",
          "index": 15885
        },
        {
          "kind": "StringLiteral",
          "text": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?",
          "index": 16162
        },
        {
          "kind": "StringLiteral",
          "text": "üìä T·ªïng quan",
          "index": 26099
        },
        {
          "kind": "StringLiteral",
          "text": "Xem trang th·ªëng k√™ ri√™ng v·ªõi bi·ªÉu ƒë·ªì",
          "index": 27863
        },
        {
          "kind": "StringLiteral",
          "text": "Force chuy·ªÉn v·ªÅ tab T·ªïng quan",
          "index": 28397
        },
        {
          "kind": "StringLiteral",
          "text": "C·∫≠p nh·∫≠t d·ªØ li·ªáu",
          "index": 28871
        }
      ]
    },
    {
      "file": "features\\admin\\pages\\Admin.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{\r\n  const { t } = useTranslation();\r\n  // State cho th·ªëng k√™\r\n  const [stats, setStats] = useState({\r\n    totalQuizzes: 0,\r\n    totalUsers: 0,\r\n    completedQuizzes: 0,\r\n    totalCreators: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchStats = async () => {\r\n      try {\r\n        // L·∫•y t·∫•t c·∫£ quiz\r\n        const quizzesSnap = await getDocs(collection(db, 'quizzes'));\r\n        const quizzes = quizzesSnap.docs.map(doc => doc.data());\r\n        // Ch·ªâ l·∫•y quiz ƒë√£ ƒë∆∞·ª£c duy·ªát (status === 'approved')\r\n        const approvedQuizzes = quizzes.filter(q => q.status === 'approved');\r\n        const totalQuizzes = approvedQuizzes.length;\r\n        const completedQuizzes = approvedQuizzes.filter(q => q.completed === true || q.status === 'completed').length;\r\n        const totalCreators = approvedQuizzes\r\n          .map(q => q.creatorId)\r\n          .filter((v, i, a) => v && a.indexOf(v) === i).length;\r\n\r\n        // L·∫•y t·ªïng s·ªë user\r\n        const usersSnap = await getDocs(collection(db, 'users'));\r\n        const users = usersSnap.docs.map(doc => doc.data());\r\n        const totalUsers = users.length;\r\n\r\n        setStats({\r\n          totalQuizzes,\r\n          totalUsers,\r\n          completedQuizzes,\r\n          totalCreators,\r\n        });\r\n      } catch (err) {\r\n        // C√≥ th·ªÉ toast l·ªói n·∫øu mu·ªën\r\n      }\r\n    };\r\n    fetchStats();\r\n  }, []);\r\n  const { user } = useSelector((state: RootState) => state.auth);\r\n  const [showNotificationModal, setShowNotificationModal] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [notificationData, setNotificationData] = useState({\r\n    message: '',\r\n    type: 'info' as 'info' | 'warning' | 'success' | 'error',\r\n    targetRole: 'all' as 'all' | 'user' | 'creator'\r\n  });\r\n\r\n  const createSystemNotification = async () => {\r\n    if (!notificationData.message.trim()) {\r\n      toast.error(t('admin.quickActions.toasts.enterMessage'));\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      await addDoc(collection(db, 'system_notifications'), {\r\n        message: notificationData.message,\r\n        type: notificationData.type,\r\n        createdAt: new Date(),\r\n        isActive: true,\r\n        targetRole: notificationData.targetRole\r\n      });\r\n      \r\n      // Reset form\r\n      setNotificationData({\r\n        message: '',\r\n        type: 'info',\r\n        targetRole: 'all'\r\n      });\r\n      setShowNotificationModal(false);\r\n      \r\n      toast.success(t('admin.quickActions.toasts.createSuccess'));\r\n    } catch (error) {\r\n      console.error('Error creating notification:', error);\r\n      toast.error(t('admin.quickActions.toasts.createError'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Backup d·ªØ li·ªáu\r\n  const backupData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const collections = ['users', 'quizzes', 'categories', 'quiz_results'];\r\n      const backup: any = {};\r\n      \r\n      for (const collectionName of collections) {\r\n        const snapshot = await getDocs(collection(db, collectionName));\r\n        backup[collectionName] = snapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        }));\r\n      }\r\n\r\n      // T·∫°o file backup\r\n      const dataStr = JSON.stringify(backup, null, 2);\r\n      const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n      const url = URL.createObjectURL(dataBlob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `quiz-app-backup-${new Date().toISOString().split('T')[0]}.json`;\r\n      link.click();\r\n      \r\n      toast.success(t('admin.quickActions.toasts.backupSuccess'));\r\n    } catch (error) {\r\n      toast.error(t('admin.quickActions.toasts.backupError'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // X√≥a th√¥ng b√°o h·ªá th·ªëng\r\n  const deleteNotifications = async () => {\r\n    if (!confirm(t('admin.quickActions.toasts.confirmDeleteAll'))) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const notificationsSnapshot = await getDocs(collection(db, 'system_notifications'));\r\n      const deletePromises = notificationsSnapshot.docs.map(doc => \r\n        updateDoc(doc.ref, { isActive: false })\r\n      );\r\n      \r\n      await Promise.all(deletePromises);\r\n      toast.success(t('admin.quickActions.toasts.deleteSuccess'));\r\n    } catch (error) {\r\n      console.error('Error deleting notifications:', error);\r\n      toast.error(t('admin.quickActions.toasts.deleteError'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // D·ªçn d·∫πp d·ªØ li·ªáu ƒë√£ x√≥a\r\n  const cleanupDeletedData = async () => {\r\n    if (!confirm(t('admin.quickActions.toasts.confirmCleanup'))) return;\r\n    setLoading(true);\r\n    try {\r\n      const quizzesSnapshot = await getDocs(collection(db, 'quizzes'));\r\n      const deletedQuizzes = quizzesSnapshot.docs.filter(doc => doc.data().deleted === true);\r\n      const quizDeletePromises = deletedQuizzes.map(q => updateDoc(doc(db, 'quizzes', q.id), { isPurged: true }));\r\n\r\n      const usersSnapshot = await getDocs(collection(db, 'users'));\r\n      const deletedUsers = usersSnapshot.docs.filter(doc => doc.data().deleted === true);\r\n      const userDeletePromises = deletedUsers.map(u => updateDoc(doc(db, 'users', u.id), { isPurged: true }));\r\n\r\n      await Promise.all([...quizDeletePromises, ...userDeletePromises]);\r\n      toast.success(t('admin.quickActions.toasts.cleanupSuccess'));\r\n    } catch (error) {\r\n      toast.error(t('admin.quickActions.toasts.cleanupError'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (user?.role !== 'admin') {\r\n    return (",
          "index": 497
        },
        {
          "kind": "JSXText",
          "text": "{/* Modal g·ª≠i th√¥ng b√°o - Responsive */}\r\n      {showNotificationModal && (",
          "index": 14382
        },
        {
          "kind": "JSXText",
          "text": "{/* N·ªôi dung th√¥ng b√°o */}",
          "index": 14819
        },
        {
          "kind": "JSXText",
          "text": "{/* Lo·∫°i th√¥ng b√°o */}",
          "index": 15507
        },
        {
          "kind": "JSXText",
          "text": "{/* ƒê·ªëi t∆∞·ª£ng nh·∫≠n th√¥ng b√°o */}",
          "index": 16483
        }
      ]
    },
    {
      "file": "features\\admin\\components\\QuizPreview.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "void;\r\n}\r\n\r\n// Modal component v·ªõi kh·∫£ nƒÉng cu·ªôn t·ªët h∆°n\r\nconst Modal: React.FC",
          "index": 218
        },
        {
          "kind": "JSXText",
          "text": "ƒêi·ªÉm:",
          "index": 6592
        }
      ]
    },
    {
      "file": "features\\admin\\components\\QuickActions_Simple.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "void;\r\n  stats: {\r\n    totalUsers: number;\r\n    pendingQuizzes: number;\r\n    approvedQuizzes: number;\r\n    totalCategories: number;\r\n  };\r\n}\r\n\r\n// ƒê·ªïi t√™n component\r\nconst QuickActionsSimple: React.FC",
          "index": 296
        },
        {
          "kind": "JSXText",
          "text": "= ({ stats }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const { t } = useTranslation();\r\n  const [showNotificationModal, setShowNotificationModal] = useState(false);\r\n  const [notificationData, setNotificationData] = useState({\r\n    message: '',\r\n    type: 'info' as 'info' | 'warning' | 'success' | 'error',\r\n    targetRole: 'all' as 'all' | 'user' | 'creator'\r\n  });\r\n\r\n  // 1. T·∫°o th√¥ng b√°o h·ªá th·ªëng\r\n  const createSystemNotification = async () => {\r\n    if (!notificationData.message.trim()) {\r\n      toast.error(t('admin.quickActions.toasts.enterMessage'));\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      await addDoc(collection(db, 'system_notifications'), {\r\n        message: notificationData.message,\r\n        type: notificationData.type,\r\n        createdAt: new Date(),\r\n        isActive: true,\r\n        targetRole: notificationData.targetRole\r\n      });\r\n      \r\n      // Reset form\r\n      setNotificationData({\r\n        message: '',\r\n        type: 'info',\r\n        targetRole: 'all'\r\n      });\r\n      setShowNotificationModal(false);\r\n      \r\n      toast.success(t('admin.quickActions.toasts.createSuccess'));\r\n    } catch (error) {\r\n      console.error('Error creating notification:', error);\r\n      toast.error(t('admin.quickActions.toasts.createError'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const openNotificationModal = () => {\r\n    console.log('üöÄ Opening notification modal...');\r\n    setShowNotificationModal(true);\r\n    console.log('üìä Modal state should be:', true);\r\n  };\r\n\r\n  return (",
          "index": 516
        },
        {
          "kind": "JSXText",
          "text": "{/* N√∫t g·ª≠i th√¥ng b√°o */}",
          "index": 2314
        },
        {
          "kind": "JSXText",
          "text": "{/* N√∫t test modal */}",
          "index": 2940
        },
        {
          "kind": "JSXText",
          "text": "{/* Th·ªëng k√™ nhanh hi·ªÉn th·ªã */}",
          "index": 3970
        },
        {
          "kind": "JSXText",
          "text": "{/* Modal g·ª≠i th√¥ng b√°o */}\r\n      {showNotificationModal && (",
          "index": 5530
        },
        {
          "kind": "JSXText",
          "text": "{/* N·ªôi dung th√¥ng b√°o */}",
          "index": 5932
        },
        {
          "kind": "JSXText",
          "text": "{/* Lo·∫°i th√¥ng b√°o */}",
          "index": 6599
        },
        {
          "kind": "JSXText",
          "text": "{/* ƒê·ªëi t∆∞·ª£ng nh·∫≠n th√¥ng b√°o */}",
          "index": 7554
        }
      ]
    },
    {
      "file": "features\\admin\\components\\QuickActions.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "(null);\r\n\r\n  const { t } = useTranslation();\r\n\r\n  // 1. T·∫°o th√¥ng b√°o h·ªá th·ªëng\r\n  const createSystemNotification = async () => {\r\n    if (!notificationData.message.trim()) {\r\n      toast.error(t('admin.quickActions.toasts.enterMessage'));\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      await addDoc(collection(db, 'system_notifications'), {\r\n        message: notificationData.message,\r\n        type: notificationData.type,\r\n        createdAt: new Date(),\r\n        isActive: true,\r\n        targetRole: notificationData.targetRole\r\n      });\r\n      \r\n      // Reset form\r\n      setNotificationData({\r\n        message: '',\r\n        type: 'info',\r\n        targetRole: 'all'\r\n      });\r\n      setShowNotificationModal(false);\r\n      setBannerData({ message: notificationData.message, type: notificationData.type });\r\n      setShowBanner(true);\r\n      setTimeout(() => setShowBanner(false), 5000);\r\n      \r\n      toast.success(t('admin.quickActions.toasts.createSuccess'));\r\n    } catch (error) {\r\n      console.error('Error creating notification:', error);\r\n      toast.error(t('admin.quickActions.toasts.createError'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const openNotificationModal = () => {\r\n    setShowNotificationModal(true);\r\n  };\r\n\r\n  // 2. Backup d·ªØ li·ªáu\r\n  const backupData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const collections = ['users', 'quizzes', 'categories', 'quiz_results'];\r\n      const backup: any = {};\r\n      \r\n      for (const collectionName of collections) {\r\n        const snapshot = await getDocs(collection(db, collectionName));\r\n        backup[collectionName] = snapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        }));\r\n      }\r\n\r\n      // T·∫°o file backup\r\n      const dataStr = JSON.stringify(backup, null, 2);\r\n      const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n      const url = URL.createObjectURL(dataBlob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `quiz-app-backup-${new Date().toISOString().split('T')[0]}.json`;\r\n      link.click();\r\n      \r\n      toast.success(t('admin.quickActions.toasts.backupSuccess'));\r\n    } catch (error) {\r\n      toast.error(t('admin.quickActions.toasts.backupError'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 3. X√≥a th√¥ng b√°o h·ªá th·ªëng\r\n  const deleteNotifications = async () => {\r\n    if (!confirm(t('admin.quickActions.toasts.confirmDeleteAll'))) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      // L·∫•y t·∫•t c·∫£ th√¥ng b√°o ƒëang active\r\n      const notificationsSnapshot = await getDocs(collection(db, 'system_notifications'));\r\n      const deletePromises = notificationsSnapshot.docs.map(doc => \r\n        updateDoc(doc.ref, { isActive: false })\r\n      );\r\n      \r\n      await Promise.all(deletePromises);\r\n      toast.success(t('admin.quickActions.toasts.deleteSuccess'));\r\n      onRefreshData();\r\n    } catch (error) {\r\n      console.error('Error deleting notifications:', error);\r\n      toast.error(t('admin.quickActions.toasts.deleteError'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 4. D·ªçn d·∫πp d·ªØ li·ªáu ƒë√£ x√≥a\r\n  const cleanupDeletedData = async () => {\r\n    if (!confirm(t('admin.quickActions.toasts.confirmCleanup'))) return;\r\n    setLoading(true);\r\n    try {\r\n      // X√≥a quiz ƒë√£ b·ªã ƒë√°nh d·∫•u deleted=true\r\n      const quizzesSnapshot = await getDocs(collection(db, 'quizzes'));\r\n      const deletedQuizzes = quizzesSnapshot.docs.filter(doc => doc.data().deleted === true);\r\n      const quizDeletePromises = deletedQuizzes.map(q => updateDoc(doc(db, 'quizzes', q.id), { isPurged: true }));\r\n\r\n      // X√≥a user ƒë√£ b·ªã ƒë√°nh d·∫•u deleted=true\r\n      const usersSnapshot = await getDocs(collection(db, 'users'));\r\n      const deletedUsers = usersSnapshot.docs.filter(doc => doc.data().deleted === true);\r\n      const userDeletePromises = deletedUsers.map(u => updateDoc(doc(db, 'users', u.id), { isPurged: true }));\r\n\r\n      await Promise.all([...quizDeletePromises, ...userDeletePromises]);\r\n      toast.success(t('admin.quickActions.toasts.cleanupSuccess'));\r\n      onRefreshData();\r\n    } catch (error) {\r\n      toast.error(t('admin.quickActions.toasts.cleanupError'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const quickActions = [\r\n    // Updated actions as requested\r\n    {\r\n      icon: 'üì¢',\r\n      title: t('admin.quickActions.items.notify.title'),\r\n      description: t('admin.quickActions.items.notify.desc'),\r\n      action: openNotificationModal,\r\n      color: 'blue'\r\n    },\r\n    {\r\n      icon: '‚ùå',\r\n      title: t('admin.quickActions.items.deleteNotifications.title'),\r\n      description: t('admin.quickActions.items.deleteNotifications.desc'),\r\n      action: deleteNotifications,\r\n      color: 'red'\r\n    },\r\n    {\r\n      icon: 'üóÇÔ∏è',\r\n      title: t('admin.quickActions.items.backup.title'),\r\n      description: t('admin.quickActions.items.backup.desc'),\r\n      action: backupData,\r\n      color: 'green'\r\n    },\r\n    {\r\n      icon: 'üóëÔ∏è',\r\n      title: t('admin.quickActions.items.cleanup.title'),\r\n      description: t('admin.quickActions.items.cleanup.desc'),\r\n      action: cleanupDeletedData,\r\n      color: 'orange'\r\n    }\r\n  ];\r\n\r\n  // Banner notification UI\r\n  useEffect(() => {\r\n    if (showBanner && bannerData) {\r\n      document.body.classList.add('overflow-x-hidden');\r\n    } else {\r\n      document.body.classList.remove('overflow-x-hidden');\r\n    }\r\n  }, [showBanner, bannerData]);\r\n\r\n  return (",
          "index": 1025
        },
        {
          "kind": "JSXText",
          "text": "setShowBanner(false)} className=\"ml-4 text-xl font-bold focus:outline-none\">√ó",
          "index": 7335
        },
        {
          "kind": "JSXText",
          "text": "{/* Th·ªëng k√™ nhanh hi·ªÉn th·ªã */}",
          "index": 8403
        },
        {
          "kind": "JSXText",
          "text": "{/* Modal g·ª≠i th√¥ng b√°o */}\r\n      {showNotificationModal && (",
          "index": 9532
        },
        {
          "kind": "JSXText",
          "text": "{/* N·ªôi dung th√¥ng b√°o */}",
          "index": 9934
        },
        {
          "kind": "JSXText",
          "text": "{/* Lo·∫°i th√¥ng b√°o */}",
          "index": 10639
        },
        {
          "kind": "JSXText",
          "text": "{/* ƒê·ªëi t∆∞·ª£ng nh·∫≠n th√¥ng b√°o */}",
          "index": 11632
        }
      ]
    },
    {
      "file": "features\\admin\\components\\BulkActions.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "= ({ \r\n  selectedItems, \r\n  itemType, \r\n  onClearSelection, \r\n  onRefresh \r\n}) => {\n  const { t } = useTranslation();\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  if (selectedItems.length === 0) return null;\r\n\r\n  const bulkDelete = async () => {\r\n    if (!confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ${selectedItems.length} ${itemType}?`)) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const promises = selectedItems.map(id => \r\n        deleteDoc(doc(db, itemType, id))\r\n      );\r\n      await Promise.all(promises);\r\n      \r\n      toast.success(`ƒê√£ x√≥a ${selectedItems.length} ${itemType}!`);\r\n      onClearSelection();\r\n      onRefresh();\r\n    } catch (error) {\r\n      toast.error('L·ªói khi x√≥a h√†ng lo·∫°t!');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const bulkUpdateStatus = async (status: any) => {\r\n    setLoading(true);\r\n    try {\r\n      const field = itemType === 'users' ? 'isActive' : 'status';\r\n      const promises = selectedItems.map(id => \r\n        updateDoc(doc(db, itemType, id), { [field]: status })\r\n      );\r\n      await Promise.all(promises);\r\n      \r\n      toast.success(`ƒê√£ c·∫≠p nh·∫≠t ${selectedItems.length} ${itemType}!`);\r\n      onClearSelection();\r\n      onRefresh();\r\n    } catch (error) {\r\n      toast.error('L·ªói khi c·∫≠p nh·∫≠t h√†ng lo·∫°t!');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (",
          "index": 450
        },
        {
          "kind": "JSXText",
          "text": "ƒê√£ ch·ªçn {selectedItems.length} {itemType}",
          "index": 1998
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói khi x√≥a h√†ng lo·∫°t!",
          "index": 1140
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªói khi c·∫≠p nh·∫≠t h√†ng lo·∫°t!",
          "index": 1708
        }
      ]
    },
    {
      "file": "features\\admin\\components\\AdminProtectedRoute.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "= ({ children }) => {\r\n  const { user, isAuthenticated } = useSelector((state: RootState) => state.auth);\r\n  const { t } = useTranslation();\r\n\r\n  // Ki·ªÉm tra xem user ƒë√£ ƒëƒÉng nh·∫≠p v√† c√≥ role admin kh√¥ng\r\n  if (!isAuthenticated || !user) {\r\n    return",
          "index": 351
        }
      ]
    },
    {
      "file": "features\\auth\\services\\otpService.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "=> {\r\n  try {\r\n    const q = query(\r\n      collection(db, 'otp_verifications'),\r\n      where('email', '==', email.toLowerCase().trim()),\r\n      where('isVerified', '==', false)\r\n    );\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    \r\n    if (querySnapshot.empty) {\r\n      return { success: false, message: 'Kh√¥ng t√¨m th·∫•y m√£ OTP ho·∫∑c m√£ ƒë√£ h·∫øt h·∫°n' };\r\n    }\r\n\r\n    const otpDoc = querySnapshot.docs[0];\r\n    const otpData = otpDoc.data() as OTPVerification;\r\n    \r\n    // Check if OTP has expired\r\n    const expiresAt = otpData.expiresAt instanceof Date ? otpData.expiresAt : otpData.expiresAt.toDate();\r\n    if (new Date() > expiresAt) {\r\n      await deleteDoc(otpDoc.ref);\r\n      return { success: false, message: 'M√£ OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi' };\r\n    }\r\n\r\n    // Check max attempts\r\n    if (otpData.attempts >= otpData.maxAttempts) {\r\n      await deleteDoc(otpDoc.ref);\r\n      return { success: false, message: 'ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi' };\r\n    }\r\n\r\n    // Verify code\r\n    if (otpData.code === inputCode.trim()) {\r\n      // Mark as verified and delete the record\r\n      await deleteDoc(otpDoc.ref);\r\n      return { success: true, message: 'X√°c th·ª±c th√†nh c√¥ng!' };\r\n    } else {\r\n      // Increment attempts\r\n      await updateDoc(otpDoc.ref, {\r\n        attempts: otpData.attempts + 1\r\n      });\r\n      \r\n      const remainingAttempts = otpData.maxAttempts - (otpData.attempts + 1);\r\n      return { \r\n        success: false, \r\n        message: `M√£ OTP kh√¥ng ƒë√∫ng. C√≤n l·∫°i ${remainingAttempts} l·∫ßn th·ª≠` \r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error('Error verifying OTP:', error);\r\n    return { success: false, message: 'C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c m√£ OTP' };\r\n  }\r\n};\r\n\r\n// Send OTP via email (using EmailJS - no server required)\r\nexport const sendOTPEmail = async (email: string, code: string): Promise",
          "index": 2063
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n  try {\r\n    console.log(`üìß Sending OTP via EmailJS to ${email}...`);\r\n    \r\n    // G·ª≠i email qua EmailJS (tr·ª±c ti·∫øp t·ª´ browser)\r\n    const result = await emailJSService.sendOTPEmail(email, code);\r\n    \r\n    if (result.success) {\r\n      console.log(`‚úÖ OTP email sent successfully to ${email}`);\r\n      \r\n      // L∆∞u v√†o email_queue ƒë·ªÉ tracking\r\n      try {\r\n        await addDoc(collection(db, 'email_queue'), {\r\n          to: email,\r\n          template: 'otp_verification',\r\n          data: {\r\n            code,\r\n            expiresIn: '10 ph√∫t'\r\n          },\r\n          createdAt: serverTimestamp(),\r\n          status: 'sent_via_emailjs',\r\n          method: 'emailjs'\r\n        });\r\n      } catch (dbError) {\r\n        console.warn('Failed to log email to queue:', dbError);\r\n        // Kh√¥ng fail to√†n b·ªô process n·∫øu logging th·∫•t b·∫°i\r\n      }\r\n      \r\n      return true;\r\n    } else {\r\n      throw new Error(result.messageKey || 'Failed to send email via EmailJS');\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Error sending OTP email:', error);\r\n    throw new Error(error.message || 'Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.');\r\n  }\r\n};\r\n\r\n// Main function to generate and send OTP\r\nexport const generateAndSendOTP = async (email: string): Promise",
          "index": 3936
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n  try {\r\n    const code = generateOTP();\r\n    \r\n    console.log(`üî¢ Generated OTP: ${code} for ${email}`);\r\n    \r\n    // Store OTP in database first\r\n    await storeOTP(email, code);\r\n    console.log(`üíæ OTP stored in database for ${email}`);\r\n    \r\n    // Send email via SMTP\r\n    await sendOTPEmail(email, code);\r\n    \r\n    return { \r\n      success: true, \r\n      message: `M√£ x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ${email}. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ v√† nh·∫≠p m√£ 6 s·ªë.` \r\n    };\r\n  } catch (error: any) {\r\n    console.error('Error generating and sending OTP:', error);\r\n    \r\n    // Check specific error types\r\n    if (error.message.includes('internet') || error.message.includes('network')) {\r\n      return { \r\n        success: false, \r\n        message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi internet. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.' \r\n      };\r\n    }\r\n    \r\n    return { \r\n      success: false, \r\n      message: error.message || 'C√≥ l·ªói x·∫£y ra khi g·ª≠i m√£ x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i sau.' \r\n    };\r\n  }\r\n};\r\n\r\n// Cleanup expired OTPs (should be called periodically)\r\nexport const cleanupExpiredOTPs = async (): Promise",
          "index": 5257
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t√¨m th·∫•y m√£ OTP ho·∫∑c m√£ ƒë√£ h·∫øt h·∫°n",
          "index": 2376
        },
        {
          "kind": "StringLiteral",
          "text": "M√£ OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi",
          "index": 2787
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠. Vui l√≤ng y√™u c·∫ßu m√£ m·ªõi",
          "index": 3000
        },
        {
          "kind": "StringLiteral",
          "text": "X√°c th·ª±c th√†nh c√¥ng!",
          "index": 3253
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c m√£ OTP",
          "index": 3745
        },
        {
          "kind": "StringLiteral",
          "text": "10 ph√∫t",
          "index": 4483
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.",
          "index": 5039
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ k·∫øt n·ªëi internet. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.",
          "index": 6008
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói x·∫£y ra khi g·ª≠i m√£ x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i sau.",
          "index": 6177
        }
      ]
    },
    {
      "file": "features\\auth\\pages\\Profile.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "('overview');\r\n  \r\n  // Profile edit states\r\n  const [displayName, setDisplayName] = useState(user?.displayName || '');\r\n  const [currentPassword, setCurrentPassword] = useState(''); // M·∫≠t kh·∫©u c≈©\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [avatarUrl, setAvatarUrl] = useState(user?.photoURL || '');\r\n  const [saving, setSaving] = useState(false);\r\n  \r\n  // Enhanced pagination and filtering\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [showAll, setShowAll] = useState(false);\r\n  const [sortBy, setSortBy] = useState",
          "index": 1420
        },
        {
          "kind": "StringLiteral",
          "text": "Quiz kh√¥ng t√™n",
          "index": 14124
        },
        {
          "kind": "StringLiteral",
          "text": "Xem l·∫°i quiz",
          "index": 15308
        },
        {
          "kind": "StringLiteral",
          "text": "Xem k·∫øt qu·∫£ chi ti·∫øt",
          "index": 15579
        }
      ]
    },
    {
      "file": "features\\auth\\pages\\AuthPageNew.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{\r\n    if (!user) return;\r\n\r\n    const userDocRef = doc(db, 'users', user.uid);\r\n    const userSnapshot = await getDoc(userDocRef);\r\n\r\n    if (!userSnapshot.exists()) {\r\n      await setDoc(userDocRef, {\r\n        uid: user.uid,\r\n        email: user.email,\r\n        role: 'user',\r\n        createdAt: new Date(),\r\n        isActive: true,\r\n        emailVerified: user.emailVerified,\r\n        needsRoleSelection: true,\r\n        ...additionalData\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleRegister = async () => {\r\n    if (!validateForm()) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      // First, send OTP to email\r\n      const otpResult = await generateAndSendOTP(formData.email.trim());\r\n      \r\n      if (otpResult.success) {\r\n        // Store pending user data for after OTP verification\r\n        setPendingUserData({\r\n          email: formData.email.trim(),\r\n          password: formData.password,\r\n          displayName: formData.displayName.trim()\r\n        });\r\n        \r\n        setShowOTPVerification(true);\r\n        toast.success(otpResult.message);\r\n      } else {\r\n        toast.error(otpResult.message);\r\n      }\r\n\r\n    } catch (error: any) {\r\n      console.error('Registration error:', error);\r\n      toast.error(t('auth.errors.otpSendError'));\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      // Create user account after OTP verification\r\n      const userCredential = await createUserWithEmailAndPassword(\r\n        auth, \r\n        pendingUserData.email, \r\n        pendingUserData.password\r\n      );\r\n\r\n      // Create user document in Firestore (already verified)\r\n      await createUserDocument(userCredential.user, {\r\n        displayName: pendingUserData.displayName,\r\n        emailVerified: true, // Already verified via OTP\r\n        verificationMethod: 'otp'\r\n      });\r\n\r\n      toast.success(t('auth.registerSuccess'));\r\n      \r\n      // Reset form and states\r\n      setFormData({\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        displayName: '',\r\n        acceptTerms: false\r\n      });\r\n      setPendingUserData(null);\r\n      setShowOTPVerification(false);\r\n      \r\n      // Navigate to role selection or dashboard\r\n      navigate('/role-selection');\r\n\r\n    } catch (error: any) {\r\n      console.error('Final registration error:', error);\r\n      \r\n      // Handle specific Firebase errors\r\n      switch (error.code) {\r\n        case 'auth/email-already-in-use':\r\n          toast.error(t('auth.errors.emailAlreadyInUse'));\r\n          break;\r\n        case 'auth/weak-password':\r\n          toast.error(t('auth.errors.weakPassword'));\r\n          break;\r\n        case 'auth/invalid-email':\r\n          toast.error(t('auth.errors.invalidEmail'));\r\n          break;\r\n        default:\r\n          toast.error(t('auth.errors.registerError'));\r\n  };\r\n\r\n  const handleLogin = async () => {\r\n    if (!validateForm()) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      console.log('üîê Attempting login with email:', formData.email.trim());\r\n      \r\n      const userCredential = await signInWithEmailAndPassword(\r\n        auth, \r\n        formData.email.trim().toLowerCase(), // Normalize email to lowercase\r\n        formData.password\r\n      );\r\n\r\n      console.log('‚úÖ Login successful for user:', userCredential.user.uid);\r\n\r\n      // Get user document to check role\r\n      const userDocRef = doc(db, 'users', userCredential.user.uid);\r\n      const userDoc = await getDoc(userDocRef);\r\n      \r\n      let redirectPath = '/dashboard'; // Default redirect\r\n      \r\n      if (userDoc.exists()) {\r\n        const userData = userDoc.data();\r\n        const userRole = userData.role;\r\n        \r\n        console.log('üë§ User role:', userRole);\r\n        \r\n        // Redirect based on role\r\n        switch (userRole) {\r\n          case 'admin':\r\n            redirectPath = '/dashboard'; // Admin c≈©ng v√†o dashboard ch√≠nh\r\n            break;\r\n          case 'creator':\r\n            redirectPath = '/dashboard'; // Creator c≈©ng v√†o dashboard ch√≠nh\r\n            break;\r\n          case 'user':\r\n          default:\r\n            redirectPath = '/dashboard';\r\n            break;\r\n        }\r\n        \r\n        // Update user document with login time\r\n        await setDoc(userDocRef, {\r\n          lastLoginAt: new Date(),\r\n          emailVerified: userCredential.user.emailVerified\r\n        }, { merge: true });\r\n      } else {\r\n        // Handle case where user document doesn't exist\r\n        console.log('‚ö†Ô∏è User document not found, redirecting to dashboard');\r\n      }\r\n\r\n      toast.success(t('auth.loginSuccess'));\r\n      console.log('üöÄ Redirecting to:', redirectPath);\r\n      navigate(redirectPath);\r\n\r\n    } catch (error: any) {\r\n      console.error('‚ùå Login error:', error.code, error.message);\r\n      \r\n      switch (error.code) {\r\n        case 'auth/user-not-found':\r\n          toast.error(t('auth.errors.userNotFound'));\r\n          break;\r\n        case 'auth/wrong-password':\r\n          toast.error(t('auth.errors.wrongPassword'));\r\n          break;\r\n        case 'auth/invalid-credential':\r\n          toast.error(t('auth.errors.invalidCredential'));\r\n          break;\r\n        case 'auth/invalid-email':\r\n          toast.error(t('auth.errors.invalidEmail'));\r\n          break;\r\n        case 'auth/user-disabled':\r\n          toast.error(t('auth.errors.userDisabled'));\r\n          break;\r\n        case 'auth/too-many-requests':\r\n          toast.error(t('auth.errors.tooManyRequests'));\r\n          break;\r\n        default:\r\n          toast.error(t('auth.errors.loginError'));\r\n      navigate('/');\r\n    } catch (error: any) {\r\n      console.error('Google login error:', error);\r\n      toast.error(t('auth.errors.googleLoginError') : t('auth.register')}",
          "index": 3037
        }
      ]
    },
    {
      "file": "features\\auth\\components\\RoleSelection.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleRoleSelection = async (role: 'user' | 'creator') => {\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Th·ª≠ c·∫≠p nh·∫≠t Firestore tr∆∞·ªõc\r\n      const userDocRef = doc(db, 'users', user.uid);\r\n      await setDoc(userDocRef, { \r\n        role: role,\r\n        roleSelectedAt: new Date(),\r\n        needsRoleSelection: false, // Clear the flag\r\n        status: 'active',\r\n        email: user.email,\r\n        displayName: user.displayName,\r\n        updatedAt: new Date()\r\n      }, { merge: true });\r\n\r\n      // C·∫≠p nh·∫≠t Redux store\r\n      dispatch(setRole(role));\r\n      console.log('Role updated in Redux:', role);\r\n      \r\n      // L∆∞u v√†o localStorage nh∆∞ backup\r\n      localStorage.setItem(`user_role_${user.uid}`, role);\r\n      \r\n      // Call callback v·ªõi role ƒë·ªÉ parent c√≥ th·ªÉ navigate\r\n      toast.success(`Ch√†o m·ª´ng b·∫°n v·ªõi vai tr√≤ ${role === 'user' ? 'Ng∆∞·ªùi d√πng' : 'Ng∆∞·ªùi t·∫°o'}!`);\r\n      \r\n      // G·ªçi callback ngay l·∫≠p t·ª©c, kh√¥ng delay\r\n      onRoleSelected(role);\r\n      \r\n    } catch (error: any) {\r\n      console.error('Error updating user role:', error);\r\n      \r\n      // N·∫øu Firestore fail, v·∫´n l∆∞u role v√†o localStorage v√† Redux\r\n      console.warn('Firestore update failed, using localStorage fallback');\r\n      \r\n      // C·∫≠p nh·∫≠t Redux store\r\n      dispatch(setRole(role));\r\n      console.log('Role updated in Redux (fallback):', role);\r\n      \r\n      // L∆∞u v√†o localStorage \r\n      localStorage.setItem(`user_role_${user.uid}`, role);\r\n      \r\n      // Call callback v·ªõi role ƒë·ªÉ parent c√≥ th·ªÉ navigate\r\n      toast.success(`Ch√†o m·ª´ng b·∫°n v·ªõi vai tr√≤ ${role === 'user' ? 'Ng∆∞·ªùi d√πng' : 'Ng∆∞·ªùi t·∫°o'}!`);\r\n      \r\n      // G·ªçi callback ngay l·∫≠p t·ª©c, kh√¥ng delay\r\n      onRoleSelected(role);\r\n      \r\n      // Hi·ªÉn th·ªã th√¥ng b√°o nh·∫π nh√†ng\r\n      toast.info('Vai tr√≤ ƒë√£ ƒë∆∞·ª£c ch·ªçn. D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c ƒë·ªìng b·ªô khi k·∫øt n·ªëi ·ªïn ƒë·ªãnh.');\r\n      \r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (",
          "index": 596
        },
        {
          "kind": "JSXText",
          "text": "Ch·ªçn vai tr√≤ c·ªßa b·∫°n",
          "index": 3361
        },
        {
          "kind": "JSXText",
          "text": "H√£y ch·ªçn vai tr√≤ ph√π h·ª£p ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng Quiz Trivia",
          "index": 3427
        },
        {
          "kind": "JSXText",
          "text": "User (Ng∆∞·ªùi d√πng)",
          "index": 4766
        },
        {
          "kind": "JSXText",
          "text": "Tham gia l√†m quiz, xem k·∫øt qu·∫£ v√† theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p c·ªßa b·∫°n",
          "index": 4843
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ L√†m c√°c quiz c√≥ s·∫µn",
          "index": 5046
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ Xem l·ªãch s·ª≠ k·∫øt qu·∫£",
          "index": 5096
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ Theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p",
          "index": 5146
        },
        {
          "kind": "JSXText",
          "text": "Creator (Ng∆∞·ªùi t·∫°o)",
          "index": 6380
        },
        {
          "kind": "JSXText",
          "text": "T·∫°o quiz cho c·ªông ƒë·ªìng, bao g·ªìm t·∫•t c·∫£ quy·ªÅn c·ªßa User",
          "index": 6459
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ T·∫•t c·∫£ quy·ªÅn c·ªßa User",
          "index": 6649
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ T·∫°o quiz m·ªõi",
          "index": 6701
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ Qu·∫£n l√Ω quiz ƒë√£ t·∫°o",
          "index": 6744
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ Quiz c·∫ßn admin ph√™ duy·ªát",
          "index": 6794
        },
        {
          "kind": "JSXText",
          "text": "ƒêang thi·∫øt l·∫≠p vai tr√≤...",
          "index": 7692
        },
        {
          "kind": "JSXText",
          "text": ") : (\r\n              'X√°c nh·∫≠n vai tr√≤'\r\n            )}",
          "index": 7757
        },
        {
          "kind": "JSXText",
          "text": "B·∫°n c√≥ th·ªÉ thay ƒë·ªïi vai tr√≤ sau trong ph·∫ßn c√†i ƒë·∫∑t t√†i kho·∫£n",
          "index": 7958
        },
        {
          "kind": "StringLiteral",
          "text": "Ng∆∞·ªùi d√πng",
          "index": 1563
        },
        {
          "kind": "StringLiteral",
          "text": "Ng∆∞·ªùi t·∫°o",
          "index": 1578
        },
        {
          "kind": "StringLiteral",
          "text": "Ng∆∞·ªùi d√πng",
          "index": 2298
        },
        {
          "kind": "StringLiteral",
          "text": "Ng∆∞·ªùi t·∫°o",
          "index": 2313
        },
        {
          "kind": "StringLiteral",
          "text": "Vai tr√≤ ƒë√£ ƒë∆∞·ª£c ch·ªçn. D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c ƒë·ªìng b·ªô khi k·∫øt n·ªëi ·ªïn ƒë·ªãnh.",
          "index": 2481
        },
        {
          "kind": "StringLiteral",
          "text": "X√°c nh·∫≠n vai tr√≤",
          "index": 7793
        }
      ]
    },
    {
      "file": "features\\auth\\components\\ProtectedRoute.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "B·∫°n c·∫ßn c√≥ vai tr√≤ Creator ho·∫∑c Admin ƒë·ªÉ truy c·∫≠p trang n√†y.",
          "index": 2197
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang x√°c th·ª±c...",
          "index": 909
        }
      ]
    },
    {
      "file": "features\\auth\\components\\OTPVerification.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": ") => {\r\n    if (e.key === 'Backspace' && !otp[index] && index > 0) {\r\n      inputRefs.current[index - 1]?.focus();\r\n    }\r\n  };\r\n\r\n  // Handle paste\r\n  const handlePaste = (e: React.ClipboardEvent) => {\r\n    e.preventDefault();\r\n    const pastedData = e.clipboardData.getData('text').slice(0, 6);\r\n    if (!/^\\d+$/.test(pastedData)) return;\r\n\r\n    const newOtp = pastedData.split('').concat(['', '', '', '', '', '']).slice(0, 6);\r\n    setOtp(newOtp);\r\n\r\n    // Focus on next empty input or last input\r\n    const nextEmptyIndex = newOtp.findIndex(digit => !digit);\r\n    const focusIndex = nextEmptyIndex === -1 ? 5 : Math.min(nextEmptyIndex, 5);\r\n    inputRefs.current[focusIndex]?.focus();\r\n  };\r\n\r\n  // Verify OTP\r\n  const handleVerifyOTP = async () => {\r\n    const otpCode = otp.join('');\r\n    if (otpCode.length !== 6) {\r\n      toast.error('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß 6 s·ªë');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const result = await verifyOTP(email, otpCode);\r\n      \r\n      if (result.success) {\r\n        toast.success(result.message);\r\n        onVerificationSuccess();\r\n      } else {\r\n        toast.error(result.message);\r\n        // Clear OTP on failure\r\n        setOtp(['', '', '', '', '', '']);\r\n        inputRefs.current[0]?.focus();\r\n      }\r\n    } catch (error) {\r\n      toast.error('C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Resend OTP\r\n  const handleResendOTP = async () => {\r\n    setResendLoading(true);\r\n    try {\r\n      const result = await generateAndSendOTP(email);\r\n      \r\n      if (result.success) {\r\n        toast.success(result.message);\r\n        setTimer(60);\r\n        setCanResend(false);\r\n        setOtp(['', '', '', '', '', '']);\r\n        inputRefs.current[0]?.focus();\r\n      } else {\r\n        toast.error(result.message);\r\n      }\r\n    } catch (error) {\r\n      toast.error('Kh√¥ng th·ªÉ g·ª≠i l·∫°i m√£ x√°c th·ª±c');\r\n    } finally {\r\n      setResendLoading(false);\r\n    }\r\n  };\r\n\r\n  // Auto verify when all 6 digits are entered\r\n  useEffect(() => {\r\n    const otpCode = otp.join('');\r\n    if (otpCode.length === 6 && !loading) {\r\n      handleVerifyOTP();\r\n    }\r\n  }, [otp]);\r\n\r\n  return (",
          "index": 1736
        },
        {
          "kind": "JSXText",
          "text": "Ch√∫ng t√¥i ƒë√£ g·ª≠i m√£ x√°c th·ª±c 6 s·ªë ƒë·∫øn",
          "index": 4375
        },
        {
          "kind": "JSXText",
          "text": "Nh·∫≠p m√£ x√°c th·ª±c",
          "index": 4647
        },
        {
          "kind": "JSXText",
          "text": "G·ª≠i l·∫°i m√£ sau {timer}s",
          "index": 5690
        },
        {
          "kind": "JSXText",
          "text": "G·ª≠i l·∫°i m√£ x√°c th·ª±c",
          "index": 6073
        },
        {
          "kind": "JSXText",
          "text": "X√°c th·ª±c",
          "index": 6778
        },
        {
          "kind": "JSXText",
          "text": "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£?",
          "index": 7192
        },
        {
          "kind": "JSXText",
          "text": "Ki·ªÉm tra th∆∞ m·ª•c spam ho·∫∑c nh·∫•n \"G·ª≠i l·∫°i m√£ x√°c th·ª±c\"",
          "index": 7228
        },
        {
          "kind": "StringLiteral",
          "text": "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß 6 s·ªë",
          "index": 2580
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c",
          "index": 3055
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ g·ª≠i l·∫°i m√£ x√°c th·ª±c",
          "index": 3615
        },
        {
          "kind": "StringLiteral",
          "text": "G·ª≠i l·∫°i m√£ x√°c th·ª±c",
          "index": 7261
        }
      ]
    },
    {
      "file": "features\\auth\\components\\ForgotPassword.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "('email');\r\n  const [otp, setOtp] = useState('');\r\n  const [generatedOTP, setGeneratedOTP] = useState('');\r\n\r\n  const handleSendOTP = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!email) {\r\n      toast.error('Vui l√≤ng nh·∫≠p email');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      // T·∫°o OTP ng·∫´u nhi√™n\r\n      const otpCode = Math.floor(100000 + Math.random() * 900000).toString();\r\n      setGeneratedOTP(otpCode);\r\n\r\n      // G·ª≠i OTP qua EmailJS\r\n      await emailJSService.sendOTPEmail(email, otpCode);\r\n      \r\n      toast.success('M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n!');\r\n      setStep('otp');\r\n    } catch (error) {\r\n      console.error('Error sending OTP:', error);\r\n      toast.error('Kh√¥ng th·ªÉ g·ª≠i m√£ OTP. Vui l√≤ng th·ª≠ l·∫°i.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleVerifyOTP = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!otp) {\r\n      toast.error('Vui l√≤ng nh·∫≠p m√£ OTP');\r\n      return;\r\n    }\r\n\r\n    if (otp !== generatedOTP) {\r\n      toast.error('M√£ OTP kh√¥ng ƒë√∫ng');\r\n      return;\r\n    }\r\n\r\n    toast.success('X√°c th·ª±c th√†nh c√¥ng!');\r\n    setStep('reset');\r\n  };\r\n\r\n  const handleResetPassword = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    setLoading(true);\r\n    try {\r\n      // S·ª≠ d·ª•ng Firebase's sendPasswordResetEmail\r\n      await sendPasswordResetEmail(auth, email);\r\n      toast.success('Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i! H√£y ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n.');\r\n      onBack();\r\n    } catch (error: any) {\r\n      console.error('Error resetting password:', error);\r\n      if (error.code === 'auth/user-not-found') {\r\n        toast.error('Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y');\r\n      } else {\r\n        toast.error('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.');\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (",
          "index": 690
        },
        {
          "kind": "JSXText",
          "text": "Qu√™n m·∫≠t kh·∫©u",
          "index": 3086
        },
        {
          "kind": "JSXText",
          "text": "Ch√∫ng t√¥i s·∫Ω g·ª≠i m√£ OTP ƒë·∫øn email n√†y ƒë·ªÉ x√°c th·ª±c danh t√≠nh.",
          "index": 4007
        },
        {
          "kind": "JSXText",
          "text": "{loading ? 'ƒêang g·ª≠i...' : 'G·ª≠i m√£ OTP'}",
          "index": 4531
        },
        {
          "kind": "JSXText",
          "text": "M√£ OTP",
          "index": 4839
        },
        {
          "kind": "JSXText",
          "text": "Nh·∫≠p m√£ OTP 6 s·ªë ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email:",
          "index": 5381
        },
        {
          "kind": "JSXText",
          "text": "{loading ? 'ƒêang x√°c th·ª±c...' : 'X√°c th·ª±c'}",
          "index": 6278
        },
        {
          "kind": "JSXText",
          "text": "X√°c th·ª±c th√†nh c√¥ng!",
          "index": 6834
        },
        {
          "kind": "JSXText",
          "text": "Ch√∫ng t√¥i s·∫Ω g·ª≠i link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn email c·ªßa b·∫°n.",
          "index": 6917
        },
        {
          "kind": "JSXText",
          "text": "{loading ? 'ƒêang g·ª≠i email...' : 'G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u'}",
          "index": 7436
        },
        {
          "kind": "JSXText",
          "text": "Quay l·∫°i ƒëƒÉng nh·∫≠p",
          "index": 7732
        },
        {
          "kind": "StringLiteral",
          "text": "Vui l√≤ng nh·∫≠p email",
          "index": 920
        },
        {
          "kind": "StringLiteral",
          "text": "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n!",
          "index": 1262
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ g·ª≠i m√£ OTP. Vui l√≤ng th·ª≠ l·∫°i.",
          "index": 1420
        },
        {
          "kind": "StringLiteral",
          "text": "Vui l√≤ng nh·∫≠p m√£ OTP",
          "index": 1642
        },
        {
          "kind": "StringLiteral",
          "text": "M√£ OTP kh√¥ng ƒë√∫ng",
          "index": 1743
        },
        {
          "kind": "StringLiteral",
          "text": "X√°c th·ª±c th√†nh c√¥ng!",
          "index": 1808
        },
        {
          "kind": "StringLiteral",
          "text": "Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i! H√£y ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n.",
          "index": 2115
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y",
          "index": 2360
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.",
          "index": 2440
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang g·ª≠i...",
          "index": 4559
        },
        {
          "kind": "StringLiteral",
          "text": "G·ª≠i m√£ OTP",
          "index": 4575
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang x√°c th·ª±c...",
          "index": 6308
        },
        {
          "kind": "StringLiteral",
          "text": "X√°c th·ª±c",
          "index": 6329
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang g·ª≠i email...",
          "index": 7464
        },
        {
          "kind": "StringLiteral",
          "text": "G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
          "index": 7486
        }
      ]
    },
    {
      "file": "features\\auth\\components\\AutoLogoutOnBan.tsx",
      "matches": [
        {
          "kind": "StringLiteral",
          "text": "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kho√°. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.",
          "index": 1038
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\ResultPage\\index.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{\r\n  const { result, quiz, quizId, isLoading } = useResultData();\r\n  \r\n  // T√≠nh to√°n ƒëi·ªÉm s·ªë, ki·ªÉm tra h·ª£p l·ªá\r\n  const correct = safeNumber(result?.correct);\r\n  const total = safeNumber(result?.total);\r\n  const percentage = total > 0 ? Math.round((correct / total) * 100) : 0;\r\n  \r\n  // Pass current result to leaderboard\r\n  const currentResult = result ? {\r\n    score: { percentage },\r\n    correct,\r\n    total,\r\n    timeSpent: result.timeSpent\r\n  } : undefined;\r\n  \r\n  const { leaderboard, userRank, loadingStats } = useLeaderboard(quizId, currentResult);\r\n\r\n  // Debug logging\r\n  console.log('üéØ ResultPage render:', {\r\n    quizId,\r\n    isLoading,\r\n    hasResult: !!result,\r\n    hasQuiz: !!quiz,\r\n    leaderboardLength: leaderboard.length,\r\n    loadingStats,\r\n    userRank\r\n  });\r\n\r\n  if (isLoading) {\r\n    return",
          "index": 419
        },
        {
          "kind": "JSXText",
          "text": "{/* K·∫øt qu·∫£ t·ªïng quan */}",
          "index": 1496
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\QuizResultViewer\\index.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      if (!resultId) {\r\n        console.error('‚ùå No resultId provided');\r\n        navigate('/profile');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setLoading(true);\r\n        console.log('üîç Loading quiz result:', resultId);\r\n\r\n        // Fetch quiz result\r\n        const resultData = await getQuizResultById(resultId);\r\n        if (!resultData) {\r\n          console.error('‚ùå Quiz result not found:', resultId);\r\n          toast.error('Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ quiz!');\r\n          navigate('/profile');\r\n          return;\r\n        }\r\n\r\n        console.log('‚úÖ Loaded quiz result:', resultData);\r\n        setResult(resultData as QuizResult);\r\n\r\n        // Fetch quiz details\r\n        if (resultData.quizId) {\r\n          console.log('üîç Loading quiz details:', resultData.quizId);\r\n          const quizData = await getQuizById(resultData.quizId);\r\n          if (quizData) {\r\n            console.log('‚úÖ Loaded quiz details:', quizData.title);\r\n            setQuiz(quizData);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('‚ùå Error loading data:', error);\r\n        toast.error('Kh√¥ng th·ªÉ t·∫£i k·∫øt qu·∫£ quiz!');\r\n        navigate('/profile');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, [resultId, navigate]);\r\n\r\n  // Calculate percentage with unified logic (same as before)\r\n  const getPercentage = () => {\r\n    if (!result) return 0;\r\n    \r\n    // Primary: Use correctAnswers/totalQuestions if available\r\n    if (typeof result.correctAnswers === 'number' && typeof result.totalQuestions === 'number' && result.totalQuestions > 0) {\r\n      return Math.round((result.correctAnswers / result.totalQuestions) * 100);\r\n    } \r\n    // Fallback: Use score field\r\n    else if (typeof result.score === 'number' && !isNaN(result.score)) {\r\n      return result.score",
          "index": 992
        },
        {
          "kind": "JSXText",
          "text": "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£",
          "index": 4325
        },
        {
          "kind": "JSXText",
          "text": "navigate('/profile')}\r\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\r\n          >\r\n            Quay l·∫°i Profile",
          "index": 4399
        },
        {
          "kind": "JSXText",
          "text": "{/* K·∫øt qu·∫£ t·ªïng quan */}",
          "index": 4850
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ quiz!",
          "index": 1551
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i k·∫øt qu·∫£ quiz!",
          "index": 2211
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\QuizPage\\index.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "ƒêang t·∫£i quiz...",
          "index": 964
        },
        {
          "kind": "JSXText",
          "text": "Kh√¥ng th·ªÉ t·∫£i quiz",
          "index": 1308
        },
        {
          "kind": "JSXText",
          "text": "ƒêang x·ª≠ l√Ω k·∫øt qu·∫£...",
          "index": 2803
        },
        {
          "kind": "JSXText",
          "text": "{/* Header v·ªõi Timer v√† Progress */}",
          "index": 2970
        },
        {
          "kind": "JSXText",
          "text": "Tho√°t",
          "index": 3744
        },
        {
          "kind": "JSXText",
          "text": "navigate('/multiplayer', { state: { selectedQuiz: quiz } })}\r\n                className=\"px-3 py-2 rounded-lg bg-gradient-to-r from-indigo-600 to-purple-600 text-white text-sm font-medium hover:opacity-90 shadow-sm\"\r\n                title=\"Ch∆°i c√πng b·∫°n b√®\"\r\n              >\r\n                Ch∆°i c√πng",
          "index": 4074
        },
        {
          "kind": "JSXText",
          "text": "C√¢u tr∆∞·ªõc",
          "index": 6688
        },
        {
          "kind": "JSXText",
          "text": "N·ªôp b√†i",
          "index": 7412
        },
        {
          "kind": "JSXText",
          "text": "C√¢u ti·∫øp",
          "index": 7792
        },
        {
          "kind": "JSXText",
          "text": "{/* Th√™m c·∫£nh b√°o h·∫øt gi·ªù n·∫øu c·∫ßn thi·∫øt - hi·ªán khi c√≤n",
          "index": 8495
        },
        {
          "kind": "JSXText",
          "text": "{isTimeCritical \r\n              ? \"Ch·ªâ c√≤n √≠t h∆°n 1 ph√∫t! H√£y ho√†n th√†nh ngay.\" \r\n              : \"S·∫Øp h·∫øt gi·ªù! Ch·ªâ c√≤n 10% th·ªùi gian.\"}",
          "index": 8820
        },
        {
          "kind": "StringLiteral",
          "text": "Quiz kh√¥ng t·ªìn t·∫°i",
          "index": 1383
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆°i c√πng b·∫°n b√®",
          "index": 4315
        },
        {
          "kind": "StringLiteral",
          "text": "Ch·ªâ c√≤n √≠t h∆°n 1 ph√∫t! H√£y ho√†n th√†nh ngay.",
          "index": 8869
        },
        {
          "kind": "StringLiteral",
          "text": "S·∫Øp h·∫øt gi·ªù! Ch·ªâ c√≤n 10% th·ªùi gian.",
          "index": 8933
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\CreateQuizPage\\index.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "(defaultQuiz);\r\n  const [step, setStep] = useState(0);\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  // Ki·ªÉm tra quy·ªÅn truy c·∫≠p\r\n  if (!currentUser) {\r\n    return (",
          "index": 933
        },
        {
          "kind": "JSXText",
          "text": ");\r\n  }\r\n\r\n  // Th√™m c√¢u h·ªèi m·ªõi\r\n  const addQuestion = () => {\r\n    setQuiz(q => ({\r\n      ...q,\r\n      questions: [\r\n        ...q.questions,\r\n        {\r\n          id: generateId(),\r\n          text: '',\r\n          type: 'multiple',\r\n          answers: [\r\n            { id: generateId(), text: '', isCorrect: true },\r\n            { id: generateId(), text: '', isCorrect: false },\r\n            { id: generateId(), text: '', isCorrect: false },\r\n            { id: generateId(), text: '', isCorrect: false },\r\n          ],\r\n          points: 1,\r\n          correctAnswer: '',\r\n          acceptedAnswers: [],\r\n        },\r\n      ],\r\n    }));\r\n  };\r\n\r\n  // S·ª≠a c√¢u h·ªèi\r\n  const updateQuestion = (idx: number, q: Question) => {\r\n    setQuiz(prev => ({\r\n      ...prev,\r\n      questions: prev.questions.map((item, i) => i === idx ? q : item),\r\n    }));\r\n  };\r\n\r\n  // X√≥a c√¢u h·ªèi\r\n  const deleteQuestion = (idx: number) => {\r\n    setQuiz(prev => ({\r\n      ...prev,\r\n      questions: prev.questions.filter((_, i) => i !== idx),\r\n    }));\r\n  };\r\n\r\n  // Di chuy·ªÉn c√¢u h·ªèi\r\n  const moveQuestion = (fromIndex: number, toIndex: number) => {\r\n    if (toIndex",
          "index": 1859
        },
        {
          "kind": "JSXText",
          "text": "= quiz.questions.length) return;\r\n    \r\n    setQuiz(prev => {\r\n      const newQuestions = [...prev.questions];\r\n      const [moved] = newQuestions.splice(fromIndex, 1);\r\n      newQuestions.splice(toIndex, 0, moved);\r\n      return { ...prev, questions: newQuestions };\r\n    });\r\n  };\r\n\r\n  // Validate t·ª´ng step\r\n  const validateStep = (stepIndex: number): boolean => {\r\n    switch (stepIndex) {\r\n      case 0:\r\n        return !!(quiz.title && quiz.description && quiz.category && quiz.difficulty);\r\n      case 1:\r\n        return quiz.questions.length > 0 && quiz.questions.every(q => {\r\n          // Ki·ªÉm tra text c√¢u h·ªèi\r\n          if (!q.text) return false;\r\n          \r\n          // Ki·ªÉm tra theo t·ª´ng lo·∫°i c√¢u h·ªèi\r\n          switch (q.type) {\r\n            case 'short_answer':\r\n              return !!q.correctAnswer;\r\n            case 'boolean':\r\n            case 'multiple':\r\n            case 'image':\r\n              return q.answers.some(a => a.isCorrect) && q.answers.every(a => a.text);\r\n            default:\r\n              return false;\r\n          }\r\n        });\r\n      case 2:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  // Submit quiz\r\n  const handleSubmit = async () => {\r\n    if (!currentUser) {\r\n      toast.error(t('createQuiz.loginRequired'));\r\n      return;\r\n    }\r\n\r\n    if (!validateStep(1)) {\r\n      toast.error(t('createQuiz.completeAllInfo'));\r\n      return;\r\n    }\r\n\r\n    setSubmitting(true);\r\n    try {\r\n      await addDoc(collection(db, 'quizzes'), {\r\n        ...quiz,\r\n        createdBy: currentUser.uid,\r\n        createdAt: serverTimestamp(),\r\n        updatedAt: serverTimestamp(),\r\n        isPublished: true,\r\n        tags: [],\r\n        status: 'pending', // ƒê·∫∑t tr·∫°ng th√°i ch·ªù duy·ªát\r\n      });\r\n\r\n      toast.success(t('createQuiz.createSuccess'));\r\n      setQuiz(defaultQuiz);\r\n      setStep(0);\r\n    } catch (error) {\r\n      console.error('Error creating quiz:', error);\r\n      toast.error(t('createQuiz.createError'));\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const nextStep = () => {\r\n    if (validateStep(step)) {\r\n      setStep(prev => Math.min(prev + 1, steps.length - 1));\r\n    } else {\r\n      toast.error(t('createQuiz.completeInfoFirst'));\r\n    }\r\n  };\r\n\r\n  const prevStep = () => {\r\n    setStep(prev => Math.max(prev - 1, 0));\r\n  };\r\n\r\n  return (",
          "index": 3022
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\CreateQuizPage\\constants.ts",
      "matches": [
        {
          "kind": "StringLiteral",
          "text": "L·∫≠p tr√¨nh",
          "index": 328
        },
        {
          "kind": "StringLiteral",
          "text": "To√°n h·ªçc",
          "index": 370
        },
        {
          "kind": "StringLiteral",
          "text": "Khoa h·ªçc",
          "index": 414
        },
        {
          "kind": "StringLiteral",
          "text": "L·ªãch s·ª≠",
          "index": 458
        },
        {
          "kind": "StringLiteral",
          "text": "Ng√¥n ng·ªØ",
          "index": 502
        },
        {
          "kind": "StringLiteral",
          "text": "T·ªïng h·ª£p",
          "index": 546
        },
        {
          "kind": "StringLiteral",
          "text": "D·ªÖ",
          "index": 624
        },
        {
          "kind": "StringLiteral",
          "text": "Trung b√¨nh",
          "index": 661
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√≥",
          "index": 704
        },
        {
          "kind": "StringLiteral",
          "text": "Th√¥ng tin Quiz",
          "index": 746
        },
        {
          "kind": "StringLiteral",
          "text": "C√¢u h·ªèi",
          "index": 767
        },
        {
          "kind": "StringLiteral",
          "text": "Xem l·∫°i & Xu·∫•t b·∫£n",
          "index": 781
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\ResultPage\\components\\ResultSummary.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{/* Hi·ªÉn th·ªã th·ªùi gian l√†m b√†i - gi·ªëng y h·ªát Leaderboard */}\r\n          {typeof result.timeSpent === 'number' && (",
          "index": 1367
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\ResultPage\\components\\Leaderboard.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "ÔøΩ L∆Ø·ª¢T M·ªöI NH·∫§T - X·∫æP H·∫†NG #{index + 1}",
          "index": 2872
        },
        {
          "kind": "JSXText",
          "text": "(L∆∞·ª£t tr∆∞·ªõc ƒë√≥)",
          "index": 3183
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\ResultPage\\components\\AnswerReview.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "{quiz.questions.map((question, index) => {\r\n            const userAnswerValue = result.answers[question.id];\r\n            \r\n            // Logic ƒë·ªÉ x√°c ƒë·ªãnh ƒë√°p √°n ƒë√∫ng sai d·ª±a tr√™n lo·∫°i c√¢u h·ªèi\r\n            let isCorrect = false;\r\n            let userAnswerText = '';\r\n            \r\n            switch (question.type) {\r\n              case 'boolean':\r\n              case 'multiple':\r\n              case 'image': {\r\n                const userAnswer = question.answers.find(a => a.id === userAnswerValue);\r\n                isCorrect = userAnswer?.isCorrect || false;\r\n                userAnswerText = userAnswer?.text || 'Ch∆∞a tr·∫£ l·ªùi';\r\n                break;\r\n              }\r\n              case 'short_answer': {\r\n                // Import checkShortAnswer function ho·∫∑c t√≠nh to√°n t·∫°i ƒë√¢y\r\n                const normalizeAnswer = (answer: string) => \r\n                  answer.trim().toLowerCase().replace(/\\s+/g, ' ');\r\n                \r\n                const normalizedUserAnswer = normalizeAnswer(userAnswerValue || '');\r\n                \r\n                if (question.correctAnswer && normalizeAnswer(question.correctAnswer) === normalizedUserAnswer) {\r\n                  isCorrect = true;\r\n                } else if (question.acceptedAnswers) {\r\n                  isCorrect = question.acceptedAnswers.some(accepted => \r\n                    normalizeAnswer(accepted) === normalizedUserAnswer\r\n                  );\r\n                }\r\n                userAnswerText = userAnswerValue || 'Ch∆∞a tr·∫£ l·ªùi';\r\n                break;\r\n              }\r\n              case 'checkbox': {\r\n                const correctIds = question.answers.filter(a => a.isCorrect).map(a => a.id).sort();\r\n                const userIds = Array.isArray(userAnswerValue) ? [...userAnswerValue].sort() : [];\r\n                isCorrect = JSON.stringify(correctIds) === JSON.stringify(userIds);\r\n                const selectedAnswers = question.answers.filter(a => userIds.includes(a.id));\r\n                userAnswerText = selectedAnswers.length > 0 \r\n                  ? selectedAnswers.map(a => a.text).join(', ')\r\n                  : 'Ch∆∞a tr·∫£ l·ªùi';\r\n                break;\r\n              }\r\n            }\r\n\r\n            return (",
          "index": 889
        },
        {
          "kind": "JSXText",
          "text": "{/* Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi c·ªßa user */}",
          "index": 3727
        },
        {
          "kind": "JSXText",
          "text": "C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n:",
          "index": 3937
        },
        {
          "kind": "JSXText",
          "text": "{/* Hi·ªÉn th·ªã ƒë√°p √°n cho multiple choice, image v√† boolean */}\r\n                {(question.type === 'multiple' || question.type === 'image' || question.type === 'boolean') && (",
          "index": 4064
        },
        {
          "kind": "JSXText",
          "text": ")}\r\n                {/* Hi·ªÉn th·ªã ƒë√°p √°n cho checkbox */}\r\n                {question.type === 'checkbox' && (",
          "index": 5790
        },
        {
          "kind": "JSXText",
          "text": ")}\r\n\r\n                {/* Hi·ªÉn th·ªã ƒë√°p √°n cho short answer */}\r\n                {question.type === 'short_answer' && (",
          "index": 8014
        },
        {
          "kind": "JSXText",
          "text": "ƒê√°p √°n ƒë√∫ng:",
          "index": 8356
        },
        {
          "kind": "JSXText",
          "text": "(ho·∫∑c: {question.acceptedAnswers.join(', ')})",
          "index": 8632
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆∞a tr·∫£ l·ªùi",
          "index": 1522
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆∞a tr·∫£ l·ªùi",
          "index": 2394
        },
        {
          "kind": "StringLiteral",
          "text": "Ch∆∞a tr·∫£ l·ªùi",
          "index": 3014
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\ResultPage\\components\\ActionButtons.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "navigate(`/quiz/${quiz.id}`)}\r\n        className=\"bg-blue-600 hover:bg-blue-700\"\r\n      >\r\n        üîÑ L√†m l·∫°i Quiz",
          "index": 734
        },
        {
          "kind": "JSXText",
          "text": "navigate('/multiplayer', { state: { selectedQuiz: quiz } })}\r\n        className=\"bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white\"\r\n      >\r\n        üë• Ch∆°i c√πng b·∫°n b√®",
          "index": 907
        },
        {
          "kind": "JSXText",
          "text": "{\r\n          console.log('üìö Navigating to /quizzes...');\r\n          navigate('/quizzes');\r\n        }}\r\n        variant=\"outline\"\r\n      >\r\n        üìö Xem th√™m Quiz",
          "index": 1191
        },
        {
          "kind": "JSXText",
          "text": "navigate('/dashboard')}\r\n        variant=\"outline\"\r\n      >\r\n        üè† V·ªÅ Dashboard",
          "index": 1420
        },
        {
          "kind": "JSXText",
          "text": "üì§ Chia s·∫ª k·∫øt qu·∫£",
          "index": 1618
        },
        {
          "kind": "JSXText",
          "text": "navigate('/profile')}\r\n        variant=\"outline\"\r\n      >\r\n        üë§ Xem t·∫•t c·∫£ k·∫øt qu·∫£",
          "index": 1710
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\ResultPage\\hooks\\useResultData.ts",
      "matches": [
        {
          "kind": "JSXText",
          "text": "(null);\r\n\r\n  useEffect(() => {\r\n    console.log('üîç ResultPage useEffect - attemptId:', attemptId, 'location.state:', location.state);\r\n    console.log('üîç URL attemptId type and value:', typeof attemptId, attemptId);\r\n    console.log('üîç Current URL:', window.location.href);\r\n    \r\n    if (location.state) {\r\n      // C√≥ state t·ª´ navigation - s·ª≠ d·ª•ng ngay\r\n      const resultData = location.state as ResultState;\r\n      console.log('‚úÖ Using state from navigation:', resultData);\r\n      setResult(resultData);\r\n      setQuizId(resultData.quizId || attemptId || null);\r\n    } else if (attemptId) {\r\n      // Kh√¥ng c√≥ state, fetch t·ª´ Firestore b·∫±ng attemptId (quizResults doc id)\r\n      (async () => {\r\n        try {\r\n          console.log('üì° Fetching quizResult document for attemptId:', attemptId);\r\n          console.log('üì° This should be a Firestore document ID, not a quiz ID');\r\n          const raw = await getQuizResultById(attemptId);\r\n          if (!raw) {\r\n            console.error('‚ùå No quizResult found for attemptId:', attemptId);\r\n            console.error('‚ùå This might mean attemptId is not a valid Firestore document ID');\r\n            navigate('/quiz-list');\r\n            return;\r\n          }\r\n          // Map Firestore quizResult -> ResultState shape\r\n          const totalQuestions = (raw.totalQuestions ?? (raw.answers?.length || 0));\r\n          let correctAnswers = (raw.correctAnswers ?? 0);\r\n          // Heuristic: if correctAnswers missing/zero but score >0, derive from score percentage\r\n          if ((correctAnswers === 0 || correctAnswers === undefined) && typeof raw.score === 'number' && raw.score > 0 && totalQuestions > 0) {\r\n            const derived = Math.round(((raw.score",
          "index": 904
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t√¨m th·∫•y quiz!",
          "index": 4519
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i quiz!",
          "index": 4695
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\ResultPage\\hooks\\useLeaderboard.ts",
      "matches": [
        {
          "kind": "StringLiteral",
          "text": "B·∫°n",
          "index": 1515
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫£i b·∫£ng x·∫øp h·∫°ng!",
          "index": 3641
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\QuizPage\\hooks\\useQuizSession.ts",
      "matches": [
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ l∆∞u k·∫øt qu·∫£ quiz. Vui l√≤ng th·ª≠ l·∫°i!",
          "index": 6362
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\QuizPage\\components\\Timer.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "Th·ªùi gian c√≤n l·∫°i",
          "index": 1400
        },
        {
          "kind": "JSXText",
          "text": "S·∫Øp h·∫øt gi·ªù!",
          "index": 2414
        },
        {
          "kind": "JSXText",
          "text": "C√≤n √≠t th·ªùi gian",
          "index": 2888
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\QuizPage\\components\\QuickNavigation.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "ƒêi·ªÅu h∆∞·ªõng nhanh",
          "index": 521
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\QuizPage\\components\\QuestionRenderer.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "üí° Nh·∫≠p ƒë√°p √°n v√†o √¥ b√™n d∆∞·ªõi:",
          "index": 3187
        },
        {
          "kind": "JSXText",
          "text": "onChange(answer.id)}\r\n          className={`relative p-4 rounded-lg border-2 transition-all ${\r\n            value === answer.id\r\n              ? 'border-blue-500 bg-blue-50'\r\n              : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'\r\n          }`}\r\n        >\r\n          {/* ·∫¢nh */}\r\n          {answer.imageUrl ? (",
          "index": 3784
        },
        {
          "kind": "JSXText",
          "text": "Kh√¥ng th·ªÉ t·∫£i ·∫£nh",
          "index": 4805
        },
        {
          "kind": "JSXText",
          "text": "Ch∆∞a c√≥ ·∫£nh",
          "index": 5048
        },
        {
          "kind": "JSXText",
          "text": ")}\r\n          \r\n          {/* Label v√† Radio */}",
          "index": 5086
        },
        {
          "kind": "JSXText",
          "text": "{String.fromCharCode(65 + index)}. {answer.text || `·∫¢nh ${index + 1}`}",
          "index": 5267
        },
        {
          "kind": "JSXText",
          "text": "üí° B·∫°n c√≥ th·ªÉ ch·ªçn nhi·ªÅu ƒë√°p √°n cho c√¢u h·ªèi n√†y.",
          "index": 6026
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\QuizPage\\components\\ProgressIndicator.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "Ti·∫øn ƒë·ªô",
          "index": 436
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\QuizPage\\components\\ConfirmationModals.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t?",
          "index": 1191
        },
        {
          "kind": "JSXText",
          "text": "Ti·∫øn ƒë·ªô c·ªßa b·∫°n s·∫Ω b·ªã m·∫•t n·∫øu tho√°t b√¢y gi·ªù.",
          "index": 1297
        },
        {
          "kind": "JSXText",
          "text": "modalControls.setShowExitModal(false)}\r\n                className=\"flex-1 px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors\"\r\n              >\r\n                Ti·∫øp t·ª•c l√†m b√†i",
          "index": 1472
        },
        {
          "kind": "JSXText",
          "text": "Tho√°t",
          "index": 1901
        },
        {
          "kind": "JSXText",
          "text": "X√°c nh·∫≠n n·ªôp b√†i",
          "index": 2339
        },
        {
          "kind": "JSXText",
          "text": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën n·ªôp b√†i? Sau khi n·ªôp s·∫Ω kh√¥ng th·ªÉ thay ƒë·ªïi ƒë√°p √°n.",
          "index": 2438
        },
        {
          "kind": "JSXText",
          "text": "N·ªôp b√†i",
          "index": 3064
        },
        {
          "kind": "JSXText",
          "text": "C√≤n c√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi",
          "index": 3509
        },
        {
          "kind": "JSXText",
          "text": "B·∫°n c√≤n {unansweredQuestions.length} c√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi:",
          "index": 3616
        },
        {
          "kind": "JSXText",
          "text": "{\r\n                    modalControls.setShowUnansweredModal(false);\r\n                    onGoToQuestion(index);\r\n                  }}\r\n                  className=\"block w-full text-left p-2 hover:bg-gray-100 rounded text-blue-600 hover:text-blue-800\"\r\n                >\r\n                  C√¢u {index + 1}: {question.text.slice(0, 50)}...",
          "index": 3928
        },
        {
          "kind": "JSXText",
          "text": "modalControls.setShowUnansweredModal(false)}\r\n                className=\"flex-1 px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors\"\r\n              >\r\n                Ti·∫øp t·ª•c l√†m b√†i",
          "index": 4430
        },
        {
          "kind": "JSXText",
          "text": "N·ªôp b√†i lu√¥n",
          "index": 4873
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\CreateQuizPage\\components\\SortableItem.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "moveQuestion(index, index - 1)}\r\n          disabled={index === 0}\r\n          className=\"p-1 text-gray-400 hover:text-gray-600 disabled:opacity-30\"\r\n          title=\"Di chuy·ªÉn l√™n\"\r\n        >\r\n          ‚¨ÜÔ∏è",
          "index": 1219
        },
        {
          "kind": "JSXText",
          "text": "moveQuestion(index, index + 1)}\r\n          disabled={index === totalQuestions - 1}\r\n          className=\"p-1 text-gray-400 hover:text-gray-600 disabled:opacity-30\"\r\n          title=\"Di chuy·ªÉn xu·ªëng\"\r\n        >\r\n          ‚¨áÔ∏è",
          "index": 1511
        },
        {
          "kind": "StringLiteral",
          "text": "K√©o ƒë·ªÉ s·∫Øp x·∫øp",
          "index": 1095
        },
        {
          "kind": "StringLiteral",
          "text": "Di chuy·ªÉn l√™n",
          "index": 1385
        },
        {
          "kind": "StringLiteral",
          "text": "Di chuy·ªÉn xu·ªëng",
          "index": 1694
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\CreateQuizPage\\components\\ReviewStep.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "Ti√™u ƒë·ªÅ:",
          "index": 641
        },
        {
          "kind": "JSXText",
          "text": "Danh m·ª•c:",
          "index": 702
        },
        {
          "kind": "JSXText",
          "text": "ƒê·ªô kh√≥:",
          "index": 767
        },
        {
          "kind": "JSXText",
          "text": "Th·ªùi gian:",
          "index": 832
        },
        {
          "kind": "JSXText",
          "text": "{quiz.duration} ph√∫t",
          "index": 851
        },
        {
          "kind": "JSXText",
          "text": "S·ªë c√¢u h·ªèi:",
          "index": 903
        },
        {
          "kind": "JSXText",
          "text": "T·ªïng ƒëi·ªÉm:",
          "index": 978
        },
        {
          "kind": "JSXText",
          "text": "M√¥ t·∫£:",
          "index": 1121
        },
        {
          "kind": "JSXText",
          "text": "Danh s√°ch c√¢u h·ªèi",
          "index": 1286
        },
        {
          "kind": "JSXText",
          "text": "C√¢u {idx + 1}: {q.text}",
          "index": 1537
        },
        {
          "kind": "JSXText",
          "text": "{q.type} ‚Ä¢ {q.points} ƒëi·ªÉm",
          "index": 1654
        },
        {
          "kind": "JSXText",
          "text": "ƒê√°p √°n:",
          "index": 1879
        },
        {
          "kind": "JSXText",
          "text": "C√°c c√°ch vi·∫øt kh√°c:",
          "index": 2041
        },
        {
          "kind": "JSXText",
          "text": "Gi·∫£i th√≠ch:",
          "index": 3160
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\CreateQuizPage\\components\\QuizInfoStep.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "T·ª´ 5 ƒë·∫øn 120 ph√∫t",
          "index": 4886
        },
        {
          "kind": "JSXText",
          "text": "Tags (t√πy ch·ªçn)",
          "index": 5116
        },
        {
          "kind": "JSXText",
          "text": "V√≠ d·ª•: javascript, react, frontend",
          "index": 5680
        },
        {
          "kind": "StringLiteral",
          "text": "Nh·∫≠p tags, c√°ch nhau b·∫±ng d·∫•u ph·∫©y...",
          "index": 5355
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\CreateQuizPage\\components\\QuizBulkImport.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": ", fileType: 'csv' | 'excel') => {\r\n    const file = event.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    setUploading(true);\r\n    \r\n    try {\r\n      // Validate file type\r\n      const validTypes = fileType === 'csv' \r\n        ? ['text/csv', 'application/csv']\r\n        : ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];\r\n      \r\n      if (!validTypes.some(type => file.type.includes(type) || file.name.toLowerCase().endsWith(fileType === 'csv' ? '.csv' : '.xlsx'))) {\r\n        toast.error(`Vui l√≤ng ch·ªçn file ${fileType.toUpperCase()} h·ª£p l·ªá`);\r\n        setUploading(false);\r\n        return;\r\n      }\r\n\r\n      // Parse file content\r\n      const questions = await parseFile(file, fileType);\r\n      \r\n      if (questions.length === 0) {\r\n        toast.error('Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi h·ª£p l·ªá trong file');\r\n        setUploading(false);\r\n        return;\r\n      }\r\n\r\n      onQuestionsImported(questions);\r\n      toast.success(`ƒê√£ import th√†nh c√¥ng ${questions.length} c√¢u h·ªèi!`);\r\n      setIsOpen(false);\r\n      \r\n    } catch (error) {\r\n      console.error('Error parsing file:', error);\r\n      toast.error('C√≥ l·ªói x·∫£y ra khi ƒë·ªçc file. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng file.');\r\n    } finally {\r\n      setUploading(false);\r\n      // Reset file input\r\n      event.target.value = '';\r\n    }\r\n  };\r\n\r\n  const parseFile = async (file: File, fileType: 'csv' | 'excel'): Promise",
          "index": 483
        },
        {
          "kind": "JSXText",
          "text": "field.replace(/^\"(.*)\"$/, '$1')); // Remove surrounding quotes\r\n  };\r\n\r\n  const downloadTemplate = (fileType: 'csv' | 'excel') => {\r\n    const headers = ['C√¢u h·ªèi', 'ƒê√°p √°n A', 'ƒê√°p √°n B', 'ƒê√°p √°n C', 'ƒê√°p √°n D', 'ƒê√°p √°n ƒë√∫ng (A/B/C/D)', 'Gi·∫£i th√≠ch (t√πy ch·ªçn)', 'ƒêi·ªÉm (m·∫∑c ƒë·ªãnh 10)'];\r\n    const sampleRow = [\r\n      'JavaScript l√† ng√¥n ng·ªØ g√¨?',\r\n      'Ng√¥n ng·ªØ l·∫≠p tr√¨nh',\r\n      'Ng√¥n ng·ªØ ƒë√°nh d·∫•u',\r\n      'H·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu',\r\n      'H·ªá ƒëi·ªÅu h√†nh',\r\n      'A',\r\n      'JavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn',\r\n      '10'\r\n    ];\r\n    \r\n    const csvContent = [headers, sampleRow]\r\n      .map(row => row.map(field => `\"${field}\"`).join(','))\r\n      .join('\\n');\r\n    \r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const link = document.createElement('a');\r\n    link.href = URL.createObjectURL(blob);\r\n    link.download = `quiz_template.${fileType === 'csv' ? 'csv' : 'xlsx'}`;\r\n    link.click();\r\n    URL.revokeObjectURL(link.href);\r\n  };\r\n\r\n  return (",
          "index": 4366
        },
        {
          "kind": "JSXText",
          "text": "T·∫£i File",
          "index": 5632
        },
        {
          "kind": "JSXText",
          "text": "üìÅ T·∫£i file c√¢u h·ªèi",
          "index": 5997
        },
        {
          "kind": "JSXText",
          "text": "üìã ƒê·ªãnh d·∫°ng file:",
          "index": 6478
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ C·ªôt 1: C√¢u h·ªèi",
          "index": 6591
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ C·ªôt 2-5: ƒê√°p √°n A, B, C, D",
          "index": 6636
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ C·ªôt 6: ƒê√°p √°n ƒë√∫ng (A/B/C/D)",
          "index": 6693
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ C·ªôt 7: Gi·∫£i th√≠ch (t√πy ch·ªçn)",
          "index": 6752
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ C·ªôt 8: ƒêi·ªÉm (m·∫∑c ƒë·ªãnh 10)",
          "index": 6811
        },
        {
          "kind": "JSXText",
          "text": "downloadTemplate('csv')}\r\n                  className=\"flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm\"\r\n                >\r\n                  üìÑ T·∫£i m·∫´u CSV",
          "index": 7038
        },
        {
          "kind": "JSXText",
          "text": "downloadTemplate('excel')}\r\n                  className=\"flex-1 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm\"\r\n                >\r\n                  üìä T·∫£i m·∫´u Excel",
          "index": 7327
        },
        {
          "kind": "JSXText",
          "text": "üìÑ Ch·ªçn file CSV:",
          "index": 7778
        },
        {
          "kind": "JSXText",
          "text": "üìä Ch·ªçn file Excel:",
          "index": 8335
        },
        {
          "kind": "JSXText",
          "text": "ƒêang x·ª≠ l√Ω file...",
          "index": 9082
        },
        {
          "kind": "JSXText",
          "text": "M·∫πo:",
          "index": 9353
        },
        {
          "kind": "JSXText",
          "text": "S·ª≠ d·ª•ng template ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng ƒë√∫ng. \r\n                  File c√≥ th·ªÉ ch·ª©a nhi·ªÅu c√¢u h·ªèi, m·ªói c√¢u h·ªèi tr√™n m·ªôt d√≤ng.",
          "index": 9366
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi h·ª£p l·ªá trong file",
          "index": 1293
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói x·∫£y ra khi ƒë·ªçc file. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng file.",
          "index": 1637
        },
        {
          "kind": "StringLiteral",
          "text": "C√¢u h·ªèi",
          "index": 4522
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n A",
          "index": 4533
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n B",
          "index": 4545
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n C",
          "index": 4557
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n D",
          "index": 4569
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√°p √°n ƒë√∫ng (A/B/C/D)",
          "index": 4581
        },
        {
          "kind": "StringLiteral",
          "text": "Gi·∫£i th√≠ch (t√πy ch·ªçn)",
          "index": 4606
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêi·ªÉm (m·∫∑c ƒë·ªãnh 10)",
          "index": 4631
        },
        {
          "kind": "StringLiteral",
          "text": "JavaScript l√† ng√¥n ng·ªØ g√¨?",
          "index": 4686
        },
        {
          "kind": "StringLiteral",
          "text": "Ng√¥n ng·ªØ l·∫≠p tr√¨nh",
          "index": 4723
        },
        {
          "kind": "StringLiteral",
          "text": "Ng√¥n ng·ªØ ƒë√°nh d·∫•u",
          "index": 4752
        },
        {
          "kind": "StringLiteral",
          "text": "H·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu",
          "index": 4780
        },
        {
          "kind": "StringLiteral",
          "text": "H·ªá ƒëi·ªÅu h√†nh",
          "index": 4816
        },
        {
          "kind": "StringLiteral",
          "text": "JavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn",
          "index": 4851
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\CreateQuizPage\\components\\QuestionsStep.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "Danh s√°ch c√¢u h·ªèi",
          "index": 2798
        },
        {
          "kind": "JSXText",
          "text": "+ Th√™m c√¢u h·ªèi",
          "index": 2957
        },
        {
          "kind": "JSXText",
          "text": "Ch∆∞a c√≥ c√¢u h·ªèi n√†o.",
          "index": 3514
        },
        {
          "kind": "JSXText",
          "text": "setShowGeminiAI(false)}\r\n                className=\"text-gray-400 hover:text-gray-600 text-3xl font-bold transition-colors\"\r\n              >\r\n                √ó",
          "index": 4907
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\CreateQuizPage\\components\\QuestionEditor.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "= ({ question, onChange, onDelete }) => {\n  const { t } = useTranslation();\n\r\n  \r\n  // X·ª≠ l√Ω thay ƒë·ªïi lo·∫°i c√¢u h·ªèi\r\n  const handleTypeChange = (newType: Question['type']) => {\r\n    let newAnswers: Answer[] = [];\r\n    let newQuestion = { ...question, type: newType };\r\n    \r\n    switch (newType) {\r\n      case 'multiple':\r\n        // Tr·∫Øc nghi·ªám: t·∫°o 4 ƒë√°p √°n m·∫∑c ƒë·ªãnh\r\n        newAnswers = Array.from({ length: 4 }, (_, i) => ({\r\n          id: generateId(),\r\n          text: '',\r\n          isCorrect: i === 0,\r\n        }));\r\n        break;\r\n      case 'boolean':\r\n        // ƒê√∫ng/Sai: t·∫°o 2 ƒë√°p √°n v·ªõi isCorrect logic\r\n        newAnswers = [\r\n          { id: generateId(), text: 'ƒê√∫ng', isCorrect: true },\r\n          { id: generateId(), text: 'Sai', isCorrect: false }\r\n        ];\r\n        break;\r\n      case 'short_answer':\r\n        // ƒêi·ªÅn t·ª´: kh√¥ng c·∫ßn answers array, d√πng correctAnswer v√† acceptedAnswers\r\n        newAnswers = [];\r\n        newQuestion.correctAnswer = '';\r\n        newQuestion.acceptedAnswers = [];\r\n        break;\r\n      case 'image':\r\n        // Ch·ªçn ·∫£nh: t·∫°o 4 ƒë√°p √°n c√≥ imageUrl\r\n        newAnswers = Array.from({ length: 4 }, (_, i) => ({\r\n          id: generateId(),\r\n          text: `·∫¢nh ${i + 1}`,\r\n          isCorrect: i === 0,\r\n          imageUrl: '',\r\n        }));\r\n        break;\r\n    }\r\n    \r\n    onChange({ ...newQuestion, answers: newAnswers });\r\n  };\r\n\r\n  const handleAnswerChange = (idx: number, field: keyof Answer, value: any) => {\r\n    const newAnswers = question.answers.map((a, i) =>\r\n      i === idx ? { ...a, [field]: value } : a\r\n    );\r\n    onChange({ ...question, answers: newAnswers });\r\n  };\r\n\r\n  const handleAddAnswer = () => {\r\n    if (question.type === 'multiple' || question.type === 'image') {\r\n      const newAnswer: Answer = {\r\n        id: generateId(),\r\n        text: question.type === 'image' ? `·∫¢nh ${question.answers.length + 1}` : '',\r\n        isCorrect: false,\r\n        ...(question.type === 'image' && { imageUrl: '' }),\r\n      };\r\n      onChange({\r\n        ...question,\r\n        answers: [...question.answers, newAnswer],\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleRemoveAnswer = (idx: number) => {\r\n    if (question.type === 'boolean') return; // Boolean kh√¥ng d√πng answers array\r\n    if ((question.type === 'multiple' || question.type === 'image') && question.answers.length",
          "index": 402
        },
        {
          "kind": "JSXText",
          "text": "i !== idx),\r\n    });\r\n  };\r\n\r\n  const handleSetCorrect = (idx: number) => {\r\n    if (question.type === 'boolean') {\r\n      // V·ªõi Boolean: n·∫øu ch·ªçn \"ƒê√∫ng\" (idx=0) th√¨ ƒë√°p √°n ƒë√∫ng l√† true, ng∆∞·ª£c l·∫°i false  \r\n      onChange({\r\n        ...question,\r\n        answers: question.answers.map((a, i) => ({ \r\n          ...a, \r\n          isCorrect: i === 0 ? idx === 0 : idx === 1 \r\n        })),\r\n      });\r\n    } else {\r\n      // V·ªõi Multiple Choice: ch·ªâ c√≥ 1 ƒë√°p √°n ƒë√∫ng\r\n      onChange({\r\n        ...question,\r\n        answers: question.answers.map((a, i) => ({ ...a, isCorrect: i === idx })),\r\n      });\r\n    }\r\n  };\r\n\r\n  // X·ª≠ l√Ω ƒëi·ªÅn t·ª´\r\n  const handleCorrectAnswerChange = (value: string) => {\r\n    // T·ª± ƒë·ªông t·∫°o acceptedAnswers t·ª´ correctAnswer\r\n    const accepted = [\r\n      value, // Nguy√™n vƒÉn\r\n      value.toLowerCase(), // Ch·ªØ th∆∞·ªùng\r\n      value.toUpperCase(), // Ch·ªØ hoa\r\n      value.charAt(0).toUpperCase() + value.slice(1).toLowerCase(), // Capitalize\r\n    ].filter((v, i, arr) => arr.indexOf(v) === i && v.trim() !== ''); // Lo·∫°i b·ªè tr√πng l·∫∑p v√† r·ªóng\r\n    \r\n    onChange({\r\n      ...question,\r\n      correctAnswer: value,\r\n      acceptedAnswers: accepted,\r\n    });\r\n  };\r\n\r\n  const addAcceptedAnswer = () => {\r\n    const newAnswer = prompt('Nh·∫≠p t·ª´ ƒë·ªìng nghƒ©a ho·∫∑c c√°ch vi·∫øt kh√°c:');\r\n    if (newAnswer && newAnswer.trim()) {\r\n      onChange({\r\n        ...question,\r\n        acceptedAnswers: [...(question.acceptedAnswers || []), newAnswer.trim()],\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeAcceptedAnswer = (idx: number) => {\r\n    onChange({\r\n      ...question,\r\n      acceptedAnswers: question.acceptedAnswers?.filter((_, i) => i !== idx) || [],\r\n    });\r\n  };\r\n\r\n  return (",
          "index": 2869
        },
        {
          "kind": "JSXText",
          "text": "{/* Header c√¢u h·ªèi */}",
          "index": 4615
        },
        {
          "kind": "JSXText",
          "text": "Tr·∫Øc nghi·ªám",
          "index": 5147
        },
        {
          "kind": "JSXText",
          "text": "ƒê√∫ng/Sai",
          "index": 5203
        },
        {
          "kind": "JSXText",
          "text": "ƒêi·ªÅn t·ª´",
          "index": 5261
        },
        {
          "kind": "JSXText",
          "text": "Ch·ªçn ·∫£nh",
          "index": 5311
        },
        {
          "kind": "JSXText",
          "text": "{/* N·ªôi dung theo t·ª´ng d·∫°ng */}\r\n      {question.type === 'multiple' && (",
          "index": 5800
        },
        {
          "kind": "JSXText",
          "text": "ƒê√°p √°n tr·∫Øc nghi·ªám",
          "index": 6039
        },
        {
          "kind": "JSXText",
          "text": "+ Th√™m ƒë√°p √°n",
          "index": 6138
        },
        {
          "kind": "JSXText",
          "text": "C√¢u h·ªèi ƒê√∫ng/Sai",
          "index": 7618
        },
        {
          "kind": "JSXText",
          "text": "Ch·ªçn ƒë√°p √°n ƒë√∫ng cho c√¢u h·ªèi n√†y:",
          "index": 7750
        },
        {
          "kind": "JSXText",
          "text": "{answer.text === 'ƒê√∫ng' ? '‚úì' : '‚úó'} {answer.text}",
          "index": 8416
        },
        {
          "kind": "JSXText",
          "text": "C√¢u h·ªèi ƒëi·ªÅn t·ª´",
          "index": 8763
        },
        {
          "kind": "JSXText",
          "text": "ƒê√°p √°n ch√≠nh x√°c:",
          "index": 8935
        },
        {
          "kind": "JSXText",
          "text": "C√°c c√°ch vi·∫øt ƒë∆∞·ª£c ch·∫•p nh·∫≠n:",
          "index": 9446
        },
        {
          "kind": "JSXText",
          "text": "+ Th√™m c√°ch vi·∫øt kh√°c",
          "index": 10275
        },
        {
          "kind": "JSXText",
          "text": "Ch·ªçn ·∫£nh ƒë√°p √°n",
          "index": 10576
        },
        {
          "kind": "JSXText",
          "text": "+ Th√™m ·∫£nh",
          "index": 10672
        },
        {
          "kind": "JSXText",
          "text": "ƒê√°p √°n ƒë√∫ng",
          "index": 12970
        },
        {
          "kind": "JSXText",
          "text": ")}\r\n\r\n      {/* Gi·∫£i th√≠ch */}",
          "index": 13087
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√∫ng",
          "index": 1083
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√∫ng",
          "index": 3019
        },
        {
          "kind": "StringLiteral",
          "text": "Nh·∫≠p t·ª´ ƒë·ªìng nghƒ©a ho·∫∑c c√°ch vi·∫øt kh√°c:",
          "index": 4120
        },
        {
          "kind": "StringLiteral",
          "text": "N·ªôi dung c√¢u h·ªèi",
          "index": 4776
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√∫ng",
          "index": 8351
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√∫ng",
          "index": 8456
        },
        {
          "kind": "StringLiteral",
          "text": "Nh·∫≠p ƒë√°p √°n ch√≠nh x√°c...",
          "index": 9068
        },
        {
          "kind": "StringLiteral",
          "text": "M√¥ t·∫£ ·∫£nh (t√πy ch·ªçn)",
          "index": 11614
        },
        {
          "kind": "StringLiteral",
          "text": "URL ·∫£nh",
          "index": 11912
        },
        {
          "kind": "StringLiteral",
          "text": "Gi·∫£i th√≠ch ƒë√°p √°n (t√πy ch·ªçn)",
          "index": 13248
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\CreateQuizPage\\components\\ModernAIQuestionGenerator.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "(null);\r\n\r\n  const providers = aiQuestionService.providers;\r\n\r\n  useEffect(() => {\r\n    if (selectedProvider) {\r\n      const defaultConfig = aiQuestionService.createDefaultConfig(selectedProvider.id);\r\n      setConfig(defaultConfig);\r\n    }\r\n  }, [selectedProvider]);\r\n\r\n  const handleProviderSelect = (provider: AIProvider) => {\r\n    setSelectedProvider(provider);\r\n    setStep('config');\r\n    setConnectionStatus(null);\r\n  };\r\n\r\n  const handleTestConnection = async () => {\r\n    if (!config) return;\r\n    \r\n    setTestingConnection(true);\r\n    const result = await aiQuestionService.testConnection(config);\r\n    setConnectionStatus(result);\r\n    setTestingConnection(false);\r\n    \r\n    if (result.success) {\r\n      toast.success('K·∫øt n·ªëi AI th√†nh c√¥ng!');\r\n    } else {\r\n      toast.error(`L·ªói k·∫øt n·ªëi: ${result.message}`);\r\n    }\r\n  };\r\n\r\n  const handleGenerate = async () => {\r\n    if (!config) return;\r\n\r\n    setGenerating(true);\r\n    try {\r\n      const result = await aiQuestionService.generateQuestions({\r\n        content,\r\n        config\r\n      });\r\n\r\n      if (result.error) {\r\n        toast.error(`L·ªói t·∫°o c√¢u h·ªèi: ${result.error}`);\r\n        return;\r\n      }\r\n\r\n      setGeneratedQuestions(result.questions);\r\n      setStep('review');\r\n      toast.success(`ƒê√£ t·∫°o ${result.questions.length} c√¢u h·ªèi!`);\r\n    } catch (error) {\r\n      toast.error('C√≥ l·ªói x·∫£y ra khi t·∫°o c√¢u h·ªèi');\r\n      console.error(error);\r\n    } finally {\r\n      setGenerating(false);\r\n    }\r\n  };\r\n\r\n  const handleAcceptQuestions = () => {\r\n    onQuestionsGenerated(generatedQuestions);\r\n    onClose();\r\n    toast.success('ƒê√£ th√™m c√¢u h·ªèi v√†o quiz!');\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (",
          "index": 1421
        },
        {
          "kind": "JSXText",
          "text": "T·∫°o c√¢u h·ªèi th√¥ng minh v·ªõi AI",
          "index": 3821
        },
        {
          "kind": "JSXText",
          "text": "Ch·ªçn AI Provider",
          "index": 5283
        },
        {
          "kind": "JSXText",
          "text": "L·ª±a ch·ªçn nh√† cung c·∫•p AI ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n",
          "index": 5351
        },
        {
          "kind": "JSXText",
          "text": "Mi·ªÖn ph√≠",
          "index": 7132
        },
        {
          "kind": "JSXText",
          "text": "C·∫•u h√¨nh AI",
          "index": 8502
        },
        {
          "kind": "JSXText",
          "text": "T√πy ch·ªânh c√°ch AI t·∫°o c√¢u h·ªèi cho b·∫°n",
          "index": 8565
        },
        {
          "kind": "JSXText",
          "text": "setConfig({...config, apiKey: e.target.value})}\r\n                          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                          placeholder=\"Nh·∫≠p API key...\"\r\n                        />",
          "index": 9394
        },
        {
          "kind": "JSXText",
          "text": "S·ªë c√¢u h·ªèi: {config.maxQuestions}",
          "index": 13405
        },
        {
          "kind": "JSXText",
          "text": "ƒêa d·∫°ng",
          "index": 14615
        },
        {
          "kind": "JSXText",
          "text": "Lo·∫°i c√¢u h·ªèi",
          "index": 14801
        },
        {
          "kind": "JSXText",
          "text": "{[\r\n                        { id: 'multiple', label: 'Tr·∫Øc nghi·ªám nhi·ªÅu l·ª±a ch·ªçn' },\r\n                        { id: 'boolean', label: 'ƒê√∫ng/Sai' },\r\n                        { id: 'short_answer', label: 'Tr·∫£ l·ªùi ng·∫Øn' }\r\n                      ].map(type => (",
          "index": 14870
        },
        {
          "kind": "JSXText",
          "text": "Ng√¥n ng·ªØ",
          "index": 16493
        },
        {
          "kind": "JSXText",
          "text": "Ti·∫øng Vi·ªát",
          "index": 16867
        },
        {
          "kind": "JSXText",
          "text": "T·∫°o c√¢u h·ªèi v·ªõi AI",
          "index": 17982
        },
        {
          "kind": "JSXText",
          "text": "S·∫µn s√†ng t·∫°o c√¢u h·ªèi t·ª´ n·ªôi dung c·ªßa b·∫°n",
          "index": 18052
        },
        {
          "kind": "JSXText",
          "text": "N·ªôi dung ngu·ªìn:",
          "index": 18269
        },
        {
          "kind": "JSXText",
          "text": "C·∫•u h√¨nh ƒë√£ ch·ªçn:",
          "index": 18526
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ S·ªë c√¢u h·ªèi: {config?.maxQuestions}",
          "index": 18752
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ ƒê·ªô kh√≥: {config?.difficulty}",
          "index": 18815
        },
        {
          "kind": "JSXText",
          "text": "‚Ä¢ Lo·∫°i: {config?.questionTypes.join(', ')}",
          "index": 18872
        },
        {
          "kind": "JSXText",
          "text": "AI ƒëang t·∫°o c√¢u h·ªèi cho b·∫°n...",
          "index": 19198
        },
        {
          "kind": "JSXText",
          "text": "T·∫°o c√¢u h·ªèi",
          "index": 19945
        },
        {
          "kind": "JSXText",
          "text": "Review c√¢u h·ªèi ƒë√£ t·∫°o",
          "index": 20296
        },
        {
          "kind": "JSXText",
          "text": "Ki·ªÉm tra v√† ch·ªânh s·ª≠a tr∆∞·ªõc khi th√™m v√†o quiz",
          "index": 20369
        },
        {
          "kind": "JSXText",
          "text": "C√¢u {index + 1}",
          "index": 20810
        },
        {
          "kind": "JSXText",
          "text": "setStep('generate')}\r\n                  className=\"px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50\"\r\n                >\r\n                  T·∫°o l·∫°i",
          "index": 22290
        },
        {
          "kind": "JSXText",
          "text": "Th√™m v√†o Quiz ({generatedQuestions.length} c√¢u)",
          "index": 22789
        },
        {
          "kind": "StringLiteral",
          "text": "K·∫øt n·ªëi AI th√†nh c√¥ng!",
          "index": 2153
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói x·∫£y ra khi t·∫°o c√¢u h·ªèi",
          "index": 2778
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ th√™m c√¢u h·ªèi v√†o quiz!",
          "index": 3025
        },
        {
          "kind": "StringLiteral",
          "text": "Nh·∫≠p API key...",
          "index": 9631
        },
        {
          "kind": "StringLiteral",
          "text": "Tr·∫Øc nghi·ªám nhi·ªÅu l·ª±a ch·ªçn",
          "index": 14948
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√∫ng/Sai",
          "index": 15029
        },
        {
          "kind": "StringLiteral",
          "text": "Tr·∫£ l·ªùi ng·∫Øn",
          "index": 15097
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\CreateQuizPage\\components\\FirebaseAIQuestionGenerator.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "({\r\n    content: content,\r\n    numQuestions: 5,\r\n    difficulty: 'mixed',\r\n    language: 'vi',\r\n    questionTypes: ['multiple']\r\n  });\r\n\r\n  const [customPrompt, setCustomPrompt] = useState('');\r\n\r\n  useEffect(() => {\r\n    setOptions(prev => ({ ...prev, content }));\r\n  }, [content]);\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      checkFirebaseAI();\r\n    }\r\n  }, [isOpen]);\r\n\r\n  const checkFirebaseAI = async () => {\r\n    setTestingConnection(true);\r\n    try {\r\n      const isAvailable = await FirebaseAIService.checkAvailability();\r\n      setConnectionStatus({\r\n        success: isAvailable,\r\n        message: isAvailable ? 'Firebase AI ƒë√£ s·∫µn s√†ng' : 'Firebase AI ch∆∞a kh·∫£ d·ª•ng'\r\n      });\r\n    } catch (error) {\r\n      setConnectionStatus({\r\n        success: false,\r\n        message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi Firebase AI'\r\n      });\r\n    } finally {\r\n      setTestingConnection(false);\r\n    }\r\n  };\r\n\r\n  const handleGenerate = async () => {\r\n    if (!content.trim()) {\r\n      toast.error('Vui l√≤ng cung c·∫•p n·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi');\r\n      return;\r\n    }\r\n\r\n    setGenerating(true);\r\n    setStep('generate');\r\n\r\n    try {\r\n      const questions = await FirebaseAIService.generateQuestions(\r\n        {\r\n          model: 'gemini-pro',\r\n          temperature: 0.7,\r\n          maxTokens: 2000\r\n        },\r\n        {\r\n          ...options,\r\n          customPrompt: customPrompt || undefined\r\n        }\r\n      );\r\n\r\n      if (questions.length === 0) {\r\n        throw new Error('Kh√¥ng t·∫°o ƒë∆∞·ª£c c√¢u h·ªèi n√†o');\r\n      }\r\n\r\n      setGeneratedQuestions(questions.map(convertToLocalQuestion));\r\n      setStep('review');\r\n      toast.success(`‚úÖ ƒê√£ t·∫°o ${questions.length} c√¢u h·ªèi th√†nh c√¥ng!`);\r\n\r\n    } catch (error) {\r\n      console.error('Generate questions error:', error);\r\n      const errorMessage = error instanceof Error ? error.message : 'C√≥ l·ªói x·∫£y ra khi t·∫°o c√¢u h·ªèi';\r\n      toast.error(errorMessage);\r\n      setStep('config');\r\n    } finally {\r\n      setGenerating(false);\r\n    }\r\n  };\r\n\r\n  const handleUseQuestions = () => {\r\n    onQuestionsGenerated(generatedQuestions);\r\n    onClose();\r\n    setStep('config');\r\n    setGeneratedQuestions([]);\r\n  };\r\n\r\n  const handleRegenerateQuestion = async (index: number) => {\r\n    try {\r\n      const singleQuestion = await FirebaseAIService.generateQuestions(\r\n        { model: 'gemini-pro', temperature: 0.8 },\r\n        { ...options, numQuestions: 1 }\r\n      );\r\n\r\n      if (singleQuestion.length > 0) {\r\n        const newQuestions = [...generatedQuestions];\r\n        newQuestions[index] = convertToLocalQuestion(singleQuestion[0]);\r\n        setGeneratedQuestions(newQuestions);\r\n        toast.success('ƒê√£ t·∫°o l·∫°i c√¢u h·ªèi');\r\n      }\r\n    } catch (error) {\r\n      toast.error('Kh√¥ng th·ªÉ t·∫°o l·∫°i c√¢u h·ªèi');\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (",
          "index": 1850
        },
        {
          "kind": "JSXText",
          "text": "S·ª≠ d·ª•ng Vertex AI/Gemini ƒë·ªÉ t·∫°o c√¢u h·ªèi",
          "index": 5381
        },
        {
          "kind": "JSXText",
          "text": "√ó",
          "index": 5673
        },
        {
          "kind": "JSXText",
          "text": "ƒêang ki·ªÉm tra k·∫øt n·ªëi Firebase AI...",
          "index": 6169
        },
        {
          "kind": "JSXText",
          "text": "C·∫•u h√¨nh t·∫°o c√¢u h·ªèi",
          "index": 7470
        },
        {
          "kind": "JSXText",
          "text": "S·ªë l∆∞·ª£ng c√¢u h·ªèi",
          "index": 7705
        },
        {
          "kind": "JSXText",
          "text": "3 c√¢u h·ªèi",
          "index": 8174
        },
        {
          "kind": "JSXText",
          "text": "5 c√¢u h·ªèi",
          "index": 8234
        },
        {
          "kind": "JSXText",
          "text": "10 c√¢u h·ªèi",
          "index": 8295
        },
        {
          "kind": "JSXText",
          "text": "15 c√¢u h·ªèi",
          "index": 8357
        },
        {
          "kind": "JSXText",
          "text": "20 c√¢u h·ªèi",
          "index": 8419
        },
        {
          "kind": "JSXText",
          "text": "Tr·ªôn l·∫´n",
          "index": 9297
        },
        {
          "kind": "JSXText",
          "text": "Ng√¥n ng·ªØ",
          "index": 9484
        },
        {
          "kind": "JSXText",
          "text": "Ti·∫øng Vi·ªát",
          "index": 9935
        },
        {
          "kind": "JSXText",
          "text": "Lo·∫°i c√¢u h·ªèi",
          "index": 10183
        },
        {
          "kind": "JSXText",
          "text": "Tr·∫Øc nghi·ªám",
          "index": 10675
        },
        {
          "kind": "JSXText",
          "text": "ƒê√∫ng/Sai",
          "index": 10746
        },
        {
          "kind": "JSXText",
          "text": "ƒêi·ªÅn t·ª´",
          "index": 10817
        },
        {
          "kind": "JSXText",
          "text": "Prompt t√πy ch·ªânh (t√πy ch·ªçn)",
          "index": 11040
        },
        {
          "kind": "JSXText",
          "text": "setCustomPrompt(e.target.value)}\r\n                    rows={4}\r\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    placeholder=\"Nh·∫≠p prompt t√πy ch·ªânh ƒë·ªÉ ƒëi·ªÅu ch·ªânh c√°ch AI t·∫°o c√¢u h·ªèi...\"\r\n                  />",
          "index": 11226
        },
        {
          "kind": "JSXText",
          "text": "T·∫°o c√¢u h·ªèi",
          "index": 12352
        },
        {
          "kind": "JSXText",
          "text": "ƒêang t·∫°o c√¢u h·ªèi...",
          "index": 12890
        },
        {
          "kind": "JSXText",
          "text": "Firebase AI ƒëang ph√¢n t√≠ch n·ªôi dung v√† t·∫°o c√¢u h·ªèi ph√π h·ª£p",
          "index": 12959
        },
        {
          "kind": "JSXText",
          "text": "S·ª≠ d·ª•ng Vertex AI/Gemini Pro",
          "index": 13252
        },
        {
          "kind": "JSXText",
          "text": "Xem tr∆∞·ªõc c√¢u h·ªèi ({generatedQuestions.length})",
          "index": 13609
        },
        {
          "kind": "JSXText",
          "text": "setStep('config')}\r\n                    className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50\"\r\n                  >\r\n                    C·∫•u h√¨nh l·∫°i",
          "index": 13812
        },
        {
          "kind": "JSXText",
          "text": "S·ª≠ d·ª•ng c√¢u h·ªèi",
          "index": 14331
        },
        {
          "kind": "JSXText",
          "text": "C√¢u {index + 1}",
          "index": 14805
        },
        {
          "kind": "JSXText",
          "text": "T·∫°o l·∫°i",
          "index": 15152
        },
        {
          "kind": "JSXText",
          "text": "Gi·∫£i th√≠ch:",
          "index": 16483
        },
        {
          "kind": "StringLiteral",
          "text": "Firebase AI ƒë√£ s·∫µn s√†ng",
          "index": 2478
        },
        {
          "kind": "StringLiteral",
          "text": "Firebase AI ch∆∞a kh·∫£ d·ª•ng",
          "index": 2506
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ k·∫øt n·ªëi Firebase AI",
          "index": 2640
        },
        {
          "kind": "StringLiteral",
          "text": "Vui l√≤ng cung c·∫•p n·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi",
          "index": 2838
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng t·∫°o ƒë∆∞·ª£c c√¢u h·ªèi n√†o",
          "index": 3322
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói x·∫£y ra khi t·∫°o c√¢u h·ªèi",
          "index": 3685
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ t·∫°o l·∫°i c√¢u h·ªèi",
          "index": 4494
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ t·∫°o l·∫°i c√¢u h·ªèi",
          "index": 4568
        },
        {
          "kind": "StringLiteral",
          "text": "Nh·∫≠p prompt t√πy ch·ªânh ƒë·ªÉ ƒëi·ªÅu ch·ªânh c√°ch AI t·∫°o c√¢u h·ªèi...",
          "index": 11460
        }
      ]
    },
    {
      "file": "features\\quiz\\pages\\CreateQuizPage\\components\\AdvancedFileUpload.tsx",
      "matches": [
        {
          "kind": "JSXText",
          "text": "({\r\n    provider: 'openai',\r\n    apiKey: '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', // API key ƒë∆∞·ª£c hardcode\r\n    model: 'gpt-3.5-turbo'\r\n  });\r\n  const [generatedQuestions, setGeneratedQuestions] = useState",
          "index": 1109
        },
        {
          "kind": "JSXText",
          "text": ") => {\r\n    const file = event.target.files?.[0];\r\n    if (!file) return;\r\n\r\n    setProcessing(true);\r\n    setCurrentStep('upload'); // Keep at upload step until processing is done\r\n\r\n    try {\r\n      // Validate file type\r\n      const fileName = file.name.toLowerCase();\r\n      const isSupported = Object.values(supportedTypes).flat().some(ext => fileName.endsWith(ext));\r\n      \r\n      if (!isSupported) {\r\n        toast.error('ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£');\r\n        setProcessing(false);\r\n        return;\r\n      }\r\n\r\n      // Show processing feedback\r\n      toast.info(`ƒêang x·ª≠ l√Ω file: ${file.name}...`);\r\n\r\n      // Extract text from file\r\n      const result = await extractTextFromFile(file);\r\n      \r\n      if (!result.success) {\r\n        toast.error(result.error || 'Kh√¥ng th·ªÉ ƒë·ªçc file');\r\n        setProcessing(false);\r\n        return;\r\n      }\r\n\r\n      setExtractedText(result.extractedText);\r\n      toast.success(`ƒê√£ tr√≠ch xu·∫•t ${result.extractedText.length} k√Ω t·ª± t·ª´ file!`);\r\n      setCurrentStep('preview'); // Only move to preview step after successful extraction\r\n      \r\n    } catch (error) {\r\n      console.error('Error processing file:', error);\r\n      toast.error('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file');\r\n      \r\n      // Provide fallback content based on file type\r\n      const fileName = file.name.toLowerCase();\r\n      let fallbackText = '';\r\n      \r\n      if (supportedTypes.images.some(ext => fileName.endsWith(ext))) {\r\n        fallbackText = `\r\nN·ªôi dung m·∫´u t·ª´ ·∫£nh: ${file.name}\r\n\r\nJavaScript c∆° b·∫£n:\r\n- Bi·∫øn (variables): let, const, var\r\n- H√†m (functions): function declaration, arrow functions\r\n- V√≤ng l·∫∑p (loops): for, while, forEach\r\n- ƒêi·ªÅu ki·ªán (conditions): if, else, switch\r\n- M·∫£ng (arrays): [], push(), pop(), map(), filter()\r\n\r\nReact fundamentals:\r\n- Components: functional, class components\r\n- Props: passing data between components\r\n- State: useState hook, setState\r\n- Events: onClick, onChange, onSubmit\r\n- Lifecycle: useEffect hook\r\n\r\nB·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng n·ªôi dung n√†y ƒë·ªÉ test t√≠nh nƒÉng AI.\r\n        `.trim();\r\n      } else {\r\n        fallbackText = `\r\nN·ªôi dung m·∫´u t·ª´ file: ${file.name}\r\n\r\nWeb Development Topics:\r\n- HTML: structure, elements, attributes\r\n- CSS: styling, layout, responsive design\r\n- JavaScript: programming logic, DOM manipulation\r\n- Frameworks: React, Vue, Angular\r\n- Backend: Node.js, Express, databases\r\n\r\nB·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a n·ªôi dung n√†y v√† s·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o c√¢u h·ªèi.\r\n        `.trim();\r\n      }\r\n      \r\n      setExtractedText(fallbackText);\r\n      setCurrentStep('preview');\r\n      toast.warning('ƒê√£ t·∫°o n·ªôi dung m·∫´u ƒë·ªÉ b·∫°n c√≥ th·ªÉ test AI');\r\n      \r\n    } finally {\r\n      setProcessing(false);\r\n      // Reset file input\r\n      event.target.value = '';\r\n    }\r\n  };\r\n\r\n  const extractTextFromFile = async (file: File): Promise",
          "index": 1827
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n    const fileName = file.name.toLowerCase();\r\n    \r\n    try {\r\n      // Handle images using OCR\r\n      if (supportedTypes.images.some(ext => fileName.endsWith(ext))) {\r\n        return await extractTextFromImage(file);\r\n      }\r\n      \r\n      // Handle PDFs\r\n      if (fileName.endsWith('.pdf')) {\r\n        return await extractTextFromPDF(file);\r\n      }\r\n      \r\n      // Handle Word documents\r\n      if (fileName.endsWith('.doc') || fileName.endsWith('.docx')) {\r\n        return await extractTextFromWord(file);\r\n      }\r\n      \r\n      // Handle text files\r\n      if (fileName.endsWith('.txt') || fileName.endsWith('.rtf')) {\r\n        return await extractTextFromTextFile(file);\r\n      }\r\n      \r\n      // Handle spreadsheets\r\n      if (supportedTypes.spreadsheets.some(ext => fileName.endsWith(ext))) {\r\n        return await extractTextFromSpreadsheet(file);\r\n      }\r\n      \r\n      return {\r\n        extractedText: '',\r\n        questions: [],\r\n        success: false,\r\n        error: 'ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£'\r\n      };\r\n      \r\n    } catch (error) {\r\n      return {\r\n        extractedText: '',\r\n        questions: [],\r\n        success: false,\r\n        error: `L·ªói x·ª≠ l√Ω file: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  };\r\n\r\n  // OCR for images using Tesseract.js (client-side)\r\n  const extractTextFromImage = async (file: File): Promise",
          "index": 4640
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n    try {\r\n      // Import Tesseract.js dynamically v·ªõi c√°ch import ch√≠nh x√°c\r\n      const { createWorker } = await import('tesseract.js');\r\n      \r\n      console.log('Starting OCR for image:', file.name);\r\n      \r\n      // Create OCR worker v·ªõi config\r\n      const worker = await createWorker('eng+vie', 1, {\r\n        logger: (m) => console.log('OCR Progress:', m)\r\n      });\r\n      \r\n      // Convert file to image URL\r\n      const imageUrl = URL.createObjectURL(file);\r\n      \r\n      console.log('Processing image with OCR...');\r\n      \r\n      // Perform OCR\r\n      const { data: { text, confidence } } = await worker.recognize(imageUrl);\r\n      \r\n      console.log('OCR Result:', { \r\n        textLength: text.length, \r\n        confidence: Math.round(confidence), \r\n        preview: text.substring(0, 100) + '...' \r\n      });\r\n      \r\n      // Clean up\r\n      URL.revokeObjectURL(imageUrl);\r\n      await worker.terminate();\r\n      \r\n      // Validate if text was extracted\r\n      if (!text || text.trim().length === 0) {\r\n        return {\r\n          extractedText: '',\r\n          questions: [],\r\n          success: false,\r\n          error: 'Kh√¥ng th·ªÉ tr√≠ch xu·∫•t text t·ª´ ·∫£nh. Vui l√≤ng th·ª≠ ·∫£nh kh√°c c√≥ text r√µ r√†ng h∆°n.'\r\n        };\r\n      }\r\n      \r\n      // Clean up the extracted text\r\n      const cleanedText = text\r\n        .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\r\n        .replace(/\\n+/g, '\\n') // Replace multiple newlines with single newline\r\n        .trim();\r\n      \r\n      return {\r\n        extractedText: cleanedText,\r\n        questions: [],\r\n        success: true\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('OCR Error:', error);\r\n      \r\n      // Fallback: Return mock extracted text for testing\r\n      const mockText = `\r\nN·ªôi dung m·∫´u ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ ·∫£nh (OCR ƒëang g·∫∑p v·∫•n ƒë·ªÅ).\r\n\r\nƒê√¢y l√† text m·∫´u ƒë·ªÉ test ch·ª©c nƒÉng AI:\r\n- JavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn\r\n- React l√† library ƒë·ªÉ x√¢y d·ª±ng UI\r\n- Node.js cho ph√©p ch·∫°y JavaScript tr√™n server\r\n- HTML l√† ng√¥n ng·ªØ ƒë√°nh d·∫•u\r\n- CSS d√πng ƒë·ªÉ t·∫°o ki·ªÉu cho trang web\r\n\r\nB·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng n·ªôi dung n√†y ƒë·ªÉ test t√≠nh nƒÉng t·∫°o c√¢u h·ªèi v·ªõi AI.\r\n      `.trim();\r\n      \r\n      console.log('Using fallback mock text due to OCR error');\r\n      \r\n      return {\r\n        extractedText: mockText,\r\n        questions: [],\r\n        success: true\r\n      };\r\n    }\r\n  };\r\n\r\n  // PDF text extraction\r\n  const extractTextFromPDF = async (file: File): Promise",
          "index": 6058
        },
        {
          "kind": "JSXText",
          "text": "item.str).join(' ');\r\n          fullText += `\\n\\n--- Trang ${pageNum} ---\\n${pageText}`;\r\n        }\r\n        \r\n        if (fullText.trim().length === 0) {\r\n          throw new Error('No text found in PDF');\r\n        }\r\n        \r\n        return {\r\n          extractedText: fullText.trim(),\r\n          questions: [],\r\n          success: true\r\n        };\r\n        \r\n      } catch (pdfError) {\r\n        console.log('Real PDF processing failed, using fallback:', pdfError);\r\n        \r\n        // Fallback v·ªõi n·ªôi dung mock th√¥ng minh h∆°n\r\n        const mockText = `\r\nN·ªôi dung ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ file PDF: ${file.name}\r\n\r\nCh∆∞∆°ng 1: Gi·ªõi thi·ªáu v·ªÅ L·∫≠p tr√¨nh Web\r\nJavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o t√≠nh t∆∞∆°ng t√°c cho trang web.\r\nHTML (HyperText Markup Language) l√† ng√¥n ng·ªØ ƒë√°nh d·∫•u c∆° b·∫£n ƒë·ªÉ x√¢y d·ª±ng c·∫•u tr√∫c trang web.\r\nCSS (Cascading Style Sheets) ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ thi·∫øt k·∫ø v√† t·∫°o ki·ªÉu cho c√°c ph·∫ßn t·ª≠ HTML.\r\n\r\nCh∆∞∆°ng 2: Framework v√† Library\r\nReact l√† m·ªôt JavaScript library ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Facebook ƒë·ªÉ x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng.\r\nNode.js cho ph√©p ch·∫°y JavaScript tr√™n ph√≠a server, m·ªü r·ªông kh·∫£ nƒÉng c·ªßa JavaScript.\r\nExpress.js l√† framework web cho Node.js, gi√∫p x√¢y d·ª±ng API v√† web application d·ªÖ d√†ng.\r\n\r\nCh∆∞∆°ng 3: Database v√† Backend\r\nMongoDB l√† database NoSQL ph·ªï bi·∫øn, l∆∞u tr·ªØ d·ªØ li·ªáu d∆∞·ªõi d·∫°ng document.\r\nMySQL l√† h·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu quan h·ªá (RDBMS) m√£ ngu·ªìn m·ªü.\r\nAPI (Application Programming Interface) l√† c√°ch ƒë·ªÉ c√°c ·ª©ng d·ª•ng giao ti·∫øp v·ªõi nhau.\r\n\r\nK·∫øt lu·∫≠n:\r\nL·∫≠p tr√¨nh web hi·ªán ƒë·∫°i y√™u c·∫ßu ki·∫øn th·ª©c v·ªÅ nhi·ªÅu c√¥ng ngh·ªá kh√°c nhau.\r\n        `.trim();\r\n        \r\n        return {\r\n          extractedText: mockText,\r\n          questions: [],\r\n          success: true\r\n        };\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('PDF processing error:', error);\r\n      return {\r\n        extractedText: '',\r\n        questions: [],\r\n        success: false,\r\n        error: `L·ªói ƒë·ªçc PDF: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  };\r\n\r\n  // Word document extraction\r\n  const extractTextFromWord = async (file: File): Promise",
          "index": 9473
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n    try {\r\n      console.log('Processing Word document:', file.name);\r\n      \r\n      // Try to use mammoth.js for real DOCX processing\r\n      if (file.name.toLowerCase().endsWith('.docx')) {\r\n        try {\r\n          const mammoth = await import('mammoth');\r\n          const arrayBuffer = await file.arrayBuffer();\r\n          const result = await mammoth.extractRawText({ arrayBuffer });\r\n          \r\n          if (result.value && result.value.trim().length > 0) {\r\n            return {\r\n              extractedText: result.value.trim(),\r\n              questions: [],\r\n              success: true\r\n            };\r\n          }\r\n        } catch (mammothError) {\r\n          console.log('Mammoth processing failed, using fallback:', mammothError);\r\n        }\r\n      }\r\n      \r\n      // Fallback v·ªõi n·ªôi dung mock d·ª±a tr√™n t√™n file\r\n      const mockText = `\r\nN·ªôi dung ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ file Word: ${file.name}\r\n\r\nB√†i h·ªçc 1: HTML C∆° b·∫£n\r\nHTML (HyperText Markup Language) l√† ng√¥n ng·ªØ ƒë√°nh d·∫•u si√™u vƒÉn b·∫£n ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o c·∫•u tr√∫c cho trang web.\r\nC√°c th·∫ª HTML c∆° b·∫£n:",
          "index": 11608
        },
        {
          "kind": "JSXText",
          "text": "HTML5 b·ªï sung nhi·ªÅu th·∫ª semantic nh∆∞",
          "index": 12733
        },
        {
          "kind": "JSXText",
          "text": "B√†i h·ªçc 2: CSS Styling\r\nCSS (Cascading Style Sheets) ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o ki·ªÉu v√† b·ªë c·ª•c cho c√°c ph·∫ßn t·ª≠ HTML.\r\nCSS Selector: element, class, id, attribute, pseudo-class\r\nCSS Properties: color, background, margin, padding, border, font, display, position\r\n\r\nB√†i h·ªçc 3: JavaScript Interactivity\r\nJavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ th√™m t√≠nh t∆∞∆°ng t√°c cho trang web.\r\nJavaScript c∆° b·∫£n: variables, functions, events, DOM manipulation\r\nES6+ features: arrow functions, let/const, template literals, destructuring, modules\r\n\r\nB√†i h·ªçc 4: Responsive Design\r\nResponsive design ƒë·∫£m b·∫£o trang web ho·∫°t ƒë·ªông t·ªët tr√™n m·ªçi thi·∫øt b·ªã.\r\nMedia queries trong CSS ƒë·ªÉ t·∫°o breakpoints cho c√°c k√≠ch th∆∞·ªõc m√†n h√¨nh kh√°c nhau.\r\nMobile-first approach: thi·∫øt k·∫ø cho mobile tr∆∞·ªõc, sau ƒë√≥ m·ªü r·ªông cho desktop.\r\n\r\nTh·ª±c h√†nh:\r\n- T·∫°o m·ªôt trang web ƒë∆°n gi·∫£n v·ªõi HTML\r\n- √Åp d·ª•ng CSS ƒë·ªÉ t·∫°o ki·ªÉu\r\n- Th√™m JavaScript ƒë·ªÉ t·∫°o t√≠nh t∆∞∆°ng t√°c\r\n- Ki·ªÉm tra responsive tr√™n c√°c thi·∫øt b·ªã kh√°c nhau\r\n      `.trim();\r\n      \r\n      return {\r\n        extractedText: mockText,\r\n        questions: [],\r\n        success: true\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('Word processing error:', error);\r\n      return {\r\n        extractedText: '',\r\n        questions: [],\r\n        success: false,\r\n        error: `L·ªói ƒë·ªçc Word: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  };\r\n\r\n  // Text file extraction\r\n  const extractTextFromTextFile = async (file: File): Promise",
          "index": 12819
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n    try {\r\n      const text = await file.text();\r\n      return {\r\n        extractedText: text,\r\n        questions: [],\r\n        success: true\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        extractedText: '',\r\n        questions: [],\r\n        success: false,\r\n        error: `L·ªói ƒë·ªçc text file: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  };\r\n\r\n  // Spreadsheet extraction (reuse existing CSV logic)\r\n  const extractTextFromSpreadsheet = async (file: File): Promise",
          "index": 14329
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n    try {\r\n      const text = await file.text();\r\n      return {\r\n        extractedText: text,\r\n        questions: [],\r\n        success: true\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        extractedText: '',\r\n        questions: [],\r\n        success: false,\r\n        error: `L·ªói ƒë·ªçc spreadsheet: ${error instanceof Error ? error.message : 'Unknown error'}`\r\n      };\r\n    }\r\n  };\r\n\r\n  const generateQuestionsWithAI = async () => {\r\n    if (!extractedText.trim()) {\r\n      toast.error('Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi');\r\n      return;\r\n    }\r\n\r\n    setProcessing(true);\r\n    setCurrentStep('generate');\r\n\r\n    try {\r\n      console.log('ü§ñ Starting AI question generation process...');\r\n      console.log('Extracted text length:', extractedText.length);\r\n      console.log('AI Config:', aiConfig);\r\n      \r\n      // Show detailed progress\r\n      toast.info('ƒêang k·∫øt n·ªëi v·ªõi AI service...');\r\n      \r\n      const questions = await callAIService(extractedText, customPrompt);\r\n      \r\n      if (!questions || questions.length === 0) {\r\n        throw new Error('AI service kh√¥ng tr·∫£ v·ªÅ c√¢u h·ªèi n√†o');\r\n      }\r\n      \r\n      setGeneratedQuestions(questions);\r\n      setCurrentStep('review');\r\n      toast.success(`‚úÖ AI ƒë√£ t·∫°o ${questions.length} c√¢u h·ªèi th√†nh c√¥ng!`);\r\n      \r\n    } catch (error) {\r\n      console.error('AI generation error:', error);\r\n      \r\n      // Show specific error message\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\r\n      toast.error(`‚ùå L·ªói t·∫°o c√¢u h·ªèi: ${errorMessage}`);\r\n      \r\n      // Stay on preview step so user can try again\r\n      setCurrentStep('preview');\r\n      \r\n    } finally {\r\n      setProcessing(false);\r\n    }\r\n  };\r\n\r\n  const callAIService = async (content: string, prompt: string): Promise",
          "index": 14869
        },
        {
          "kind": "JSXText",
          "text": "=> {\r\n    try {\r\n      console.log('ü§ñ Starting AI question generation...');\r\n      console.log('AI Config:', aiConfig);\r\n      console.log('Content length:', content.length);\r\n      \r\n      // Import AI service\r\n      const { AIService } = await import('../../../services/aiService');\r\n      \r\n      const options = {\r\n        content,\r\n        customPrompt: prompt,\r\n        numQuestions: 5,\r\n        difficulty: 'mixed' as const,\r\n        language: 'vi' as const\r\n      };\r\n      \r\n      console.log('Calling AI Service with options:', options);\r\n      \r\n      // Validate AI config before calling\r\n      const validation = AIService.validateConfig(aiConfig);\r\n      if (!validation.valid) {\r\n        throw new Error(`AI Config invalid: ${validation.error}`);\r\n      }\r\n      \r\n      const questions = await AIService.generateQuestions(aiConfig, options);\r\n      \r\n      console.log('‚úÖ AI Service returned questions:', questions.length);\r\n      \r\n      if (!questions || questions.length === 0) {\r\n        throw new Error('AI service returned no questions');\r\n      }\r\n      \r\n      // Convert to local Question type\r\n      const convertedQuestions = questions.map((q, index) => ({\r\n        id: q.id || `ai-${Date.now()}-${index}`,\r\n        text: q.text,\r\n        type: 'multiple' as const,\r\n        answers: q.answers || [],\r\n        explanation: q.explanation || '',\r\n        points: q.points || 10\r\n      }));\r\n      \r\n      console.log('‚úÖ Successfully converted questions:', convertedQuestions.length);\r\n      return convertedQuestions;\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå AI Service Error:', error);\r\n      \r\n      // Show specific error to user\r\n      toast.error(`L·ªói AI: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n      \r\n      // Only use fallback if user explicitly wants it\r\n      const shouldUseFallback = confirm(\r\n        `AI generation failed: ${error instanceof Error ? error.message : 'Unknown error'}\\n\\nDo you want to use sample questions instead?`\r\n      );\r\n      \r\n      if (shouldUseFallback) {\r\n        console.log('üîÑ User chose to use fallback mock questions');\r\n        \r\n        const mockQuestions: Question[] = [\r\n          {\r\n            id: `ai-${Date.now()}-1`,\r\n            text: 'JavaScript ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi c√¥ng ty n√†o?',\r\n            type: 'multiple',\r\n            answers: [\r\n              { id: 'a', text: 'Netscape', isCorrect: true },\r\n              { id: 'b', text: 'Microsoft', isCorrect: false },\r\n              { id: 'c', text: 'Google', isCorrect: false },\r\n              { id: 'd', text: 'Apple', isCorrect: false }\r\n            ],\r\n            explanation: 'JavaScript ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Brendan Eich t·∫°i Netscape v√†o nƒÉm 1995.',\r\n            points: 10\r\n          },\r\n          {\r\n            id: `ai-${Date.now()}-2`,\r\n            text: 'React l√† g√¨?',\r\n            type: 'multiple',\r\n            answers: [\r\n              { id: 'a', text: 'Framework', isCorrect: false },\r\n              { id: 'b', text: 'Library', isCorrect: true },\r\n              { id: 'c', text: 'Language', isCorrect: false },\r\n              { id: 'd', text: 'Database', isCorrect: false }\r\n            ],\r\n            explanation: 'React l√† m·ªôt JavaScript library ƒë·ªÉ x√¢y d·ª±ng user interface.',\r\n            points: 10\r\n          }\r\n        ];\r\n\r\n        toast.warning('ƒêang s·ª≠ d·ª•ng c√¢u h·ªèi m·∫´u thay v√¨ AI');\r\n        return mockQuestions;\r\n      } else {\r\n        // Re-throw the error to stop the process\r\n        throw error;\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleImportQuestions = () => {\r\n    if (generatedQuestions.length > 0) {\r\n      onQuestionsImported(generatedQuestions);\r\n      toast.success(`ƒê√£ import ${generatedQuestions.length} c√¢u h·ªèi!`);\r\n      setIsOpen(false);\r\n      resetState();\r\n    }\r\n  };\r\n\r\n  const resetState = () => {\r\n    setCurrentStep('upload');\r\n    setExtractedText('');\r\n    setGeneratedQuestions([]);\r\n    setCustomPrompt('');\r\n  };\r\n\r\n  const renderCurrentStep = () => {\r\n    switch (currentStep) {\r\n      case 'upload':\r\n        return (",
          "index": 16676
        },
        {
          "kind": "JSXText",
          "text": "üìÅ C√°c ƒë·ªãnh d·∫°ng file ƒë∆∞·ª£c h·ªó tr·ª£:",
          "index": 20947
        },
        {
          "kind": "JSXText",
          "text": "üñºÔ∏è H√¨nh ·∫£nh (OCR):",
          "index": 21142
        },
        {
          "kind": "JSXText",
          "text": "üìÑ T√†i li·ªáu:",
          "index": 21357
        },
        {
          "kind": "JSXText",
          "text": "üìä B·∫£ng t√≠nh:",
          "index": 21565
        },
        {
          "kind": "JSXText",
          "text": "üì§ Ch·ªçn file ƒë·ªÉ t·∫£i l√™n:",
          "index": 21860
        },
        {
          "kind": "JSXText",
          "text": "‚úÖ N·ªôi dung ƒë√£ tr√≠ch xu·∫•t:",
          "index": 22584
        },
        {
          "kind": "JSXText",
          "text": "ü§ñ C·∫•u h√¨nh AI ƒë·ªÉ t·∫°o c√¢u h·ªèi:",
          "index": 22996
        },
        {
          "kind": "JSXText",
          "text": "API Key ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh s·∫µn",
          "index": 25750
        },
        {
          "kind": "JSXText",
          "text": "S·∫µn s√†ng s·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o c√¢u h·ªèi!",
          "index": 25872
        },
        {
          "kind": "JSXText",
          "text": "Prompt t√πy ch·ªânh (t√πy ch·ªçn):",
          "index": 26078
        },
        {
          "kind": "JSXText",
          "text": "setCustomPrompt(e.target.value)}\r\n                  placeholder=\"H∆∞·ªõng d·∫´n c·ª• th·ªÉ cho AI v·ªÅ c√°ch t·∫°o c√¢u h·ªèi...\"\r\n                  className=\"w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                  rows={3}\r\n                />",
          "index": 26255
        },
        {
          "kind": "JSXText",
          "text": "setCurrentStep('upload')}\r\n                className=\"px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50\"\r\n              >\r\n                ‚Üê Quay l·∫°i",
          "index": 26670
        },
        {
          "kind": "JSXText",
          "text": "{\r\n                  console.log('üß™ Debug: Testing AI connection...');\r\n                  try {\r\n                    const response = await fetch('https://api.openai.com/v1/models', {\r\n                      headers: {\r\n                        'Authorization': `Bearer ${aiConfig.apiKey}`,\r\n                        'Content-Type': 'application/json'\r\n                      }\r\n                    });\r\n                    if (response.ok) {\r\n                      toast.success('‚úÖ API key ho·∫°t ƒë·ªông!');\r\n                      console.log('‚úÖ API key is valid');\r\n                    } else {\r\n                      const errorData = await response.json();\r\n                      toast.error(`‚ùå API key l·ªói: ${errorData.error?.message}`);\r\n                      console.error('‚ùå API key error:', errorData);\r\n                    }\r\n                  } catch (error) {\r\n                    toast.error(`‚ùå Network error: ${error instanceof Error ? error.message : 'Unknown'}`);\r\n                    console.error('‚ùå Network error:', error);\r\n                  }\r\n                }}\r\n                className=\"px-4 py-2 border border-blue-300 text-blue-600 rounded-lg hover:bg-blue-50\"\r\n              >\r\n                üß™ Test API",
          "index": 26917
        },
        {
          "kind": "JSXText",
          "text": "ü§ñ T·∫°o c√¢u h·ªèi v·ªõi AI",
          "index": 28418
        },
        {
          "kind": "JSXText",
          "text": "ü§ñ AI ƒëang t·∫°o c√¢u h·ªèi...",
          "index": 28806
        },
        {
          "kind": "JSXText",
          "text": "Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t",
          "index": 28879
        },
        {
          "kind": "JSXText",
          "text": "‚ú® AI ƒë√£ t·∫°o {generatedQuestions.length} c√¢u h·ªèi:",
          "index": 29175
        },
        {
          "kind": "JSXText",
          "text": "C√¢u {index + 1}: {question.text}",
          "index": 29572
        },
        {
          "kind": "JSXText",
          "text": "Gi·∫£i th√≠ch:",
          "index": 30384
        },
        {
          "kind": "JSXText",
          "text": "setCurrentStep('preview')}\r\n                className=\"px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50\"\r\n              >\r\n                ‚Üê T·∫°o l·∫°i",
          "index": 30643
        },
        {
          "kind": "JSXText",
          "text": "‚úÖ Import c√¢u h·ªèi",
          "index": 31018
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£",
          "index": 2257
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ ƒë·ªçc file",
          "index": 2608
        },
        {
          "kind": "StringLiteral",
          "text": "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file",
          "index": 3018
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê√£ t·∫°o n·ªôi dung m·∫´u ƒë·ªÉ b·∫°n c√≥ th·ªÉ test AI",
          "index": 4387
        },
        {
          "kind": "StringLiteral",
          "text": "ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£",
          "index": 5636
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t text t·ª´ ·∫£nh. Vui l√≤ng th·ª≠ ·∫£nh kh√°c c√≥ text r√µ r√†ng h∆°n.",
          "index": 7209
        },
        {
          "kind": "StringLiteral",
          "text": "Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi",
          "index": 15371
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang k·∫øt n·ªëi v·ªõi AI service...",
          "index": 15744
        },
        {
          "kind": "StringLiteral",
          "text": "AI service kh√¥ng tr·∫£ v·ªÅ c√¢u h·ªèi n√†o",
          "index": 15946
        },
        {
          "kind": "StringLiteral",
          "text": "JavaScript ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi c√¥ng ty n√†o?",
          "index": 18935
        },
        {
          "kind": "StringLiteral",
          "text": "JavaScript ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Brendan Eich t·∫°i Netscape v√†o nƒÉm 1995.",
          "index": 19329
        },
        {
          "kind": "StringLiteral",
          "text": "React l√† g√¨?",
          "index": 19512
        },
        {
          "kind": "StringLiteral",
          "text": "React l√† m·ªôt JavaScript library ƒë·ªÉ x√¢y d·ª±ng user interface.",
          "index": 19879
        },
        {
          "kind": "StringLiteral",
          "text": "ƒêang s·ª≠ d·ª•ng c√¢u h·ªèi m·∫´u thay v√¨ AI",
          "index": 20016
        },
        {
          "kind": "StringLiteral",
          "text": "H∆∞·ªõng d·∫´n c·ª• th·ªÉ cho AI v·ªÅ c√°ch t·∫°o c√¢u h·ªèi...",
          "index": 26321
        },
        {
          "kind": "StringLiteral",
          "text": "‚úÖ API key ho·∫°t ƒë·ªông!",
          "index": 27396
        }
      ]
    }
  ]
}
