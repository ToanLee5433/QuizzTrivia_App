import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Translation keys for AI Generator components
const aiGeneratorKeys = {
  vi: {
    aiGenerator: {
      connectionSuccess: "‚úÖ K·∫øt n·ªëi AI th√†nh c√¥ng!",
      connectionFailed: "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn AI: {{message}}",
      connectionError: "‚ùå L·ªói k·∫øt n·ªëi AI",
      fileInvalid: "File kh√¥ng h·ª£p l·ªá! Ch·ªâ ch·∫•p nh·∫≠n: {{extensions}}",
      fileTooLarge: "File qu√° l·ªõn! K√≠ch th∆∞·ªõc t·ªëi ƒëa: 10MB",
      apiKeyMissing: "API key kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh",
      fileProcessSuccess: "ƒê√£ x·ª≠ l√Ω file {{filename}} th√†nh c√¥ng!",
      fileProcessError: "Kh√¥ng th·ªÉ x·ª≠ l√Ω file n√†y",
      fileProcessFailed: "L·ªói khi x·ª≠ l√Ω file",
      topicOrFileRequired: "Vui l√≤ng nh·∫≠p ch·ªß ƒë·ªÅ ho·∫∑c t·∫£i l√™n file!",
      generateError: "‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o c√¢u h·ªèi",
      difficulty: {
        easy: "üü¢ D·ªÖ",
        medium: "üü° Trung b√¨nh",
        hard: "üî¥ Kh√≥"
      },
      testConnection: "Ki·ªÉm tra k·∫øt n·ªëi",
      testing: "ƒêang ki·ªÉm tra...",
      generate: "T·∫°o c√¢u h·ªèi",
      generating: "ƒêang t·∫°o...",
      uploadFile: "T·∫£i file l√™n",
      processing: "ƒêang x·ª≠ l√Ω...",
      topic: "Ch·ªß ƒë·ªÅ",
      topicPlaceholder: "Nh·∫≠p ch·ªß ƒë·ªÅ ho·∫∑c n·ªôi dung...",
      numQuestions: "S·ªë c√¢u h·ªèi",
      useFileContent: "S·ª≠ d·ª•ng n·ªôi dung file"
    }
  },
  en: {
    aiGenerator: {
      connectionSuccess: "‚úÖ AI connection successful!",
      connectionFailed: "‚ùå Cannot connect to AI: {{message}}",
      connectionError: "‚ùå AI connection error",
      fileInvalid: "Invalid file! Only accept: {{extensions}}",
      fileTooLarge: "File too large! Maximum size: 10MB",
      apiKeyMissing: "API key is not configured",
      fileProcessSuccess: "Successfully processed file {{filename}}!",
      fileProcessError: "Cannot process this file",
      fileProcessFailed: "Error processing file",
      topicOrFileRequired: "Please enter a topic or upload a file!",
      generateError: "‚ùå Error occurred while generating questions",
      difficulty: {
        easy: "üü¢ Easy",
        medium: "üü° Medium",
        hard: "üî¥ Hard"
      },
      testConnection: "Test Connection",
      testing: "Testing...",
      generate: "Generate Questions",
      generating: "Generating...",
      uploadFile: "Upload File",
      processing: "Processing...",
      topic: "Topic",
      topicPlaceholder: "Enter topic or content...",
      numQuestions: "Number of Questions",
      useFileContent: "Use file content"
    }
  }
};

// Read and update translation files
function updateTranslationFile(lang) {
  const filePath = path.join(__dirname, `public/locales/${lang}/common.json`);
  const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
  
  // Add aiGenerator keys
  data.aiGenerator = aiGeneratorKeys[lang].aiGenerator;
  
  fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
  console.log(`‚úÖ Updated ${lang}/common.json with aiGenerator keys`);
}

// Update both languages
updateTranslationFile('vi');
updateTranslationFile('en');

console.log('‚úÖ Added AI Generator translation keys!');
