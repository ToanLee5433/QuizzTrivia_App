{
  "10Cau": "10 c√¢u",
  "10Phut": "10 ph√∫t",
  "1500IncreaseDelayDeUserThayDuocToastMessageReturnR": ";\r\n        }\r\n      }, 1500); // Increase delay ƒë·ªÉ user th·∫•y ƒë∆∞·ª£c toast message\r\n    };\r\n    \r\n    return <RoleSelection user={user} onRoleSelected={handleRoleSelected} />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* <OfflineStatusIndicator /> */}\r\n      <Routes>\r\n        {/* Stage 1: Landing Routes */}\r\n        <Route path=",
  "15Cau": "15 c√¢u",
  "1ChayFirebaseDeployOnlyStorage": "1. Ch·∫°y: firebase deploy --only storage",
  "1TaoThongBaoHeThongConstCreatesystemnotificationAs": "});\r\n\r\n  // 1. T·∫°o th√¥ng b√°o h·ªá th·ªëng\r\n  const createSystemNotification = async () => {\r\n    if (!notificationData.message.trim()) {\r\n      toast.error(t(",
  "1TatAdBlockerChoLocalhost": "1. T·∫Øt ad blocker cho localhost",
  "1TatAdBlockerChoLocalhost5174": "1. T·∫Øt Ad Blocker cho localhost:5174",
  "1XemTruocLuonHienThiButtonOnclickHandlepreviewquiz": ">\r\n                    {/* 1. Xem tr∆∞·ªõc (lu√¥n hi·ªÉn th·ªã) */}\r\n                      <button\r\n                      onClick={() => handlePreview(quiz)}\r\n                      className=",
  "20Cau": "20 c√¢u",
  "2HoacDeployQuaFirebaseConsole": "2. Ho·∫∑c deploy qua Firebase Console",
  "2ThemGoogleapiscomVaoWhitelist": "2. Th√™m *.googleapis.com v√†o whitelist",
  "3Cau": "3 c√¢u",
  "3Doi30sChoRulesCoHieuLuc": "3. ƒê·ª£i 30s cho rules c√≥ hi·ªáu l·ª±c",
  "3ThuCheDoIncognito": "3. Th·ª≠ ch·∫ø ƒë·ªô Incognito",
  "3ThuCheDoIncognitoprivate": "3. Th·ª≠ ch·∫ø ƒë·ªô Incognito/Private",
  "4KiemTraFirewallantivirus": "4. Ki·ªÉm tra Firewall/Antivirus",
  "5Cau": "5 c√¢u",
  "8CardsThongKeChiTiet": "üìà 8 Cards th·ªëng k√™ chi ti·∫øt",
  "acceptedanswersSuaCauHoiConstUpdatequestionIdxNumb": ",\r\n          acceptedAnswers: [],\r\n        },\r\n      ],\r\n    }));\r\n  };\r\n\r\n  // S·ª≠a c√¢u h·ªèi\r\n  const updateQuestion = (idx: number, q: Question) => {\r\n    setQuiz(prev => ({\r\n      ...prev,\r\n      questions: prev.questions.map((item, i) => i === idx ? q : item),\r\n    }));\r\n  };\r\n\r\n  // X√≥a c√¢u h·ªèi\r\n  const deleteQuestion = (idx: number) => {\r\n    setQuiz(prev => ({\r\n      ...prev,\r\n      questions: prev.questions.filter((_, i) => i !== idx),\r\n    }));\r\n  };\r\n\r\n  // Di chuy·ªÉn c√¢u h·ªèi\r\n  const moveQuestion = (fromIndex: number, toIndex: number) => {\r\n    if (toIndex < 0 || toIndex >= quiz.questions.length) return;\r\n    \r\n    setQuiz(prev => {\r\n      const newQuestions = [...prev.questions];\r\n      const [moved] = newQuestions.splice(fromIndex, 1);\r\n      newQuestions.splice(toIndex, 0, moved);\r\n      return { ...prev, questions: newQuestions };\r\n    });\r\n  };\r\n\r\n  // Validate t·ª´ng step\r\n  const validateStep = (stepIndex: number): boolean => {\r\n    switch (stepIndex) {\r\n      case 0: // Info step\r\n        return !!(quiz.title && quiz.description && quiz.category && quiz.difficulty);\r\n      case 1: // Resources step - B·∫ÆT BU·ªòC c√≥ √≠t nh·∫•t 1 t√†i li·ªáu\r\n        return !!(quiz.resources && quiz.resources.length > 0);\r\n      case 2: // Questions step\r\n        return quiz.questions.length > 0 && quiz.questions.every(q => {\r\n          // Ki·ªÉm tra text c√¢u h·ªèi\r\n          if (!q.text) return false;\r\n          \r\n          // Ki·ªÉm tra theo t·ª´ng lo·∫°i c√¢u h·ªèi\r\n          switch (q.type) {\r\n            case",
  "action": {
    "activate": "Activate",
    "approve": "Ph√™ duy·ªát",
    "clear": "Clear",
    "confirm": "X√°c nh·∫≠n",
    "deactivate": "Deactivate",
    "deselect": "Deselect",
    "download": "T·∫£i xu·ªëng",
    "export": "Export",
    "import": "Import",
    "reject": "T·ª´ ch·ªëi",
    "reset": "Reset",
    "save": "L∆∞u",
    "select": "Select",
    "submit": "Submit",
    "upload": "T·∫£i l√™n"
  },
  "actiondescriptiondivButtonDivThongKeNhanhHienThiDi": ">{action.description}</div>\r\n          </button>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Th·ªëng k√™ nhanh hi·ªÉn th·ªã */}\r\n      <div className=",
  "actionpayloadStateisloadingFalseStateuserActionpay": ", action.payload);\r\n      state.isLoading = false;\r\n      state.user = action.payload;\r\n      state.isAuthenticated = true;\r\n      state.error = null;\r\n      // Ki·ªÉm tra xem user ƒë√£ ch·ªçn role ch∆∞a (∆∞u ti√™n needsRoleSelection t·ª´ payload)\r\n      state.needsRoleSelection = action.payload.needsRoleSelection ?? !action.payload.role;\r\n      console.log(",
  "actions": "H√†nh ƒë·ªông",
  "admin": {
    "activated": "activated",
    "categoryManagement": "Qu·∫£n l√Ω ch·ªß ƒë·ªÅ",
    "dashboard": "B·∫£ng ƒëi·ªÅu khi·ªÉn qu·∫£n tr·ªã",
    "dataLoadError": "Error loading data!",
    "deactivated": "deactivated",
    "loadingRealData": "Loading real data...",
    "quizManagement": "Qu·∫£n l√Ω Quiz",
    "realDataLoadError": "Error loading real data",
    "roleUpdateError": "Error occurred while updating role!",
    "roleUpdateSuccess": "Role updated successfully!",
    "settings": "C√†i ƒë·∫∑t",
    "statistics": "Th·ªëng k√™",
    "statusUpdateError": "Error occurred while updating status!",
    "userDeleteError": "Error occurred while deleting user!",
    "userDeleteSuccess": "User deleted successfully!",
    "userManagement": "Qu·∫£n l√Ω ng∆∞·ªùi d√πng",
    "userStatusUpdateSuccess": "Account {{action}} successfully!"
  },
  "adminCungVaoDashboardChinhCaseCreatorReturn": "; // Admin c≈©ng v√†o dashboard ch√≠nh\r\n    case 'creator':\r\n      return",
  "adminKhongCanChonRoleCreatedatUserdatacreatedatUse": "), // Admin kh√¥ng c·∫ßn ch·ªçn role\r\n            createdAt: userData?.createdAt ? \r\n              (userData.createdAt.toDate ? userData.createdAt.toDate().toISOString() : \r\n               userData.createdAt instanceof Date ? userData.createdAt.toISOString() : \r\n               userData.createdAt) : \r\n              new Date().toISOString(), // Convert Date to ISO string\r\n          };\r\n          \r\n          console.log(",
  "ai": {
    "configuration": "Question generation configuration",
    "description": "Use Vertex AI/Gemini to generate questions",
    "testingConnection": "Testing Firebase AI connection..."
  },
  "aiDaTaoGeneratedquestionslengthCauHoiH4DivDivClass": ">\r\n                ‚ú® AI ƒë√£ t·∫°o {generatedQuestions.length} c√¢u h·ªèi:\r\n              </h4>\r\n            </div>\r\n\r\n            <div className=",
  "aiDaTaoQuestionslengthCauHoiThanhCong": "‚úÖ AI ƒë√£ t·∫°o ${questions.length} c√¢u h·ªèi th√†nh c√¥ng!",
  "aiDangTaoCauHoi": "ü§ñ AI ƒëang t·∫°o c√¢u h·ªèi...",
  "aiDangTaoCauHoiChoBan": "AI ƒëang t·∫°o c√¢u h·ªèi cho b·∫°n...",
  "aiDangTaoCauHoiChoBanpDivDivClassname": ">AI ƒëang t·∫°o c√¢u h·ªèi cho b·∫°n...</p>\r\n                </div>\r\n              ) : (\r\n                <div className=",
  "aiDangTaoCauHoih4PClassname": ">ü§ñ AI ƒëang t·∫°o c√¢u h·ªèi...</h4>\r\n            <p className=",
  "aiServiceKhongTraVeCauHoiNao": "AI service kh√¥ng tr·∫£ v·ªÅ c√¢u h·ªèi n√†o",
  "amThuc": "·∫®m th·ª±c",
  "anThongKe": "·∫®n th·ªëng k√™",
  "anhBiaGiupQuizThuHutHonUploadSieuNhanh13sHoacDungU": ">\r\n            üí° ·∫¢nh b√¨a gi√∫p quiz thu h√∫t h∆°n. Upload si√™u nhanh 1-3s ho·∫∑c d√πng URL!\r\n          </p>\r\n        </div>\r\n\r\n        {/* Privacy Settings - Public/Private */}\r\n        <div className=",
  "anhBiaQuiz": "·∫¢nh b√¨a Quiz",
  "anhBiaQuizLabelTabChonUploadHoacUrlDivClassname": "/>\r\n            ·∫¢nh b√¨a Quiz\r\n          </label>\r\n          \r\n          {/* Tab ch·ªçn Upload ho·∫∑c URL */}\r\n          <div className=",
  "apiKeyDaDuocCauHinhSan": "API Key ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh s·∫µn",
  "apiKeyDaDuocCauHinhSanspanDivDivClassname": ">API Key ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh s·∫µn</span>\r\n                </div>\r\n                <div className=",
  "apiKeyDuocHardcodeModel": ", // API key ƒë∆∞·ª£c hardcode\r\n    model:",
  "apiKeyHoatDong": "‚úÖ API key ho·∫°t ƒë·ªông!",
  "apiKeyKhongDuocCauHinh": "API key kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh",
  "apiKeySuDungEnvironmentVariableNeuCoFallbackVeHard": ";\r\n\r\n// API Key - s·ª≠ d·ª•ng environment variable n·∫øu c√≥, fallback v·ªÅ hardcoded\r\nconst API_KEY = import.meta.env.VITE_GEMINI_API_KEY ||",
  "asConstCompositeKeysHelperFunctionsDeTaoCompositeD": ",\r\n} as const;\r\n\r\n// ============= COMPOSITE KEYS =============\r\n/**\r\n * Helper functions ƒë·ªÉ t·∫°o composite document IDs\r\n */\r\nexport const compositeKeys = {\r\n  userQuizSession: (quizId: string, userId: string) => `${quizId}_${userId}`,\r\n  userQuizActivity: (userId: string, quizId: string) => `${userId}_${quizId}`,\r\n  userFavorite: (userId: string) => userId,\r\n  userStats: (userId: string) => userId,\r\n};\r\n\r\n// ============= INDEXES =============\r\n/**\r\n * Document c√°c indexes c·∫ßn thi·∫øt\r\n * (Tham kh·∫£o khi t·∫°o firestore.indexes.json)\r\n */\r\nexport const REQUIRED_INDEXES = [\r\n  {\r\n    collection: COLLECTIONS.SYSTEM_NOTIFICATIONS,\r\n    fields: [",
  "asyncUseridStringConstResultsAwaitGetuserquizresul": ",\r\n  async (userId: string) => {\r\n    const results = await getUserQuizResults(userId);\r\n    return results;\r\n  }\r\n);\r\n\r\n// Th√™m isTimeWarning v√† totalTime v√†o QuizState\r\ninterface QuizState {\r\n  quizzes: Quiz[];\r\n  currentQuiz: Quiz | null;\r\n  userResults: QuizResult[];\r\n  loading: boolean;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  connectionError: boolean;\r\n  filters: QuizFilters;\r\n  currentQuestionIndex: number;\r\n  userAnswers: Record<string, string>;\r\n  timeLeft: number;\r\n  quizStartTime: number | null;\r\n  retryCount: number;\r\n  lastError: string | null;\r\n  isTimeWarning: boolean;\r\n  totalTime: number;\r\n}\r\n\r\nconst initialState: QuizState = {\r\n  quizzes: [],\r\n  currentQuiz: null,\r\n  userResults: [],\r\n  loading: false,\r\n  isLoading: false,\r\n  error: null,\r\n  connectionError: false,\r\n  filters: {\r\n    category:",
  "auth": {
    "agreeToTerms": "I agree to the",
    "confirmPassword": "X√°c nh·∫≠n m·∫≠t kh·∫©u",
    "confirmPasswordPlaceholder": "Confirm password",
    "createNewAccount": "Create new account",
    "displayName": "T√™n hi·ªÉn th·ªã",
    "displayNamePlaceholder": "Enter display name",
    "email": "Email",
    "emailNotVerified": "Your account has not been email verified. Please check your inbox and click the verification link, then try logging in again.",
    "emailPlaceholder": "Nh·∫≠p email c·ªßa b·∫°n",
    "emailVerification": "Email verification",
    "emailVerificationSent": "Verification email sent! Please check your inbox and click the verification link.",
    "errors": {
      "googleLoginError": "Google login error: {{message}}",
      "invalidCredential": "Email or password is incorrect",
      "invalidEmail": "Invalid email",
      "loginError": "Login error: {{message}}",
      "tooManyRequests": "Too many attempts. Please try again later",
      "userDisabled": "Account has been disabled",
      "userNotFound": "Email does not exist",
      "wrongPassword": "Wrong password"
    },
    "forgotPassword": "Forgot password?",
    "googleLoginSuccess": "Google login successful!",
    "hasAccount": "Already have an account? Login",
    "login": "ƒêƒÉng nh·∫≠p",
    "loginRequired": "Login required",
    "loginSuccess": "Login successful!",
    "loginWithGoogle": "Login with Google",
    "noAccount": "Don't have an account? Register now",
    "password": "M·∫≠t kh·∫©u",
    "passwordPlaceholder": "Enter password",
    "register": "ƒêƒÉng k√Ω",
    "registerSuccess": "Registration successful!",
    "termsOfService": "terms of service",
    "welcomeBack": "Welcome back!"
  },
  "autherrorThrowNewErrorgetautherrormessageautherror": ", authError);\r\n    throw new Error(getAuthErrorMessage(authError.code));\r\n  }\r\n};\r\n\r\n/**\r\n * Register new user\r\n */\r\nexport const register = async (credentials: RegisterCredentials): Promise<AuthUser> => {\r\n  try {\r\n    const userCredential = await createUserWithEmailAndPassword(\r\n      auth,\r\n      credentials.email,\r\n      credentials.password\r\n    );\r\n\r\n    // C·∫≠p nh·∫≠t t√™n hi·ªÉn th·ªã\r\n    await updateProfile(userCredential.user, {\r\n      displayName: credentials.displayName,\r\n    });\r\n\r\n    // T·∫°o t√†i kho·∫£n ng∆∞·ªùi d√πng trong Firestore v·ªõi vai tr√≤ m·∫∑c ƒë·ªãnh l√†",
  "authuserDispatchloginsuccessauthuserForceRerenderC": ", authUser);\r\n          dispatch(loginSuccess(authUser));\r\n          \r\n          // Force re-render cho fallback c≈©ng c·∫ßn\r\n          setTimeout(() => {\r\n            console.log(",
  "authuserDispatchloginsuccessauthuserForceRerenderD": ", authUser);\r\n          dispatch(loginSuccess(authUser));\r\n          \r\n          // Force re-render ƒë·ªÉ c·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c\r\n          setTimeout(() => {\r\n            console.log(",
  "autoclose1000UploadNgayKhongCompressKhongDoiConstR": ", { autoClose: 1000 });\r\n\r\n      // üöÄ Upload ngay - KH√îNG compress, KH√îNG ƒë·ª£i\r\n      const result = await instantUploadImage(\r\n        file,\r\n        options,\r\n        (uploadProgress: UploadProgress) => {\r\n          setProgress(uploadProgress);\r\n        }\r\n      );\r\n\r\n      if (result.success) {\r\n        toast.success(",
  "avatarHienTai": "Avatar hi·ªán t·∫°i",
  "avatarHienTaipButtonOnclickSetavatarurl": ">Avatar hi·ªán t·∫°i</p>\r\n                        <button\r\n                          onClick={() => setAvatarUrl(",
  "back": "Quay l·∫°i",
  "backToQuizListButtonDivDivTinhToanDiemSoKiemTraHop": ")}>\r\n            Back to Quiz List\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // T√≠nh to√°n ƒëi·ªÉm s·ªë, ki·ªÉm tra h·ª£p l·ªá\r\n  const correct = safeNumber(result.correct);\r\n  const total = safeNumber(result.total);\r\n  const percentage = total > 0 ? Math.round((correct / total) * 100) : 0;\r\n  const isExcellent = percentage >= 80;\r\n\r\n  return (\r\n    <div className=",
  "ban": "B·∫°n",
  "banCanCoVaiTroCreatorHoacAdminDeTruyCapTrangNay": "B·∫°n c·∫ßn c√≥ vai tr√≤ Creator ho·∫∑c Admin ƒë·ªÉ truy c·∫≠p trang n√†y.",
  "banCanCoVaiTroCreatorHoacAdminDeTruyCapTrangNayPDi": ">\r\n              B·∫°n c·∫ßn c√≥ vai tr√≤ Creator ho·∫∑c Admin ƒë·ªÉ truy c·∫≠p trang n√†y.\r\n            </p>\r\n            <div className=",
  "banCanDangNhapDeDanhGia": "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√°",
  "banCanDangNhapDeUploadAnh": "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ upload ·∫£nh",
  "banCanQuyenAdminDeTruyCapTrangNay": "B·∫°n c·∫ßn quy·ªÅn admin ƒë·ªÉ truy c·∫≠p trang n√†y",
  "banCanQuyenAdminDeTruyCapTrangNaypDivDivReturnDivC": ">B·∫°n c·∫ßn quy·ªÅn admin ƒë·ªÉ truy c·∫≠p trang n√†y</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=",
  "banCoChacChanMuonDoiQuyenChoNguoiDungNayThanhEtarg": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·ªïi quy·ªÅn cho ng∆∞·ªùi d√πng n√†y th√†nh ${e.target.value}?",
  "banCoChacChanMuonKhoaTaiKhoanNay": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën kh√≥a t√†i kho·∫£n n√†y?",
  "banCoChacChanMuonKichHoatTaiKhoanNay": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën k√≠ch ho·∫°t t√†i kho·∫£n n√†y?",
  "banCoChacChanMuonMoKhoaTaiKhoanNay": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën m·ªü kh√≥a t√†i kho·∫£n n√†y?",
  "banCoChacChanMuonNopBaiSauKhiNopSeKhongTheThayDoiD": ">\r\n              B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën n·ªôp b√†i? Sau khi n·ªôp s·∫Ω kh√¥ng th·ªÉ thay ƒë·ªïi ƒë√°p √°n.\r\n            </p>\r\n            <div className=",
  "banCoChacChanMuonXoaCreatorNayHanhDongNayKhongTheH": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a creator n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.",
  "banCoChacChanMuonXoaNguoiDungNay": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?",
  "banCoChacChanMuonXoaQuizNayKhong": "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a quiz n√†y kh√¥ng?",
  "banCoChacMuonThoat": "B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t?",
  "banCoChacMuonThoatH3PClassname": ">\r\n              B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t?\r\n            </h3>\r\n            <p className=",
  "banCoChacMuonXoaQuizNay": "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a quiz n√†y?",
  "banCoChacMuonXoaSelecteditemslengthItemtype": "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ${selectedItems.length} ${itemType}?",
  "banCoChacMuonXoaTaiLieuNay": "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t√†i li·ªáu n√†y?",
  "banCoTheChonNhieuDapAnChoCauHoiNay": "üí° B·∫°n c√≥ th·ªÉ ch·ªçn nhi·ªÅu ƒë√°p √°n cho c√¢u h·ªèi n√†y.",
  "banCoTheThayDoiVaiTroSauTrongPhanCaiDatTaiKhoan": "B·∫°n c√≥ th·ªÉ thay ƒë·ªïi vai tr√≤ sau trong ph·∫ßn c√†i ƒë·∫∑t t√†i kho·∫£n",
  "banConUnansweredquestionslengthCauHoiChuaTraLoiPDi": ">\r\n              B·∫°n c√≤n {unansweredQuestions.length} c√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi:\r\n            </p>\r\n            <div className=",
  "banDaYeuCauDangKyTaiKhoanTai": "B·∫°n ƒë√£ y√™u c·∫ßu ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i",
  "banDaYeuCauDangKyTaiKhoanTaiStrongquizAppstrongpPS": ">B·∫°n ƒë√£ y√™u c·∫ßu ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i <strong>Quiz App</strong>.</p>\r\n          <p style=",
  "banKhongTheTiepTucNeuChuaThemTaiLieu": "B·∫°n kh√¥ng th·ªÉ ti·∫øp t·ª•c n·∫øu ch∆∞a th√™m t√†i li·ªáu.",
  "banLaMotChuyenGiaTaoCauHoiTracNghiemChuyenNghiepNh": "B·∫°n l√† m·ªôt chuy√™n gia t·∫°o c√¢u h·ªèi tr·∫Øc nghi·ªám chuy√™n nghi·ªáp. \r\n\r\nNHI·ªÜM V·ª§: T·∫°o ${maxQuestions} c√¢u h·ªèi ch·∫•t l∆∞·ª£ng cao t·ª´ n·ªôi dung ƒë∆∞·ª£c cung c·∫•p.\r\n\r\nY√äU C·∫¶U:\r\n- ƒê·ªô kh√≥: ${difficultyText[difficulty]}\r\n- Lo·∫°i c√¢u h·ªèi: ${selectedTypes}\r\n- Ng√¥n ng·ªØ: ${lang}\r\n- C√¢u h·ªèi ph·∫£i ch√≠nh x√°c, r√µ r√†ng v√† c√≥ gi√° tr·ªã gi√°o d·ª•c\r\n- ƒê√°p √°n ph·∫£i ch√≠nh x√°c 100%\r\n- Tr√°nh c√¢u h·ªèi qu√° d·ªÖ ho·∫∑c m∆° h·ªì\r\n\r\nFORMAT TR·∫¢I L·ªúI (JSON):\r\n{\r\n  \"questions\": [\r\n    {\r\n      \"id\": \"unique_id\",\r\n      \"text\": \"N·ªôi dung c√¢u h·ªèi\",\r\n      \"type\": \"multiple|boolean|short_answer\",\r\n      \"answers\": [\r\n        {\"id\": \"ans1\", \"text\": \"ƒê√°p √°n A\", \"isCorrect\": true},\r\n        {\"id\": \"ans2\", \"text\": \"ƒê√°p √°n B\", \"isCorrect\": false},\r\n        {\"id\": \"ans3\", \"text\": \"ƒê√°p √°n C\", \"isCorrect\": false},\r\n        {\"id\": \"ans4\", \"text\": \"ƒê√°p √°n D\", \"isCorrect\": false}\r\n      ],\r\n      \"points\": 1,\r\n      \"explanation\": \"Gi·∫£i th√≠ch t·∫°i sao ƒë√°p √°n n√†y ƒë√∫ng\"\r\n    }\r\n  ]\r\n}\r\n\r\nCH·ªà TR·∫¢ V·ªÄ JSON, KH√îNG TH√äM TEXT KH√ÅC.",
  "banThayQuizNayNhuTheNao": "B·∫°n th·∫•y quiz n√†y nh∆∞ th·∫ø n√†o?",
  "banThayQuizNayNhuTheNaoH3PClassname": ">\r\n          B·∫°n th·∫•y quiz n√†y nh∆∞ th·∫ø n√†o?\r\n        </h3>\r\n        \r\n        <p className=",
  "bangTinh": "üìä B·∫£ng t√≠nh:",
  "bangTinhstrongDivClassname": ">üìä B·∫£ng t√≠nh:</strong>\r\n                  <div className=",
  "bangXepHang": "B·∫£ng x·∫øp h·∫°ng",
  "baoCao": "B√°o c√°o",
  "batBuoc": "B·∫ÆT BU·ªòC",
  "batBuocCoItNhat1TaiLieu": "‚ö†Ô∏è B·∫Øt bu·ªôc c√≥ √≠t nh·∫•t 1 t√†i li·ªáu",
  "batBuocCoItNhat1TaiLieupPClassname": ">‚ö†Ô∏è B·∫Øt bu·ªôc c√≥ √≠t nh·∫•t 1 t√†i li·ªáu</p>\r\n          <p className=",
  "batBuocSpanResourceestimatedtimeSpanResourceestima": ">\r\n                                    ‚ö†Ô∏è B·∫Øt bu·ªôc\r\n                                  </span>\r\n                                )}\r\n                                {resource.estimatedTime && (\r\n                                  <span>‚è±Ô∏è {resource.estimatedTime} ph√∫t</span>\r\n                                )}\r\n                                {resource.url && (\r\n                                  <a \r\n                                    href={resource.url} \r\n                                    target=",
  "batBuocSpanResourcerequiredSpanClassname": ">\r\n                            B·∫Øt bu·ªôc\r\n                          </span>\r\n                        )}\r\n                        {!resource.required && (\r\n                          <span className=",
  "batBuocSpanSpanClassname": ">\r\n                      B·∫Øt bu·ªôc\r\n                    </span>\r\n                  ) : (\r\n                    <span className=",
  "batBuocXem": "B·∫Øt bu·ªôc xem",
  "batBuocXemspanPClassname": ">B·∫Øt bu·ªôc xem</span>\r\n                  <p className=",
  "batDauLamQuiz": "B·∫Øt ƒë·∫ßu l√†m Quiz",
  "batDauLamQuizSpanClassname": "/>\r\n                  B·∫Øt ƒë·∫ßu l√†m Quiz\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <span className=",
  "batDauQuiz": "üöÄ B·∫Øt ƒë·∫ßu Quiz",
  "batDauTao": "B·∫Øt ƒë·∫ßu t·∫°o",
  "batDauTaoSpanClassname": ">\r\n              B·∫Øt ƒë·∫ßu t·∫°o <span className=",
  "bearerIdtokenBodyJsonstringifyContentsPartsTextSys": ": `Bearer ${idToken}`\r\n        },\r\n        body: JSON.stringify({\r\n          contents: [{\r\n            parts: [{\r\n              text: `${systemPrompt}\\n\\nN·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}`\r\n            }]\r\n          }],\r\n          generationConfig: {\r\n            temperature: config.temperature || 0.7,\r\n            maxOutputTokens: config.maxTokens || 2000,\r\n            topP: 0.8,\r\n            topK: 40\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Vertex AI API Error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;\r\n\r\n      if (!generatedText) {\r\n        throw new Error(",
  "benDuoiHoacAHref": "b√™n d∆∞·ªõi ho·∫∑c \r\n                  <a href=",
  "biCam": "B·ªã c·∫•m",
  "biCamoptionSelectDivDivClassname": ">B·ªã c·∫•m</option>\r\n              </select>\r\n            </div>\r\n\r\n            <div className=",
  "biKhoa": "B·ªã kh√≥a",
  "bieuDoCotDanhMucPhoBien": "üìä Bi·ªÉu ƒë·ªì c·ªôt - Danh m·ª•c ph·ªï bi·∫øn",
  "bieuDoTronTyLeQuizDaDuyetchoDuyet": "ü•ß Bi·ªÉu ƒë·ªì tr√≤n - T·ª∑ l·ªá quiz ƒë√£ duy·ªát/ch·ªù duy·ªát",
  "binhThuong": "B√¨nh th∆∞·ªùng",
  "boQua": "B·ªè qua",
  "boQuaButtonButtonOnclickoncompleteDisabledallrequi": ">\r\n                B·ªè qua\r\n              </button>\r\n            )}\r\n\r\n            <button\r\n              onClick={onComplete}\r\n              disabled={!allRequiredViewed}\r\n              className={`flex-1 flex items-center justify-center gap-2 px-8 py-4 rounded-lg font-semibold text-lg transition-all ${\r\n                allRequiredViewed\r\n                  ?",
  "boYeuThich": "B·ªè y√™u th√≠ch",
  "bodyJsonstringifyContentsPartsTextSystempromptnnno": "},\r\n        body: JSON.stringify({\r\n          contents: [{\r\n            parts: [{\r\n              text: `${systemPrompt}\\n\\nN·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}`\r\n            }]\r\n          }],\r\n          generationConfig: {\r\n            temperature: 0.7,\r\n            maxOutputTokens: 2000\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Gemini API Error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const generatedText = data.candidates[0]?.content?.parts[0]?.text;\r\n\r\n      return OpenAIService.parseQuestionsFromText(generatedText);\r\n    } catch (error) {\r\n      console.error(",
  "buocDauTien": "üéØ B∆∞·ªõc ƒë·∫ßu ti√™n",
  "button2ChinhSuaLuonHienThiButtonOnclickHandleeditq": "/>\r\n                    </button>\r\n\r\n                    {/* 2. Ch·ªânh s·ª≠a (lu√¥n hi·ªÉn th·ªã) */}\r\n                      <button\r\n                      onClick={() => handleEdit(quiz.id)}\r\n                      className=",
  "button34DuyetTuChoiChiHienThiKhiPendingQuizstatus": "/>\r\n                    </button>\r\n                    \r\n                    {/* 3 & 4. Duy·ªát & T·ª´ ch·ªëi (ch·ªâ hi·ªÉn th·ªã khi pending) */}\r\n                    {quiz.status ===",
  "button5MoLaiHienThiKhiDaDuyetHoacTuChoiQuizstatus": "/>\r\n                        </button>\r\n                      </>\r\n                    )}\r\n\r\n                    {/* 5. M·ªü l·∫°i (hi·ªÉn th·ªã khi ƒë√£ duy·ªát ho·∫∑c t·ª´ ch·ªëi) */}\r\n                      {(quiz.status ===",
  "button6XoaLuonHienThiButtonOnclickHandledeletequiz": "/>\r\n                      </button>\r\n                    )}\r\n                    \r\n                    {/* 6. X√≥a (lu√¥n hi·ªÉn th·ªã) */}\r\n                      <button\r\n                      onClick={() => handleDelete(quiz.id)}\r\n                      className=",
  "buttonButtonOnclickSetshowreviewformtrueClassnamep": "} />\r\n              </button>\r\n              <button\r\n                onClick={() => setShowReviewForm(true)}\r\n                className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium\"\r\n              >\r\n                Vi·∫øt ƒë√°nh gi√°\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        {stats && (\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\r\n            <div className=\"bg-white rounded-lg p-6 shadow-sm border border-gray-100\">\r\n              <div className=\"flex items-center space-x-4\">\r\n                <div className=\"p-3 bg-blue-100 rounded-full\">\r\n                  <Star className=\"w-6 h-6 text-blue-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-2xl font-bold text-gray-900\">\r\n                    {stats.averageRating.toFixed(1)}\r\n                  </p>\r\n                  <p className=\"text-sm text-gray-600\">{t(\"multiplayer.avgScore\")}</p>\r\n                  <div className=\"flex items-center mt-1\">\r\n                    {[1, 2, 3, 4, 5].map(star => (\r\n                      <Star\r\n                        key={star}\r\n                        className={",
  "buttonDivNoiDungTheoTungDangQuestiontype": ")}</Button>\r\n      </div>\r\n\r\n      {/* N·ªôi dung theo t·ª´ng d·∫°ng */}\r\n      {question.type ===",
  "buttonDivTdTrTbodyTableDivModalXacNhanThaoTacModal": ")}\r\n                        </button>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {/* Modal x√°c nh·∫≠n thao t√°c */}\r\n      <Modal\r\n        isOpen={confirmModal.open}\r\n        onClose={() => setConfirmModal({ open: false, type: null })}\r\n        title={t(",
  "buttonShowmodalunlockedButtonOnclickShareAchieveme": ")}\r\n                </button>\r\n                {showModal.unlocked && (\r\n                  <button\r\n                    onClick={() => {\r\n                      // Share achievement\r\n                      navigator.clipboard.writeText(`üéâ T√¥i v·ª´a m·ªü kh√≥a th√†nh t√≠ch",
  "cacCachVietDuocChapNhan": "C√°c c√°ch vi·∫øt ƒë∆∞·ª£c ch·∫•p nh·∫≠n:",
  "cacCachVietDuocChapNhanlabelDivClassname": ">C√°c c√°ch vi·∫øt ƒë∆∞·ª£c ch·∫•p nh·∫≠n:</label>\r\n                <div className=",
  "cacCachVietKhac": "üìù C√°c c√°ch vi·∫øt kh√°c:",
  "cacCachVietKhacstrongQacceptedanswersslice1join": ">üìù C√°c c√°ch vi·∫øt kh√°c:</strong> {q.acceptedAnswers.slice(1).join(",
  "cacDinhDangFileDuocHoTro": "üìÅ C√°c ƒë·ªãnh d·∫°ng file ƒë∆∞·ª£c h·ªó tr·ª£:",
  "cacDinhDangFileDuocHoTroh4DivClassname": ">üìÅ C√°c ƒë·ªãnh d·∫°ng file ƒë∆∞·ª£c h·ªó tr·ª£:</h4>\r\n              <div className=",
  "cache1NamUploadWithProgressTrackingConstUploadtask": "// Cache 1 nƒÉm\r\n    };\r\n\r\n    // Upload with progress tracking\r\n    const uploadTask = uploadBytesResumable(storageRef, file, metadata);\r\n\r\n    return new Promise((resolve, _reject) => {\r\n      uploadTask.on(",
  "caiDatBoSung": "C√†i ƒë·∫∑t b·ªï sung",
  "caiDatBoSungLabelDivClassname": "/>\r\n            C√†i ƒë·∫∑t b·ªï sung\r\n          </label>\r\n          \r\n          <div className=",
  "calculateQuizScoreExportConstCalculatescoreResultQ": ";\r\n};\r\n\r\n/**\r\n * Calculate quiz score\r\n */\r\nexport const calculateScore = (result: QuizResult): number => {\r\n  return Math.round((result.correctAnswers / result.totalQuestions) * 100);\r\n};\r\n\r\n/**\r\n * Get difficulty badge color\r\n */\r\nexport const getDifficultyColor = (difficulty: string): string => {\r\n  switch (difficulty) {\r\n    case 'easy':\r\n      return 'bg-green-100 text-green-800';\r\n    case 'medium':\r\n      return 'bg-yellow-100 text-yellow-800';\r\n    case 'hard':\r\n      return 'bg-red-100 text-red-800';\r\n    default:\r\n      return 'bg-gray-100 text-gray-800';\r\n  }\r\n};\r\n\r\n/**\r\n * Get difficulty label in Vietnamese\r\n */\r\nexport const getDifficultyLabel = (difficulty: string): string => {\r\n  switch (difficulty) {\r\n    case 'easy':\r\n      return 'D·ªÖ';\r\n    case 'medium':\r\n      return 'Trung b√¨nh';\r\n    case 'hard':\r\n      return 'Kh√≥';\r\n    default:\r\n      return 'Kh√¥ng x√°c ƒë·ªãnh';\r\n  }\r\n};\r\n\r\n/**\r\n * Shuffle an array (Fisher-Yates algorithm)\r\n */\r\nexport const shuffleArray = <T>(array: T[]): T[] => {\r\n  const shuffled = [...array];\r\n  for (let i = shuffled.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n  }\r\n  return shuffled;\r\n};\r\n\r\n/**\r\n * Debounce function\r\n */\r\nexport const debounce = <T extends (...args: any[]) => any>(\r\n  func: T,\r\n  delay: number\r\n): ((...args: Parameters<T>) => void) => {\r\n  let timeoutId: NodeJS.Timeout;\r\n  return (...args: Parameters<T>) => {\r\n    clearTimeout(timeoutId);\r\n    timeoutId = setTimeout(() => func(...args), delay);\r\n  };\r\n};\r\n\r\n/**\r\n * Generate a random ID\r\n */\r\nexport const generateId = (): string => {\r\n  return Math.random().toString(36).substr(2, 9);\r\n};\r\n\r\n/**\r\n * Validate email format\r\n */\r\nexport const isValidEmail = (email: string): boolean => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n/**\r\n * Validate password strength\r\n */\r\nexport const validatePassword = (password: string): {\r\n  isValid: boolean;\r\n  errors: string[];\r\n} => {\r\n  const errors: string[] = [];\r\n  \r\n  if (password.length < 6) {\r\n    errors.push('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');\r\n  }\r\n  \r\n  if (!/[A-Z]/.test(password)) {\r\n    errors.push('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ hoa');\r\n  }\r\n  \r\n  if (!/[a-z]/.test(password)) {\r\n    errors.push('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ th∆∞·ªùng');\r\n  }\r\n  \r\n  if (!/[0-9]/.test(password)) {\r\n    errors.push('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 s·ªë');\r\n  }\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors,\r\n  };\r\n};\r\n\r\n/**\r\n * Format time in seconds to MM:SS format\r\n */\r\nexport const formatTime = (seconds: number): string => {\r\n  const minutes = Math.floor(seconds / 60);\r\n  const remainingSeconds = seconds % 60;\r\n  return",
  "canDanhItNhatMintimeperpagesChoMoiTrang": "C·∫ßn d√†nh √≠t nh·∫•t ${minTimePerPage}s cho m·ªói trang",
  "canDatToiThieuPassingscoreDiemMinicheck": "C·∫ßn ƒë·∫°t t·ªëi thi·ªÉu ${passingScore} ƒëi·ªÉm mini-check",
  "canDocDenTrangCuoi": "C·∫ßn ƒë·ªçc ƒë·∫øn trang cu·ªëi",
  "canXacNhanDaDoc": "C·∫ßn x√°c nh·∫≠n ƒë√£ ƒë·ªçc",
  "canXemMoiAnhItNhatThresholdminviewtimes": "C·∫ßn xem m·ªói ·∫£nh √≠t nh·∫•t ${threshold.minViewTime}s",
  "canXemToiThieuThresholdminpagesTrang": "C·∫ßn xem t·ªëi thi·ªÉu ${threshold.minPages} trang",
  "canXemToiThieuThresholdminviewedcountAnhslide": "C·∫ßn xem t·ªëi thi·ªÉu ${threshold.minViewedCount} ·∫£nh/slide",
  "canXemToiThieuThresholdminwatchpercentVideo": "C·∫ßn xem t·ªëi thi·ªÉu ${threshold.minWatchPercent}% video",
  "cancel": "H·ªßy",
  "capNhat": "C·∫≠p nh·∫≠t",
  "capNhatDanhGiaThanhCong": "C·∫≠p nh·∫≠t ƒë√°nh gi√° th√†nh c√¥ng!",
  "capNhatDuLieu": "C·∫≠p nh·∫≠t d·ªØ li·ªáu",
  "capNhatLastupdatetolocaletimestringDivDivClassname": ">\r\n                  C·∫≠p nh·∫≠t: {lastUpdate.toLocaleTimeString()}\r\n                </div>\r\n              )}\r\n              <div className=",
  "capNhatQuizThanhCong": "C·∫≠p nh·∫≠t quiz th√†nh c√¥ng!",
  "capNhatReduxStoreDispatchsetroleroleConsolelog": ");\r\n      \r\n      // C·∫≠p nh·∫≠t Redux store\r\n      dispatch(setRole(role));\r\n      console.log(",
  "capNhatThongTin": "C·∫≠p nh·∫≠t th√¥ng tin",
  "catchErrorConsoleerrorerrorUpdatingStatusErrorToas": ");\r\n    } catch (error) {\r\n      console.error('Error updating status:', error);\r\n      toast.error('C√≥ l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i');\r\n    }\r\n  };\r\n\r\n  const handleDeleteCreator = async (creatorId: string) => {\r\n    if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a creator n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await deleteDoc(doc(db, 'users', creatorId));\r\n      setCreators(creators.filter(creator => creator.id !== creatorId));\r\n      toast.success('ƒê√£ x√≥a creator th√†nh c√¥ng');\r\n    } catch (error) {\r\n      console.error('Error deleting creator:', error);\r\n      toast.error('C√≥ l·ªói khi x√≥a creator');\r\n    }\r\n  };\r\n\r\n  const filteredCreators = creators.filter(creator => {\r\n    const matchesSearch = creator.displayName.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         creator.email.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesStatus = statusFilter === 'all' || creator.status === statusFilter;\r\n    return matchesSearch && matchesStatus;\r\n  });\r\n\r\n  const renderStatsCard = (icon: React.ReactNode, title: string, value: number, color: string) => (\r\n    <div className=\"bg-white rounded-xl p-6 shadow-sm border border-gray-100\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <p className=\"text-sm font-medium text-gray-600\">{title}</p>\r\n          <p className=\"text-3xl font-bold text-gray-900 mt-1\">{value}</p>\r\n        </div>\r\n        <div className={",
  "catchErrorConsoleerrorerrorVerifyingOtpErrorReturn": "};\r\n    }\r\n  } catch (error) {\r\n    console.error('Error verifying OTP:', error);\r\n    return { success: false, message: 'C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c.' };\r\n  }\r\n};\r\n\r\n/**\r\n * Clear OTP data\r\n */\r\nexport const clearOTP = (email: string): void => {\r\n  sessionStorage.removeItem(",
  "catchErrorConstAutherrorErrorAsFirebaseautherrorTr": "};\r\n  } catch (error) {\r\n    const authError = error as FirebaseAuthError;\r\n    // Tr·∫£ v·ªÅ l·ªói ti·∫øng Vi·ªát\r\n    throw new Error(getAuthErrorMessage(authError.code));\r\n  }\r\n};\r\n\r\n/**\r\n * Sign out user\r\n */\r\nexport const signOutUser = async (): Promise<void> => {\r\n  try {\r\n    await signOut(auth);\r\n  } catch (error) {\r\n    const authError = error as FirebaseAuthError;\r\n    throw new Error(getAuthErrorMessage(authError.code));\r\n  }\r\n};\r\n\r\n/**\r\n * Send password reset email\r\n */\r\nexport const resetPassword = async (email: string): Promise<void> => {\r\n  try {\r\n    await sendPasswordResetEmail(auth, email);\r\n  } catch (error) {\r\n    const authError = error as FirebaseAuthError;\r\n    throw new Error(getAuthErrorMessage(authError.code));\r\n  }\r\n};\r\n\r\n/**\r\n * Update user password\r\n */\r\nexport const changePassword = async (newPassword: string): Promise<void> => {\r\n  if (!auth.currentUser) {\r\n    throw new Error(",
  "categories": {
    "biology": "Biology",
    "chemistry": "Chemistry",
    "economics": "Economics",
    "english": "Ti·∫øng Anh",
    "entertainment": "Gi·∫£i tr√≠",
    "generalKnowledge": "General Knowledge",
    "geography": "ƒê·ªãa l√Ω",
    "history": "L·ªãch s·ª≠",
    "literature": "VƒÉn h·ªçc",
    "mathematics": "Mathematics",
    "movies": "Movies",
    "music": "Music",
    "physics": "Physics",
    "politics": "Politics",
    "programming": "Programming",
    "science": "Khoa h·ªçc",
    "sports": "Th·ªÉ thao",
    "webDevelopment": "Web Development"
  },
  "category": {
    "art": "Art",
    "entertainment": "Gi·∫£i tr√≠",
    "general": "General",
    "history": "L·ªãch s·ª≠",
    "literature": "VƒÉn h·ªçc",
    "music": "Music",
    "politics": "Politics",
    "science": "Khoa h·ªçc",
    "sports": "Th·ªÉ thao",
    "technology": "C√¥ng ngh·ªá"
  },
  "categoryStringIspublicBooleanIspublishedBooleanEdi": ";\r\n  category: string;\r\n  isPublic: boolean;\r\n  isPublished?: boolean;\r\n  editRequests?: EditRequest[];\r\n  learningResources?: any[]; // T√†i li·ªáu h·ªçc t·∫≠p\r\n}\r\n\r\ninterface EditRequest {\r\n  id: string;\r\n  requestedBy: string;\r\n  requestedAt: Date;\r\n  reason: string;\r\n  status:",
  "cauHinhAi": "C·∫•u h√¨nh AI",
  "cauHinhAiDeTaoCauHoi": "ü§ñ C·∫•u h√¨nh AI ƒë·ªÉ t·∫°o c√¢u h·ªèi:",
  "cauHinhAiDeTaoCauHoih4DivClassname": ">ü§ñ C·∫•u h√¨nh AI ƒë·ªÉ t·∫°o c√¢u h·ªèi:</h4>\r\n              \r\n              <div className=",
  "cauHinhAih3PClassname": ">C·∫•u h√¨nh AI</h3>\r\n                <p className=",
  "cauHinhDaChon": "C·∫•u h√¨nh ƒë√£ ch·ªçn:",
  "cauHinhDaChonh4DivClassname": ">C·∫•u h√¨nh ƒë√£ ch·ªçn:</h4>\r\n                <div className=",
  "cauHinhLai": "C·∫•u h√¨nh l·∫°i",
  "cauHinhLaiButtonButtonOnclickhandleusequestionsCla": ">\r\n                    C·∫•u h√¨nh l·∫°i\r\n                  </button>\r\n                  <button\r\n                    onClick={handleUseQuestions}\r\n                    className=",
  "cauHinhMienPhiFreetierMaxrequestsperminute15Maxtok": ",\r\n  \r\n  // C·∫•u h√¨nh mi·ªÖn ph√≠\r\n  FREE_TIER: {\r\n    MAX_REQUESTS_PER_MINUTE: 15,\r\n    MAX_TOKENS_PER_REQUEST: 2048,\r\n    SUPPORTED_MODELS: [",
  "cauHoi": "C√¢u h·ªèi",
  "cauHoiDienTu": "C√¢u h·ªèi ƒëi·ªÅn t·ª´",
  "cauHoiDienTuh4DivClassname": ">C√¢u h·ªèi ƒëi·ªÅn t·ª´</h4>\r\n          <div className=",
  "cauHoiDungsai": "C√¢u h·ªèi ƒê√∫ng/Sai",
  "cauHoiDungsaih4DivClassname": ">C√¢u h·ªèi ƒê√∫ng/Sai</h4>\r\n          <div className=",
  "cauHoiMau": "C√¢u h·ªèi m·∫´u?",
  "cauHoiODay": "C√¢u h·ªèi ·ªü ƒë√¢y",
  "cauHoiTiepTheoTrong": "C√¢u h·ªèi ti·∫øp theo trong:",
  "cauHoiTiepTheoTrongNextquestioncountdownGiay": "C√¢u h·ªèi ti·∫øp theo trong ${nextQuestionCountdown} gi√¢y...",
  "cauHoiTiepTheoTrongSpanClassname": ">C√¢u h·ªèi ti·∫øp theo trong: <span className=",
  "cauIndex1QuestiontextH5DivClassname": ">\r\n                    C√¢u {index + 1}: {question.text}\r\n                  </h5>\r\n                  <div className=",
  "cauIndex1Questiontextslice050ButtonDivDivClassname": ">\r\n                  C√¢u {index + 1}: {question.text.slice(0, 50)}...\r\n                </button>\r\n              ))}\r\n            </div>\r\n            <div className=",
  "cauIndex1h4ButtonOnclickHandleregeneratequestionin": ">C√¢u {index + 1}</h4>\r\n                      <button\r\n                        onClick={() => handleRegenerateQuestion(index)}\r\n                        className=",
  "cauIndex1h4SpanClassname": ">C√¢u {index + 1}</h4>\r\n                      <span className=",
  "cauTiep": "C√¢u ti·∫øp",
  "cauTraLoiCuaBan": "C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n:",
  "cauTraLoiCuaBanSpanSpanClassname": ">C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n: </span>\r\n                  <span className=",
  "cauTruoc": "C√¢u tr∆∞·ªõc",
  "chaoBanHayTraLoiNganGonBangTiengVietAiDangHoatDong": "Ch√†o b·∫°n! H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát: AI ƒëang ho·∫°t ƒë·ªông t·ªët kh√¥ng?",
  "chaoMungTroLaiUserdisplaynamesplit": ">\r\n                Ch√†o m·ª´ng tr·ªü l·∫°i, {user?.displayName?.split(",
  "chapNhanJpgPngWebpGifToiDa5mb": "‚úÖ Ch·∫•p nh·∫≠n: JPG, PNG, WebP, GIF (t·ªëi ƒëa 5MB)",
  "chapNhanJpgPngWebpGifToiDa5mbPDivDivClassname": ">\r\n                        ‚úÖ Ch·∫•p nh·∫≠n: JPG, PNG, WebP, GIF (t·ªëi ƒëa 5MB)\r\n                      </p>\r\n                    </div>\r\n                    <div className=",
  "chapNhanMp3WavOggM4aToiDa10mb": "‚úÖ Ch·∫•p nh·∫≠n: MP3, WAV, OGG, M4A (t·ªëi ƒëa 10MB)",
  "chapNhanMp3WavOggM4aToiDa10mbPDivDivClassname": ">\r\n                        ‚úÖ Ch·∫•p nh·∫≠n: MP3, WAV, OGG, M4A (t·ªëi ƒëa 10MB)\r\n                      </p>\r\n                    </div>\r\n                    <div className=",
  "chapNhanMp4WebmMovAviToiDa50mb": "‚úÖ Ch·∫•p nh·∫≠n: MP4, WebM, MOV, AVI (t·ªëi ƒëa 50MB)",
  "chapNhanMp4WebmMovAviToiDa50mbPDivDivClassname": ">\r\n                        ‚úÖ Ch·∫•p nh·∫≠n: MP4, WebM, MOV, AVI (t·ªëi ƒëa 50MB)\r\n                      </p>\r\n                    </div>\r\n                    <div className=",
  "chapNhanPdfToiDa10mb": "‚úÖ Ch·∫•p nh·∫≠n: PDF (t·ªëi ƒëa 10MB)",
  "chapNhanPdfToiDa10mbPDivDivClassname": ">\r\n                        ‚úÖ Ch·∫•p nh·∫≠n: PDF (t·ªëi ƒëa 10MB)\r\n                      </p>\r\n                    </div>\r\n                    <div className=",
  "chatLuongTot": "Ch·∫•t l∆∞·ª£ng t·ªët",
  "chayLocalVoiLlamaMistralCodellamaHoanToanMienPhi": "Ch·∫°y local v·ªõi Llama, Mistral, CodeLlama - Ho√†n to√†n mi·ªÖn ph√≠",
  "chayTestNayTrongBrowserConsole": "‚ö†Ô∏è Ch·∫°y test n√†y trong browser console:",
  "chayTrucTiepTrenTrinhDuyet": "‚Ä¢ Ch·∫°y tr·ª±c ti·∫øp tr√™n tr√¨nh duy·ªát",
  "checkFileSizeConstFilesizekbFilesize1024IfFilesize": ")}`\r\n    };\r\n  }\r\n\r\n  // Check file size\r\n  const fileSizeKB = file.size / 1024;\r\n  if (fileSizeKB > maxSizeKB) {\r\n    return {\r\n      valid: false,\r\n      error: `K√≠ch th∆∞·ªõc file v∆∞·ª£t qu√° ${maxSizeKB}KB (${Math.round(fileSizeKB)}KB)`\r\n    };\r\n  }\r\n\r\n  return { valid: true };\r\n};\r\n\r\n/**\r\n * Generate unique filename with timestamp\r\n */\r\nconst generateFileName = (originalName: string, userId: string): string => {\r\n  const timestamp = Date.now();\r\n  const randomStr = Math.random().toString(36).substring(2, 8);\r\n  const extension = originalName.split(",
  "checkVideoCompletionIfThresholdminwatchsecProgress": ":\r\n      // Check video completion\r\n      if (threshold.minWatchSec && (!progress.secondsWatched || progress.secondsWatched < threshold.minWatchSec)) {\r\n        return {\r\n          completed: false,\r\n          reason: `C·∫ßn xem t·ªëi thi·ªÉu ${Math.ceil(threshold.minWatchSec / 60)} ph√∫t`\r\n        };\r\n      }\r\n      if (threshold.minWatchPercent && (!progress.watchPercent || progress.watchPercent < threshold.minWatchPercent)) {\r\n        return {\r\n          completed: false,\r\n          reason: `C·∫ßn xem t·ªëi thi·ªÉu ${threshold.minWatchPercent}% video`\r\n        };\r\n      }\r\n      return { completed: true };\r\n\r\n    case",
  "checkedaiscorrectOnchangeHandlesetcorrectidxSpanCl": "}\r\n                  checked={a.isCorrect}\r\n                  onChange={() => handleSetCorrect(idx)}\r\n                />\r\n                <span className=\"text-sm\">{t(\"common.correct\")}</span>\r\n              </label>\r\n              {question.answers.length > 2 && (\r\n                <Button \r\n                  variant=\"outline\" \r\n                  onClick={() => handleRemoveAnswer(idx)} \r\n                  className=\"text-red-600 border-red-300 px-2\"\r\n                >\r\n                  X\r\n                </Button>\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {question.type === 'boolean' && (\r\n        <div className=\"space-y-3\">\r\n          <h4 className=\"font-medium text-gray-700\">C√¢u h·ªèi ƒê√∫ng/Sai</h4>\r\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\r\n            <p className=\"text-sm text-gray-600 mb-3\">Ch·ªçn ƒë√°p √°n ƒë√∫ng cho c√¢u h·ªèi n√†y:</p>\r\n            <div className=\"space-y-2\">\r\n              {question.answers.map((answer, idx) => (\r\n                <label key={answer.id} className=\"flex items-center gap-3 cursor-pointer\">\r\n                  <input\r\n                    type=\"radio\"\r\n                    name={",
  "checkingAuth": "ƒêang ki·ªÉm tra x√°c th·ª±c...",
  "chiBanVaNguoiCoLinkMoiTruyCapDuoc": "Ch·ªâ b·∫°n v√† ng∆∞·ªùi c√≥ link m·ªõi truy c·∫≠p ƒë∆∞·ª£c",
  "chiBanVaNguoiCoLinkMoiTruyCapDuocPDivQuizispublicF": ">\r\n                    Ch·ªâ b·∫°n v√† ng∆∞·ªùi c√≥ link m·ªõi truy c·∫≠p ƒë∆∞·ª£c\r\n                  </p>\r\n                </div>\r\n                {quiz.isPublic === false && (\r\n                  <div className=",
  "chiChapNhanAllowedtypesmaptTsplit1join": "Ch·ªâ ch·∫•p nh·∫≠n: ${allowedTypes.map(t => t.split('/')[1]).join(', ')}",
  "chiChapNhanCacDinhDangAllowedtypesmaptTsplit1join": "Ch·ªâ ch·∫•p nh·∫≠n c√°c ƒë·ªãnh d·∫°ng: ${allowedTypes.map(t => t.split('/')[1]).join(', ')}",
  "chiChapNhanFileAnhJpgPngWebpGif": "‚ùå Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh! (JPG, PNG, WebP, GIF)",
  "chiChapNhanFileAudioMp3WavOggM4a": "‚ùå Ch·ªâ ch·∫•p nh·∫≠n file audio! (MP3, WAV, OGG, M4A)",
  "chiChapNhanFilePdf": "‚ùå Ch·ªâ ch·∫•p nh·∫≠n file PDF!",
  "chiChapNhanFileVideoMp4WebmMovAvi": "‚ùå Ch·ªâ ch·∫•p nh·∫≠n file video! (MP4, WebM, MOV, AVI)",
  "chiConItHon1PhutHayHoanThanhNgay": "Ch·ªâ c√≤n √≠t h∆°n 1 ph√∫t! H√£y ho√†n th√†nh ngay.",
  "chiTiet": "Chi ti·∫øt:",
  "chiTietCreator": "Chi ti·∫øt Creator",
  "chiTietCreatorH3ButtonOnclickSetshowcreatormodalfa": ">\r\n                    Chi ti·∫øt Creator\r\n                  </h3>\r\n                  <button\r\n                    onClick={() => setShowCreatorModal(false)}\r\n                    className=",
  "chiTietLoiDevelopmentOnly": "Chi ti·∫øt l·ªói (Development only)",
  "chiTietLoiDevelopmentOnlysummaryPreClassname": ">Chi ti·∫øt l·ªói (Development only)</summary>\r\n                <pre className=",
  "chiTraVeJsonKhongCoTextKhacStaticParsequestionsfro": "}\r\n  ]\r\n}\r\n\r\nCH·ªà tr·∫£ v·ªÅ JSON, kh√¥ng c√≥ text kh√°c.`;\r\n  }\r\n\r\n  static parseQuestionsFromText(text: string): Question[] {\r\n    try {\r\n      // Clean up the response text\r\n      const cleanText = text.replace(/```json|```/g,",
  "chiaSeCamNhanCuaBanDeGiupNhungNguoiKhacCoTraiNghie": ">\r\n          Chia s·∫ª c·∫£m nh·∫≠n c·ªßa b·∫°n ƒë·ªÉ gi√∫p nh·ªØng ng∆∞·ªùi kh√°c c√≥ tr·∫£i nghi·ªám t·ªët h∆°n\r\n        </p>\r\n\r\n        <div className=",
  "chiaSeKetQua": "üì§ Chia s·∫ª k·∫øt qu·∫£",
  "chiaSeTraiNghiemCuaBanVeQuizNay": "Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n v·ªÅ quiz n√†y...",
  "chinhSuaDanhGia": "Ch·ªânh s·ª≠a ƒë√°nh gi√°",
  "chinhSuaQuiz": "‚úèÔ∏è Ch·ªânh s·ª≠a Quiz",
  "chinhSuaQuizH1PClassname": ">\r\n              ‚úèÔ∏è Ch·ªânh s·ª≠a Quiz\r\n            </h1>\r\n            <p className=",
  "chinhSuaThongTinQuizCuaBan": "Ch·ªânh s·ª≠a th√¥ng tin quiz c·ªßa b·∫°n",
  "chinhSuaThongTinQuizCuaBanpDivFormDivClassname": ">Ch·ªânh s·ª≠a th√¥ng tin quiz c·ªßa b·∫°n</p>\r\n                </div>\r\n\r\n                {/* Form */}\r\n                <div className=",
  "choCapNhat": "‚úÖ Ch·ªù c·∫≠p nh·∫≠t",
  "choCapNhatpDivDivClassname": ">‚úÖ Ch·ªù c·∫≠p nh·∫≠t</p>\r\n            </div>\r\n            <div className=",
  "choDuyet": "‚è≥ Ch·ªù duy·ªát",
  "choDuyetoptionOptionValue": ">‚è≥ Ch·ªù duy·ªát</option>\r\n                        <option value=",
  "choDuyetspanConstGetdifficultybadgeDifficultyStrin": ">‚è≥ Ch·ªù duy·ªát</span>;\r\n    }\r\n  };\r\n\r\n  const getDifficultyBadge = (difficulty: string) => {\r\n    switch (difficulty) {\r\n      case",
  "choPhep": "‚úÖ Cho ph√©p",
  "choPhepLamLai": "üîÑ Cho ph√©p l√†m l·∫°i",
  "choPhepLamLaidivPClassname": ">üîÑ Cho ph√©p l√†m l·∫°i</div>\r\n                <p className=",
  "choiLai": "üîÑ Ch∆°i l·∫°i",
  "choiNgay": "Ch∆°i ngay",
  "choiNgaySpanClassname": ">\r\n              Ch∆°i ngay <span className=",
  "chonAiProvider": "Ch·ªçn AI Provider",
  "chonAiProviderh3PClassname": ">Ch·ªçn AI Provider</h3>\r\n                <p className=",
  "chonAnh": "Ch·ªçn ·∫£nh",
  "chonAnhButtonDivDivUploadButtonSelectedfileUploadi": ">\r\n              Ch·ªçn ·∫£nh\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Upload Button */}\r\n      {selectedFile && !uploading && (\r\n        <button\r\n          onClick={handleUpload}\r\n          disabled={uploading}\r\n          className=",
  "chonAnhDapAn": "Ch·ªçn ·∫£nh ƒë√°p √°n",
  "chonAnhDapAnh4ButtonOnclickhandleaddanswerVariant": ">Ch·ªçn ·∫£nh ƒë√°p √°n</h4>\r\n            <Button onClick={handleAddAnswer} variant=",
  "chonAnhTao4DapAnCoImageurlNewanswersArrayfromLengt": ":\r\n        // Ch·ªçn ·∫£nh: t·∫°o 4 ƒë√°p √°n c√≥ imageUrl\r\n        newAnswers = Array.from({ length: 4 }, (_, i) => ({\r\n          id: generateId(),\r\n          text: `·∫¢nh ${i + 1}`,\r\n          isCorrect: i === 0,\r\n          imageUrl:",
  "chonAnhoptionSelectInputType": ">Ch·ªçn ·∫£nh</option>\r\n        </select>\r\n        <input\r\n          type=",
  "chonDapAnDungChoCauHoiNay": "Ch·ªçn ƒë√°p √°n ƒë√∫ng cho c√¢u h·ªèi n√†y:",
  "chonDapAnDungChoCauHoiNaypDivClassname": ">Ch·ªçn ƒë√°p √°n ƒë√∫ng cho c√¢u h·ªèi n√†y:</p>\r\n            <div className=",
  "chonFile": "Ch·ªçn file",
  "chonFileCsv": "üìÑ Ch·ªçn file CSV:",
  "chonFileCsvLabelInputType": ">\r\n                    üìÑ Ch·ªçn file CSV:\r\n                  </label>\r\n                  <input\r\n                    type=",
  "chonFileDeTaiLen": "üì§ Ch·ªçn file ƒë·ªÉ t·∫£i l√™n:",
  "chonFileDeTaiLenLabelInputType": ">\r\n                üì§ Ch·ªçn file ƒë·ªÉ t·∫£i l√™n:\r\n              </label>\r\n              <input\r\n                type=",
  "chonFileExcel": "üìä Ch·ªçn file Excel:",
  "chonFileExcelLabelInputType": ">\r\n                    üìä Ch·ªçn file Excel:\r\n                  </label>\r\n                  <input\r\n                    type=",
  "chonFileSpanLabelInputId": "/>\r\n                  Ch·ªçn file\r\n                </span>\r\n              </label>\r\n              <input\r\n                id=",
  "chonVaiTroCuaBan": "Ch·ªçn vai tr√≤ c·ªßa b·∫°n",
  "chonVaiTroCuaBanh2PClassname": ">Ch·ªçn vai tr√≤ c·ªßa b·∫°n</h2>\r\n          <p className=",
  "chuDe": "üìö Ch·ªß ƒë·ªÅ",
  "chuDeLabelInputType": ">\r\n            üìö Ch·ªß ƒë·ªÅ\r\n          </label>\r\n          <input\r\n            type=",
  "chuaCoAnh": "Ch∆∞a c√≥ ·∫£nh",
  "chuaCoAnhspanDivLabelVaRadioDivClassname": ">Ch∆∞a c√≥ ·∫£nh</span>\r\n            </div>\r\n          )}\r\n          \r\n          {/* Label v√† Radio */}\r\n          <div className=",
  "chuaCoCauHoiNao": "Ch∆∞a c√≥ c√¢u h·ªèi n√†o.",
  "chuaCoCauHoiNaodivDndcontextSensorssensorsCollisio": ">Ch∆∞a c√≥ c√¢u h·ªèi n√†o.</div>}\r\n      <DndContext \r\n        sensors={sensors}\r\n        collisionDetection={closestCenter}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <SortableContext \r\n          items={quiz.questions.map((_, idx) => idx.toString())}\r\n          strategy={verticalListSortingStrategy}\r\n        >\r\n          <div className=",
  "chuaCoDanhGia": "Ch∆∞a c√≥ ƒë√°nh gi√°",
  "chuaCoDanhGiaNao": "Ch∆∞a c√≥ ƒë√°nh gi√° n√†o",
  "chuaCoDanhGiaNaoH3PClassname": ">\r\n                      Ch∆∞a c√≥ ƒë√°nh gi√° n√†o\r\n                    </h3>\r\n                    <p className=",
  "chuaCoDanhGiaNaoh3PClassname": ">Ch∆∞a c√≥ ƒë√°nh gi√° n√†o</h3>\r\n        <p className=",
  "chuaCoDuLieuDanhMuc": "Ch∆∞a c√≥ d·ªØ li·ªáu danh m·ª•c",
  "chuaCoDuLieuQuizPhoBien": "Ch∆∞a c√≥ d·ªØ li·ªáu quiz ph·ªï bi·∫øn",
  "chuaCoQuizNao": "Ch∆∞a c√≥ quiz n√†o",
  "chuaCoQuizNaoTrongHeThong": "Ch∆∞a c√≥ quiz n√†o trong h·ªá th·ªëng",
  "chuaCoQuizTrending": "Ch∆∞a c√≥ quiz trending",
  "chuaCoQuizTrendingh3PClassname": ">Ch∆∞a c√≥ quiz trending</h3>\r\n              <p className=",
  "chuaCoQuizYeuThich": "Ch∆∞a c√≥ quiz y√™u th√≠ch",
  "chuaCoTen": "Ch∆∞a c√≥ t√™n",
  "chuaDangNhap": "Ch∆∞a ƒëƒÉng nh·∫≠p",
  "chuaSua": "Ch∆∞a s·ª≠a",
  "chuaTraLoi": "Ch∆∞a tr·∫£ l·ªùi",
  "chuaXemResourcetitle": "Ch∆∞a xem: ${resource.title}",
  "chungToiDaGuiLinkDatLaiMatKhauDen": "Ch√∫ng t√¥i ƒë√£ g·ª≠i link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn",
  "chungToiDaGuiLinkDatLaiMatKhauDenbrStrongemailstro": ">\r\n              Ch√∫ng t√¥i ƒë√£ g·ª≠i link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn<br />\r\n              <strong>{email}</strong>\r\n            </p>\r\n            <p className=",
  "chungToiDaGuiMaXacThuc6SoDen": "Ch√∫ng t√¥i ƒë√£ g·ª≠i m√£ x√°c th·ª±c 6 s·ªë ƒë·∫øn",
  "chungToiDaGuiMaXacThuc6SoDenPPClassname": ">\r\n            Ch√∫ng t√¥i ƒë√£ g·ª≠i m√£ x√°c th·ª±c 6 s·ªë ƒë·∫øn\r\n          </p>\r\n          <p className=",
  "chungToiSeGuiLinkDatLaiMatKhauDenEmailNay": "Ch√∫ng t√¥i s·∫Ω g·ª≠i link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn email n√†y.",
  "chungToiSeGuiLinkDatLaiMatKhauDenEmailNayPDivButto": ">\r\n                Ch√∫ng t√¥i s·∫Ω g·ª≠i link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn email n√†y.\r\n              </p>\r\n            </div>\r\n\r\n            <button\r\n              type=",
  "chuoi5": "üî• Chu·ªói 5",
  "chuyenDenTabTablabel": "Chuy·ªÉn ƒë·∫øn tab ${tab.label}",
  "classnameflex1Px3Py2BorderBordergray200Hoverborder": "}\n              className=\"flex-1 px-3 py-2 border border-gray-200 hover:border-blue-300 text-gray-700 hover:text-blue-600 rounded-lg transition-all duration-300 hover:bg-blue-50 text-sm text-center flex items-center justify-center\"\n              title=\"Xem ƒë√°nh gi√°\"\n            >\n              <Eye className=\"w-4 h-4 mr-2\" />\n              ƒê√°nh gi√°\n            </Link>\n            \n            <button\n              onClick={handleToggleFavorite}\n              disabled={favLoading}\n              className={",
  "classnamep2BorderBordergray300Textgray700Roundedlg": "}\n              className=\"p-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors\"\n              title=\"Xem ƒë√°nh gi√°\"\n            >\n              <Eye className=\"w-5 h-5\" />\n            </Link>\n            <button\n              onClick={() => onStartQuiz?.(quiz)}\n              className=\"bg-gradient-to-r from-blue-500 to-purple-600 text-white py-2 px-6 rounded-lg font-medium hover:from-blue-600 hover:to-purple-700 transition-all duration-200\"\n            >\n              {quiz.isCompleted ? 'üîÑ Ch∆°i l·∫°i' : 'üöÄ B·∫Øt ƒë·∫ßu Quiz'}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Grid view (existing code)\n  return (\n    <div className=\"bg-white rounded-3xl shadow-xl hover:shadow-2xl transition-all duration-500 overflow-hidden border border-gray-100 hover:border-blue-300 group transform hover:scale-105 cursor-pointer flex flex-col h-full\">\n      {/* **TH√äM M·ªöI**: Image Header */}\n      <div className=\"relative h-48 bg-gradient-to-br from-blue-500 via-blue-600 to-indigo-700 overflow-hidden\">\n        {quiz.imageUrl ? (\n          <img \n            src={quiz.imageUrl} \n            alt={quiz.title}\n            className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-500\"\n          />\n        ) : (\n          <div className=\"w-full h-full flex items-center justify-center relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-blue-400/20 to-purple-600/20 backdrop-blur-3xl\"></div>\n            <div className=\"relative text-white text-6xl font-bold opacity-30 drop-shadow-lg\">\n              {quiz.category.charAt(0).toUpperCase()}\n            </div>\n            <div className=\"absolute bottom-4 left-4 text-white/90 font-semibold text-sm px-3 py-1 bg-white/20 backdrop-blur-sm rounded-full border border-white/30\">\n              {quiz.category}\n            </div>\n          </div>\n        )}\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/50 via-black/20 to-transparent z-10\" />\n        \n        {/* **TH√äM M·ªöI**: Overlay badges */}\n        <div className=\"absolute top-4 left-4 flex flex-wrap gap-2 z-20\">\n          <span className={",
  "claude3TuAnthropicTuDuyLogicTotAnToan": "Claude 3 t·ª´ Anthropic - T∆∞ duy logic t·ªët, an to√†n",
  "close": "ƒê√≥ng",
  "co": "C√≥",
  "coHieuLucTrong10Phut": "‚è±Ô∏è C√≥ hi·ªáu l·ª±c trong 10 ph√∫t",
  "coHieuLucTrong10PhutdivDivDivClass": ">‚è±Ô∏è C√≥ hi·ªáu l·ª±c trong 10 ph√∫t</div>\r\n          </div>\r\n          \r\n          <div class=",
  "coLoiKhiCapNhatTrangThai": "C√≥ l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i",
  "coLoiKhiGuiDanhGia": "C√≥ l·ªói khi g·ª≠i ƒë√°nh gi√°",
  "coLoiKhiTaiTrangDanhGia": "C√≥ l·ªói khi t·∫£i trang ƒë√°nh gi√°",
  "coLoiKhiXoaCreator": "C√≥ l·ªói khi x√≥a creator",
  "coLoiKiemTraTrangThai": "C√≥ l·ªói ki·ªÉm tra tr·∫°ng th√°i",
  "coLoiXayRa": "C√≥ l·ªói x·∫£y ra",
  "coLoiXayRaKhiDocFileVuiLongKiemTraDinhDangFile": "C√≥ l·ªói x·∫£y ra khi ƒë·ªçc file. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng file.",
  "coLoiXayRaKhiTaoCauHoi": "C√≥ l·ªói x·∫£y ra khi t·∫°o c√¢u h·ªèi",
  "coLoiXayRaKhiUpload": "C√≥ l·ªói x·∫£y ra khi upload",
  "coLoiXayRaKhiXacThuc": "C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c",
  "coLoiXayRaKhiXuLyFile": "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω file",
  "coLoiXayRaVuiLongThuLai": "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.",
  "coLoiXayRadivDivClassname": ">‚ùå C√≥ l·ªói x·∫£y ra</div>\r\n                <div className=",
  "coResourcecountTaiLieuHocTapSpanDivPClassname": ">\n                C√≥ {resourceCount} t√†i li·ªáu h·ªçc t·∫≠p\n              </span>\n            </div>\n            <p className=",
  "coTaiLieuBatBuoc": "C√≥ t√†i li·ªáu b·∫Øt bu·ªôc",
  "coTaiLieuBatBuocSpanDivDivActions6ChucNangViewEdit": ">\r\n                            ‚ö†Ô∏è C√≥ t√†i li·ªáu b·∫Øt bu·ªôc\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  {/* Actions - 6 ch·ª©c nƒÉng: View, Edit, Approve, Reject, Reopen, Delete */}\r\n                  <div className=",
  "coTaiLieuBatBuocSpanDivDivDivClassname": "/>\r\n                  C√≥ t√†i li·ªáu b·∫Øt bu·ªôc\r\n                </span>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=",
  "commentlength500KyTuPDivSubmitButtonDivClassname": ">\r\n                {comment.length}/500 k√Ω t·ª±\r\n              </p>\r\n            </div>\r\n\r\n            {/* Submit Button */}\r\n            <div className=",
  "complete": "Ho√†n th√†nh",
  "componentNaySeTuDongKiemTraTrangThaiIsactiveCuaUse": ";\r\n\r\n/**\r\n * Component n√†y s·∫Ω t·ª± ƒë·ªông ki·ªÉm tra tr·∫°ng th√°i isActive c·ªßa user m·ªói 5s.\r\n * N·∫øu user b·ªã kho√°, s·∫Ω t·ª± ƒë·ªông logout v√† hi·ªÉn th·ªã th√¥ng b√°o.\r\n */\r\nconst AutoLogoutOnBan = () => {\r\n  const user = useSelector((state: RootState) => state.auth.user);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!user?.uid) return;\r\n    let interval: NodeJS.Timeout;\r\n    let isUnmounted = false;\r\n\r\n    const checkActive = async () => {\r\n      try {\r\n        const userDoc = await getDoc(doc(db,",
  "conCauHoiChuaTraLoi": "C√≤n c√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi",
  "conCauHoiChuaTraLoiH3PClassname": ">\r\n              C√≤n c√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi\r\n            </h3>\r\n            <p className=",
  "conItThoiGian": "C√≤n √≠t th·ªùi gian",
  "congKhai": "üåç C√¥ng khai",
  "congKhaiSpanDivThemMoiFavoriteButtonInOverlayDivCl": ">\n              üì¢ C√¥ng khai\n            </span>\n          )}\n        </div>\n\n        {/* **TH√äM M·ªöI**: Favorite button in overlay */}\n        <div className=",
  "congNghe": "C√¥ng ngh·ªá",
  "constAdminReactfcConstTUsetranslationStateChoThong": ";\r\n\r\nconst Admin: React.FC = () => {\r\n  const { t } = useTranslation();\r\n  // State cho th·ªëng k√™\r\n  const [stats, setStats] = useState({\r\n    totalQuizzes: 0,\r\n    totalUsers: 0,\r\n    completedQuizzes: 0,\r\n    totalCreators: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchStats = async () => {\r\n      try {\r\n        // ƒê·ªìng b·ªô logic v·ªõi /home: d√πng d·ªØ li·ªáu th·ª±c, ƒë·∫øm to√†n b·ªô quiz v√† ng∆∞·ªùi d√πng ƒëang ho·∫°t ƒë·ªông\r\n        const [quizzesSnap, usersSnap] = await Promise.all([\r\n          getDocs(collection(db,",
  "constAuthproviderReactfcChildrenReactreactnodeChil": ";\r\n\r\nconst AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    // Set timeout ƒë·ªÉ tr√°nh loading v√¥ h·∫°n\r\n    const timeout = setTimeout(() => {\r\n      if (mounted) {\r\n        dispatch(authCheckComplete());\r\n      }\r\n    }, 5000); // TƒÉng l√™n 5 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªß th·ªùi gian\r\n\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      if (!mounted) return;\r\n      clearTimeout(timeout); // Clear timeout n·∫øu auth check th√†nh c√¥ng\r\n      \r\n      console.log(",
  "constBackupAnyForConstCollectionnameOfCollectionsC": "];\r\n      const backup: any = {};\r\n      \r\n      for (const collectionName of collections) {\r\n        const snapshot = await getDocs(collection(db, collectionName));\r\n        backup[collectionName] = snapshot.docs.map(doc => ({\r\n          id: doc.id,\r\n          ...doc.data()\r\n        }));\r\n      }\r\n\r\n      // T·∫°o file backup\r\n      const dataStr = JSON.stringify(backup, null, 2);\r\n      const dataBlob = new Blob([dataStr], { type:",
  "constCategoriesArrayfromnewSetquizzesmapqQcategory": ");\r\n  };\r\n  \r\n  const categories = Array.from(new Set(quizzes.map(q => q.category)));\r\n  const difficulties = Array.from(new Set(quizzes.map(q => q.difficulty)));\r\n  \r\n  // Ch·ªâ hi·ªÉn th·ªã quiz ƒë√£ ƒë∆∞·ª£c duy·ªát\r\n  let filtered = quizzes.filter(q => {\r\n    const hasResources = (q as any).resources && (q as any).resources.length > 0;\r\n    \r\n    return (\r\n      q.status === 'approved' &&\r\n      (category === 'all' || q.category === category) &&\r\n      (difficulty === 'all' || q.difficulty === difficulty) &&\r\n      (showCompleted || !q.isCompleted) &&\r\n      q.title.toLowerCase().includes(search.toLowerCase()) &&\r\n      // üÜï Resource filter\r\n      (resourceFilter === 'all' || \r\n       (resourceFilter === 'with-resources' && hasResources) ||\r\n       (resourceFilter === 'no-resources' && !hasResources))\r\n    );\r\n  });\r\n\r\n  // Sorting logic\r\n  filtered = filtered.sort((a, b) => {\r\n    switch (sortBy) {\r\n      case 'newest':\r\n        return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\r\n      case 'oldest':\r\n        return new Date(a.createdAt || 0).getTime() - new Date(b.createdAt || 0).getTime();\r\n      case 'popular':\r\n        return (b.totalPlayers || 0) - (a.totalPlayers || 0);\r\n      case 'difficulty':\r\n        const diffOrder = { 'easy': 1, 'medium': 2, 'hard': 3 };\r\n        return (diffOrder[a.difficulty as keyof typeof diffOrder] || 2) - (diffOrder[b.difficulty as keyof typeof diffOrder] || 2);\r\n      default:\r\n        return 0;\r\n    }\r\n  });\r\n\r\n  // Retry connection handler\r\n  const handleRetry = () => {\r\n    setRetryCount(0);\r\n    dispatch(fetchQuizzes({ user }) as any);\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 py-8\">\r\n        <div className=\"max-w-5xl mx-auto px-4\">\r\n          <div className=\"text-center\">\r\n            <div className=\"text-red-600 text-xl mb-4\">\r\n              {error}\r\n            </div>\r\n            <button\r\n              onClick={handleRetry}\r\n              className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors\"\r\n            >\r\n              Th·ª≠ l·∫°i\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gray-50 py-8\">\r\n        <div className=\"max-w-5xl mx-auto px-4\">\r\n          <div className=\"flex justify-center items-center space-x-2\">\r\n            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\r\n            <span className=\"text-gray-600\">ƒêang t·∫£i d·ªØ li·ªáu...</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 py-8\">\r\n      <div className=\"max-w-7xl mx-auto px-4\">\r\n        {/* Header Section */}\r\n        <div className=\"mb-8\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h1 className=\"text-4xl font-bold text-gray-900 mb-2\">{title || 'Kh√°m ph√° Quiz'}</h1>\r\n              <p className=\"text-gray-600 text-lg\">T√¨m hi·ªÉu ki·∫øn th·ª©c m·ªõi qua c√°c quiz th√∫ v·ªã</p>\r\n            </div>\r\n            <div className=\"flex items-center gap-4\">\r\n              <button\r\n                onClick={() => setShowStats(!showStats)}\r\n                className={",
  "constCreatequizpageReactfcConstTUsetranslationCons": ";\r\n\r\nconst CreateQuizPage: React.FC = () => {\r\n  const { t } = useTranslation();\r\n  const { user: currentUser } = useSelector((state: RootState) => state.auth);\r\n  const [quiz, setQuiz] = useState<QuizFormData>(defaultQuiz);\r\n  const [step, setStep] = useState(0);\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  // Ki·ªÉm tra quy·ªÅn truy c·∫≠p\r\n  if (!currentUser) {\r\n    return (\r\n      <div className=",
  "constDataAwaitResponsejsonConstGeneratedtextDataca": ");\r\n      }\r\n\r\n      const data = await response.json();\r\n      const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;\r\n\r\n      if (!generatedText) {\r\n        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI');\r\n      }\r\n\r\n      return this.parseQuestionsFromText(generatedText);\r\n    } catch (error) {\r\n      console.error('Direct API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * T·∫°o prompt m·∫∑c ƒë·ªãnh cho vi·ªác generate c√¢u h·ªèi\r\n   */\r\n  private static getDefaultPrompt(numQuestions: number, difficulty: string, language: string): string {\r\n    const lang = language === 'vi' ? 'ti·∫øng Vi·ªát' : 'English';\r\n    \r\n    return",
  "constDataAwaitResponsejsonConstGeneratedtextDatach": ");\r\n      }\r\n\r\n      const data = await response.json();\r\n      const generatedText = data.choices[0]?.message?.content;\r\n\r\n      return this.parseQuestionsFromText(generatedText);\r\n    } catch (error) {\r\n      console.error('OpenAI Service Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  public static getDefaultPrompt(numQuestions: number, difficulty: string, language: string): string {\r\n    const lang = language === 'vi' ? 'ti·∫øng Vi·ªát' : 'English';\r\n    \r\n    return",
  "constDataAwaitResponsejsonConstGeneratedtextDatare": ");\r\n      }\r\n\r\n      const data = await response.json();\r\n      const generatedText = data.response;\r\n\r\n      return OpenAIService.parseQuestionsFromText(generatedText);\r\n    } catch (error) {\r\n      console.error('Local AI Service Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static getDefaultPrompt(numQuestions: number, difficulty: string, language: string): string {\r\n    return OpenAIService.getDefaultPrompt(numQuestions, difficulty, language);\r\n  }\r\n}\r\n\r\n/**\r\n * Main AI Service - Router cho c√°c providers\r\n */\r\nexport class AIService {\r\n  static async generateQuestions(\r\n    config: AIConfig,\r\n    options: QuestionGenerationOptions\r\n  ): Promise<Question[]> {\r\n    try {\r\n      switch (config.provider) {\r\n        case 'openai':\r\n          return await OpenAIService.generateQuestions(config, options);\r\n        \r\n        case 'claude':\r\n          return await ClaudeService.generateQuestions(config, options);\r\n        \r\n        case 'gemini':\r\n          return await GeminiService.generateQuestions(config, options);\r\n        \r\n        case 'local':\r\n          return await LocalAIService.generateQuestions(config, options);\r\n        \r\n        default:\r\n          throw new Error(",
  "constDateNewDatedatevalueReturnIsnandategettimeNew": ") {\r\n      const date = new Date(dateValue);\r\n      return isNaN(date.getTime()) ? new Date() : date;\r\n    }\r\n    \r\n    // N·∫øu l√† object c√≥ seconds (Firestore server timestamp)\r\n    if (dateValue && typeof dateValue ===",
  "constHandlepreviewQuizQuizSetpreviewquizquizSetsho": ");\r\n  };\r\n\r\n  const handlePreview = (quiz: Quiz) => {\r\n    setPreviewQuiz(quiz);\r\n    setShowPreview(true);\r\n  };\r\n\r\n  const handleApprove = async (quizId: string) => {\r\n    try {\r\n      const quizRef = doc(db, 'quizzes', quizId);\r\n      await updateDoc(quizRef, {\r\n        status: 'approved',\r\n        isPublished: true,\r\n        approvedAt: new Date(),\r\n        approvedBy: user?.uid\r\n      });\r\n      \r\n      setQuizzes(prev => prev.map(quiz => \r\n        quiz.id === quizId \r\n          ? { ...quiz, status: 'approved' as const, isPublished: true }\r\n          : quiz\r\n      ));\r\n      \r\n      toast.success('ƒê√£ ph√™ duy·ªát quiz th√†nh c√¥ng!');\r\n    } catch (error) {\r\n      console.error('Error approving quiz:', error);\r\n      toast.error('Kh√¥ng th·ªÉ duy·ªát quiz');\r\n    }\r\n  };\r\n\r\n  const handleReject = async (quizId: string) => {\r\n    try {\r\n      const quizRef = doc(db, 'quizzes', quizId);\r\n      await updateDoc(quizRef, {\r\n        status: 'rejected',\r\n        isPublished: false,\r\n        rejectedAt: new Date(),\r\n        rejectedBy: user?.uid\r\n      });\r\n      \r\n      setQuizzes(prev => prev.map(quiz => \r\n        quiz.id === quizId \r\n          ? { ...quiz, status: 'rejected' as const, isPublished: false }\r\n          : quiz\r\n      ));\r\n      \r\n      toast.success('ƒê√£ t·ª´ ch·ªëi quiz!');\r\n    } catch (error) {\r\n      console.error('Error rejecting quiz:', error);\r\n      toast.error('Kh√¥ng th·ªÉ t·ª´ ch·ªëi quiz');\r\n    }\r\n  };\r\n\r\n  const handleApproveEditRequest = async (requestId: string, quizId: string) => {\r\n    try {\r\n      const editRequest = editRequests.find(req => req.id === requestId);\r\n      if (!editRequest) {\r\n        toast.error('Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ch·ªânh s·ª≠a');\r\n        return;\r\n      }\r\n\r\n      // Update edit request status\r\n      const requestRef = doc(db, 'editRequests', requestId);\r\n      await updateDoc(requestRef, {\r\n        status: 'approved',\r\n        reviewedBy: user?.uid,\r\n        reviewedByName: user?.displayName || 'Admin',\r\n        reviewedAt: new Date()\r\n      });\r\n\r\n      // G·ª† QUIZ XU·ªêNG ƒê·ªÇ S·ª¨A: Set quiz status to draft v√† allow edit\r\n      const quizRef = doc(db, 'quizzes', quizId);\r\n      await updateDoc(quizRef, {\r\n        status: 'draft', // G·ª° quiz xu·ªëng draft ƒë·ªÉ s·ª≠a\r\n        isApproved: false, // B·ªè approved status\r\n        canEdit: true, // Cho ph√©p creator edit\r\n        editRequestApproved: true,\r\n        lastEditRequestApproved: new Date(),\r\n        approvedBy: user?.uid,\r\n        needsReApproval: true // Flag ƒë·ªÉ bi·∫øt quiz n√†y c·∫ßn ƒë∆∞·ª£c duy·ªát l·∫°i sau khi s·ª≠a\r\n      });\r\n\r\n      // Create notification for the creator\r\n      await addDoc(collection(db, 'notifications'), {\r\n        userId: editRequest.requestedBy,\r\n        type: 'edit_request_approved',\r\n        title: 'Y√™u c·∫ßu ch·ªânh s·ª≠a ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát',\r\n        message:",
  "constHasvalidextensionAllowedextensionssomeextFile": "];\r\n    const hasValidExtension = allowedExtensions.some(ext => fileName.endsWith(ext));\r\n    \r\n    if (!hasValidExtension) {\r\n      toast.error(`File kh√¥ng h·ª£p l·ªá! Ch·ªâ ch·∫•p nh·∫≠n: ${allowedExtensions.join(",
  "constInitialstateAuthstateUserNullIsloadingTrueBat": ";\r\n\r\nconst initialState: AuthState = {\r\n  user: null,\r\n  isLoading: true, // B·∫Øt ƒë·∫ßu v·ªõi loading = true ƒë·ªÉ ch·ªù Firebase auth check\r\n  error: null,\r\n  isAuthenticated: false,\r\n  needsRoleSelection: false,\r\n  authChecked: false,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name:",
  "constIsaudiourlUrlStringBooleanReturnMp3wavoggm4aa": ");\r\n  };\r\n\r\n  const isAudioUrl = (url: string): boolean => {\r\n    return /\\.(mp3|wav|ogg|m4a|aac|flac)$/i.test(url);\r\n  };\r\n\r\n  const handleOpenResource = (resource: LearningResource) => {\r\n    handleViewResource(resource.id);\r\n\r\n    // Ki·ªÉm tra lo·∫°i file d·ª±a tr√™n URL v√† type\r\n    if (isYouTubeUrl(resource.url)) {\r\n      // YouTube video\r\n      setActiveVideo(resource);\r\n    } else if (resource.type ===",
  "constNormalizeduseranswerNormalizeansweruseranswer": ");\r\n  \r\n  const normalizedUserAnswer = normalizeAnswer(userAnswer);\r\n  \r\n  // Ki·ªÉm tra v·ªõi correctAnswer\r\n  if (question.correctAnswer && normalizeAnswer(question.correctAnswer) === normalizedUserAnswer) {\r\n    return true;\r\n  }\r\n  \r\n  // Ki·ªÉm tra v·ªõi acceptedAnswers\r\n  if (question.acceptedAnswers) {\r\n    return question.acceptedAnswers.some(accepted => \r\n      normalizeAnswer(accepted) === normalizedUserAnswer\r\n    );\r\n  }\r\n  \r\n  return false;\r\n};\r\n\r\n// Utility ƒë·ªÉ t·∫°o accepted answers t·ª± ƒë·ªông\r\nexport const generateAcceptedAnswers = (correctAnswer: string): string[] => {\r\n  if (!correctAnswer.trim()) return [];\r\n  \r\n  const answer = correctAnswer.trim();\r\n  const accepted = [\r\n    answer, // Nguy√™n vƒÉn\r\n    answer.toLowerCase(), // Ch·ªØ th∆∞·ªùng\r\n    answer.toUpperCase(), // Ch·ªØ hoa\r\n    answer.charAt(0).toUpperCase() + answer.slice(1).toLowerCase(), // Capitalize\r\n    // Lo·∫°i b·ªè d·∫•u (n·∫øu c√≥)\r\n    answer.normalize(",
  "constOtpexpiryminutes10ExportInterfaceOtpdataEmail": ";\r\nconst OTP_EXPIRY_MINUTES = 10;\r\n\r\nexport interface OTPData {\r\n  email: string;\r\n  hashedOTP: string;\r\n  expiresAt: number;\r\n  attempts: number;\r\n  maxAttempts: number;\r\n}\r\n\r\n/**\r\n * Generate random 6-digit OTP\r\n */\r\nexport const generateOTP = (): string => {\r\n  return Math.floor(100000 + Math.random() * 900000).toString();\r\n};\r\n\r\n/**\r\n * Hash OTP v·ªõi email ƒë·ªÉ b·∫£o m·∫≠t\r\n */\r\nconst hashOTP = (email: string, otp: string): string => {\r\n  return CryptoJS.SHA256(email + otp + OTP_SECRET).toString();\r\n};\r\n\r\n/**\r\n * Store OTP v√†o sessionStorage (kh√¥ng d√πng Firestore ƒë·ªÉ tr√°nh l·ªói permissions)\r\n */\r\nexport const storeOTP = (email: string, otp: string): void => {\r\n  const otpData: OTPData = {\r\n    email: email.toLowerCase().trim(),\r\n    hashedOTP: hashOTP(email, otp),\r\n    expiresAt: Date.now() + OTP_EXPIRY_MINUTES * 60 * 1000,\r\n    attempts: 0,\r\n    maxAttempts: 3\r\n  };\r\n\r\n  // L∆∞u v√†o sessionStorage (ch·ªâ t·ªìn t·∫°i trong tab hi·ªán t·∫°i)\r\n  sessionStorage.setItem(`otp_${email.toLowerCase()}`, JSON.stringify(otpData));\r\n  \r\n  console.log(",
  "constPromisesSelecteditemsmapidUpdatedocdocdbItemt": ";\r\n      const promises = selectedItems.map(id => \r\n        updateDoc(doc(db, itemType, id), { [field]: status })\r\n      );\r\n      await Promise.all(promises);\r\n      \r\n      toast.success(`ƒê√£ c·∫≠p nh·∫≠t ${selectedItems.length} ${itemType}!`);\r\n      onClearSelection();\r\n      onRefresh();\r\n    } catch (error) {\r\n      toast.error(",
  "constPromptDayLaFilePdfHayTrichXuatVaPhanTichNoiDu": "});\r\n\r\n      const prompt = `\r\nƒê√¢y l√† file PDF. H√£y tr√≠ch xu·∫•t v√† ph√¢n t√≠ch n·ªôi dung vƒÉn b·∫£n t·ª´ file n√†y.\r\nT√≥m t·∫Øt n·ªôi dung ch√≠nh v√† cung c·∫•p th√¥ng tin chi ti·∫øt ƒë·ªÉ c√≥ th·ªÉ t·∫°o c√¢u h·ªèi.\r\nN·∫øu c√≥ b·∫£ng, bi·ªÉu ƒë·ªì ho·∫∑c h√¨nh ·∫£nh, h√£y m√¥ t·∫£ ch√∫ng.\r\n`;\r\n\r\n      const result = await model.generateContent([\r\n        prompt,\r\n        {\r\n          inlineData: {\r\n            data: base64Data,\r\n            mimeType: file.type\r\n          }\r\n        }\r\n      ]);\r\n\r\n      const response = await result.response;\r\n      const content = response.text();\r\n\r\n      return {\r\n        content,\r\n        type:",
  "constPromptDayLaFileTaiLieuWordHayTrichXuatVaPhanT": "});\r\n\r\n      const prompt = `\r\nƒê√¢y l√† file t√†i li·ªáu Word. H√£y tr√≠ch xu·∫•t v√† ph√¢n t√≠ch n·ªôi dung vƒÉn b·∫£n t·ª´ file n√†y.\r\nT√≥m t·∫Øt n·ªôi dung ch√≠nh v√† cung c·∫•p th√¥ng tin chi ti·∫øt ƒë·ªÉ c√≥ th·ªÉ t·∫°o c√¢u h·ªèi.\r\nBao g·ªìm c·∫£ ƒë·ªãnh d·∫°ng, ti√™u ƒë·ªÅ, v√† c·∫•u tr√∫c c·ªßa t√†i li·ªáu.\r\n`;\r\n\r\n      const result = await model.generateContent([\r\n        prompt,\r\n        {\r\n          inlineData: {\r\n            data: base64Data,\r\n            mimeType: file.type ||",
  "constRequiredresourcesResourcesfilterrRrequiredCon": "]\r\n          : []\r\n      };\r\n    }\r\n\r\n    const requiredResources = resources.filter(r => r.required);\r\n    const missingResources: LearningResource[] = [];\r\n    const warnings: string[] = [];\r\n\r\n    for (const resource of requiredResources) {\r\n      const progress = session.viewedResources[resource.id];\r\n      \r\n      if (!progress) {\r\n        missingResources.push(resource);\r\n        warnings.push(`Ch∆∞a xem: ${resource.title}`);\r\n        continue;\r\n      }\r\n\r\n      const validation = validateResourceCompletion(resource, progress);\r\n      if (!validation.completed) {\r\n        missingResources.push(resource);\r\n        warnings.push(`${resource.title}: ${validation.reason}`);\r\n      }\r\n    }\r\n\r\n    const completedCount = requiredResources.length - missingResources.length;\r\n    const ready = missingResources.length === 0;\r\n\r\n    // Update session ready status\r\n    if (ready && !session.ready) {\r\n      const sessionRef = doc(db,",
  "constSessionrefDocdbUserquizsessionsSessionidConst": ";\r\n    const sessionRef = doc(db, 'userQuizSessions', sessionId);\r\n    const sessionDoc = await getDoc(sessionRef);\r\n\r\n    if (!sessionDoc.exists()) {\r\n      return null;\r\n    }\r\n\r\n    const data = sessionDoc.data();\r\n    return {\r\n      id: sessionDoc.id,\r\n      userId,\r\n      quizId,\r\n      viewedResources: data.viewedResources || {},\r\n      ready: data.ready || false,\r\n      readyAt: data.readyAt?.toDate(),\r\n      totalResourcesRequired: data.totalResourcesRequired || 0,\r\n      completedResourcesRequired: data.completedResourcesRequired || 0,\r\n      completionPercent: data.completionPercent || 0,\r\n      startedAt: data.startedAt?.toDate() || new Date(),\r\n      lastActivityAt: data.lastActivityAt?.toDate() || new Date(),\r\n      updatedAt: data.updatedAt?.toDate() || new Date()\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting learning session:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * T·∫°o ho·∫∑c c·∫≠p nh·∫≠t learning session\r\n */\r\nexport const initializeLearningSession = async (\r\n  userId: string,\r\n  quizId: string,\r\n  resources: LearningResource[]\r\n): Promise<LearningSession> => {\r\n  const sessionId =",
  "constShowaddcategorySetshowaddcategoryUsestatefals": "});\r\n  const [showAddCategory, setShowAddCategory] = useState(false);\r\n\r\n  // State cho modal x√°c nh·∫≠n\r\n  const [confirmModal, setConfirmModal] = useState<{\r\n    open: boolean;\r\n    type: null |",
  "constShowbannerSetshowbannerUsestatefalseConstBann": "});\r\n  const [showBanner, setShowBanner] = useState(false);\r\n  const [bannerData, setBannerData] = useState<{message:string,type:string}|null>(null);\r\n\r\n  const { t } = useTranslation();\r\n\r\n  // 1. T·∫°o th√¥ng b√°o h·ªá th·ªëng\r\n  const createSystemNotification = async () => {\r\n    if (!notificationData.message.trim()) {\r\n      toast.error(t(",
  "constStoragerefRefstorageFilepathMetadataChoImageC": ";\r\n    const storageRef = ref(storage, filePath);\r\n\r\n    // Metadata cho image\r\n    const metadata: UploadMetadata = {\r\n      contentType: file.type,\r\n      customMetadata: {\r\n        uploadedBy: currentUser.uid,\r\n        uploadedAt: new Date().toISOString(),\r\n        originalName: file.name,\r\n        folder: folder\r\n      },\r\n      cacheControl: 'public, max-age=31536000' // Cache 1 nƒÉm\r\n    };\r\n\r\n    // Upload with progress tracking\r\n    const uploadTask = uploadBytesResumable(storageRef, file, metadata);\r\n\r\n    return new Promise((resolve, _reject) => {\r\n      uploadTask.on(\r\n        'state_changed',\r\n        (snapshot) => {\r\n          // Progress callback\r\n          if (onProgress) {\r\n            const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            onProgress({\r\n              progress: Math.round(progress),\r\n              bytesTransferred: snapshot.bytesTransferred,\r\n              totalBytes: snapshot.totalBytes,\r\n              state: snapshot.state as 'running' | 'paused'\r\n            });\r\n          }\r\n        },\r\n        (error) => {\r\n          // Error handling\r\n          console.error('Upload error:', error);\r\n          resolve({\r\n            success: false,\r\n            error: 'L·ªói khi upload ·∫£nh: ' + error.message\r\n          });\r\n        },\r\n        async () => {\r\n          // Upload completed\r\n          try {\r\n            const originalUrl = await getDownloadURL(uploadTask.snapshot.ref);\r\n            \r\n            let thumbnailUrls = {};\r\n            \r\n            // ƒê·ª£i Extension t·∫°o thumbnails (n·∫øu enabled)\r\n            if (generateThumbnails) {\r\n              thumbnailUrls = await getThumbnailUrls(fileName);\r\n            }\r\n\r\n            resolve({\r\n              success: true,\r\n              originalUrl,\r\n              thumbnailUrls,\r\n              fileName,\r\n              filePath\r\n            });\r\n\r\n            if (onProgress) {\r\n              onProgress({\r\n                progress: 100,\r\n                bytesTransferred: uploadTask.snapshot.totalBytes,\r\n                totalBytes: uploadTask.snapshot.totalBytes,\r\n                state: 'success'\r\n              });\r\n            }\r\n          } catch (error: any) {\r\n            resolve({\r\n              success: false,\r\n              error: 'Kh√¥ng th·ªÉ l·∫•y URL download: ' + error.message\r\n            });\r\n          }\r\n        }\r\n      );\r\n    });\r\n  } catch (error: any) {\r\n    console.error('Upload image error:', error);\r\n    return {\r\n      success: false,\r\n      error: 'C√≥ l·ªói x·∫£y ra: ' + error.message\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * üöÄ INSTANT UPLOAD - Upload ngay l·∫≠p t·ª©c (1-3s) kh√¥ng ƒë·ª£i compression\r\n * \r\n * Strategy:\r\n * 1. Upload file g·ªëc ngay l·∫≠p t·ª©c ‚Üí User th·∫•y k·∫øt qu·∫£ trong 1-3s\r\n * 2. Compress trong background ‚Üí Kh√¥ng block UI\r\n * 3. Thay th·∫ø b·∫±ng file compressed ‚Üí Ti·∫øt ki·ªám bandwidth sau\r\n * \r\n * Trade-off:\r\n * + Upload c·ª±c nhanh (1-3s)\r\n * + UX m∆∞·ª£t m√†\r\n * - Storage t·∫°m th·ªùi l·ªõn h∆°n (s·∫Ω ƒë∆∞·ª£c thay th·∫ø sau)\r\n */\r\nexport const instantUploadImage = async (\r\n  file: File,\r\n  options: ImageUploadOptions = {},\r\n  onProgress?: (progress: UploadProgress) => void\r\n): Promise<ImageUploadResult> => {\r\n  const auth = getAuth();\r\n  const currentUser = auth.currentUser;\r\n\r\n  if (!currentUser) {\r\n    return {\r\n      success: false,\r\n      error: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ upload ·∫£nh'\r\n    };\r\n  }\r\n\r\n  try {\r\n    const {\r\n      folder = 'temp',\r\n      maxSizeKB = 5120,\r\n      allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'],\r\n      generateThumbnails = true\r\n    } = options;\r\n\r\n    // Validate\r\n    const validation = validateImage(file, maxSizeKB, allowedTypes);\r\n    if (!validation.valid) {\r\n      return {\r\n        success: false,\r\n        error: validation.error\r\n      };\r\n    }\r\n\r\n    const fileName = generateFileName(file.name, currentUser.uid);\r\n    const filePath =",
  "constStoragerefRefstorageFilepathMetadataConstMeta": ";\r\n    const storageRef = ref(storage, filePath);\r\n\r\n    // Metadata\r\n    const metadata: UploadMetadata = {\r\n      contentType: file.type,\r\n      customMetadata: {\r\n        uploadedBy: currentUser.uid,\r\n        uploadedAt: new Date().toISOString(),\r\n        originalName: file.name,\r\n        instant: 'true' // ƒê√°nh d·∫•u ƒë√¢y l√† instant upload\r\n      }\r\n    };\r\n\r\n    console.log('‚ö° INSTANT UPLOAD START:', {\r\n      file: file.name,\r\n      size:",
  "constStoreddataSessionstoragegetitemstoragekeyIfSt": ";\r\n  const storedData = sessionStorage.getItem(storageKey);\r\n\r\n  if (!storedData) {\r\n    return { success: false, message: 'Kh√¥ng t√¨m th·∫•y OTP. Vui l√≤ng y√™u c·∫ßu g·ª≠i l·∫°i.' };\r\n  }\r\n\r\n  try {\r\n    const otpData: OTPData = JSON.parse(storedData);\r\n\r\n    // Check expiry\r\n    if (Date.now() > otpData.expiresAt) {\r\n      sessionStorage.removeItem(storageKey);\r\n      return { success: false, message: 'OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu g·ª≠i l·∫°i.' };\r\n    }\r\n\r\n    // Check max attempts\r\n    if (otpData.attempts >= otpData.maxAttempts) {\r\n      sessionStorage.removeItem(storageKey);\r\n      return { success: false, message: 'ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠. Vui l√≤ng y√™u c·∫ßu OTP m·ªõi.' };\r\n    }\r\n\r\n    // Verify OTP\r\n    const inputHash = hashOTP(email, inputOTP);\r\n    if (inputHash === otpData.hashedOTP) {\r\n      // Success - x√≥a OTP\r\n      sessionStorage.removeItem(storageKey);\r\n      return { success: true, message: 'X√°c th·ª±c th√†nh c√¥ng!' };\r\n    } else {\r\n      // Failed - tƒÉng attempts\r\n      otpData.attempts += 1;\r\n      sessionStorage.setItem(storageKey, JSON.stringify(otpData));\r\n      \r\n      const remaining = otpData.maxAttempts - otpData.attempts;\r\n      return { \r\n        success: false, \r\n        message:",
  "constSystempromptCustompromptThisgeneratesystempro": ");\r\n    }\r\n\r\n    const systemPrompt = customPrompt || this.generateSystemPrompt(config);\r\n    const userPrompt = `N·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}`;\r\n\r\n    const response = await fetch(",
  "constSystempromptCustompromptThisgetdefaultpromptn": ";\r\n      \r\n      const systemPrompt = customPrompt || this.getDefaultPrompt(numQuestions, difficulty, language);\r\n      \r\n      // Get auth token from Firebase\r\n      const auth = getAuth();\r\n      const idToken = await auth.currentUser?.getIdToken();\r\n      \r\n      if (!idToken) {\r\n        throw new Error('Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng');\r\n      }\r\n\r\n      const response = await fetch(apiEndpoint, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization':",
  "constTotalpagesPdfnumpagesTrichXuatTextTuTatCaCacT": ";\r\n      const totalPages = pdf.numPages;\r\n      \r\n      // Tr√≠ch xu·∫•t text t·ª´ t·∫•t c·∫£ c√°c trang\r\n      for (let i = 1; i <= totalPages; i++) {\r\n        const page = await pdf.getPage(i);\r\n        const textContent = await page.getTextContent();\r\n        \r\n        const pageText = textContent.items\r\n          .map((item: any) => item.str)\r\n          .join(",
  "constTotalquizzesQuizzessnapsizeChiDemNguoiDungHoa": "const totalQuizzes = quizzesSnap.size;\r\n\r\n        // Ch·ªâ ƒë·∫øm ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông (isActive !== false v√† isDeleted !== true)\r\n        const users = usersSnap.docs.map(doc => doc.data() as any);\r\n        const activeUsers = users.filter(u => u?.isActive !== false && u?.isDeleted !== true);\r\n        const totalUsers = activeUsers.length;\r\n\r\n        // Ng∆∞·ªùi t·∫°o: role",
  "constUrlAwaitGetthumbnailwithretrythumbnailpathMax": ";\r\n    const url = await getThumbnailWithRetry(thumbnailPath, maxRetries, size);\r\n    return { key, url };\r\n  });\r\n\r\n  const results = await Promise.all(thumbnailPromises);\r\n  \r\n  // Map results to object\r\n  results.forEach(({ key, url }) => {\r\n    if (url) {\r\n      thumbnailUrls[key] = url;\r\n    }\r\n  });\r\n\r\n  return thumbnailUrls;\r\n};\r\n\r\n/**\r\n * Upload image to Firebase Storage v·ªõi Progress Callback\r\n */\r\nexport const uploadImage = async (\r\n  file: File,\r\n  options: ImageUploadOptions = {},\r\n  onProgress?: (progress: UploadProgress) => void\r\n): Promise<ImageUploadResult> => {\r\n  const auth = getAuth();\r\n  const currentUser = auth.currentUser;\r\n\r\n  if (!currentUser) {\r\n    return {\r\n      success: false,\r\n      error: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ upload ·∫£nh'\r\n    };\r\n  }\r\n\r\n  const {\r\n    folder = 'temp',\r\n    maxSizeKB = 5120,\r\n    allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'],\r\n    generateThumbnails = true\r\n  } = options;\r\n\r\n  // Validate image\r\n  const validation = validateImage(file, maxSizeKB, allowedTypes);\r\n  if (!validation.valid) {\r\n    return {\r\n      success: false,\r\n      error: validation.error\r\n    };\r\n  }\r\n\r\n  try {\r\n    // Generate unique filename\r\n    const fileName = generateFileName(file.name, currentUser.uid);\r\n    const filePath =",
  "contentNoiDungDeTaoCauHoinncontentIfResponseokCons": ", content: `N·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}` }\r\n        ]\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      throw new Error(`Claude API error: ${error}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    const questionsJson = JSON.parse(data.content[0].text);\r\n    \r\n    return {\r\n      questions: this.formatQuestions(questionsJson.questions),\r\n      usage: data.usage\r\n    };\r\n  }\r\n\r\n  private async generateWithOllama(content: string, config: AIConfig, customPrompt?: string): Promise<GenerateQuestionsResponse> {\r\n    const prompt = `${customPrompt || this.generateSystemPrompt(config)}\\n\\nN·ªôi dung: ${content}`;\r\n\r\n    try {\r\n      const response = await fetch(",
  "contentNoiDungDeTaoCauHoinncontentIfResponseokThro": ", content: `N·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}` }\r\n          ]\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Claude API Error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const generatedText = data.content[0]?.text;\r\n\r\n      return OpenAIService.parseQuestionsFromText(generatedText);\r\n    } catch (error) {\r\n      console.error(",
  "contentNoiDungDeTaoCauHoinncontentTemperature07Max": ", content: `N·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}` }\r\n          ],\r\n          temperature: 0.7,\r\n          max_tokens: 2000\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`OpenAI API Error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const generatedText = data.choices[0]?.message?.content;\r\n\r\n      return this.parseQuestionsFromText(generatedText);\r\n    } catch (error) {\r\n      console.error(",
  "contenttypeApplicationjsonIfResponseokToastsuccess": ",\r\n                        'Content-Type': 'application/json'\r\n                      }\r\n                    });\r\n                    if (response.ok) {\r\n                      toast.success('‚úÖ API key ho·∫°t ƒë·ªông!');\r\n                      console.log('‚úÖ API key is valid');\r\n                    } else {\r\n                      const errorData = await response.json();\r\n                      toast.error(",
  "continue": "Ti·∫øp t·ª•c",
  "convertFileToBase64ConstBase64dataAwaitThisfiletob": "});\r\n      \r\n      // Convert file to base64\r\n      const base64Data = await this.fileToBase64(file);\r\n      \r\n      const prompt = `\r\nPh√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† tr√≠ch xu·∫•t n·ªôi dung vƒÉn b·∫£n. \r\nN·∫øu c√≥ bi·ªÉu ƒë·ªì, b·∫£ng, ho·∫∑c th√¥ng tin tr·ª±c quan, h√£y m√¥ t·∫£ chi ti·∫øt.\r\nTr·∫£ v·ªÅ n·ªôi dung m·ªôt c√°ch c√≥ c·∫•u tr√∫c v√† r√µ r√†ng ƒë·ªÉ c√≥ th·ªÉ t·∫°o c√¢u h·ªèi.\r\n`;\r\n\r\n      const result = await model.generateContent([\r\n        prompt,\r\n        {\r\n          inlineData: {\r\n            data: base64Data,\r\n            mimeType: file.type\r\n          }\r\n        }\r\n      ]);\r\n\r\n      const response = await result.response;\r\n      const content = response.text();\r\n\r\n      return {\r\n        content,\r\n        type:",
  "correctSelectionSpanDivDivDivHienThiDapAnChoShortA": ">\r\n                                ‚úì Correct Selection\r\n                              </span>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                )}\r\n\r\n                {/* Hi·ªÉn th·ªã ƒë√°p √°n cho short answer */}\r\n                {question.type ===",
  "correctanswerStringChoDangDienTuAcceptedanswersStr": ";\r\n  correctAnswer?: string; // Cho d·∫°ng ƒëi·ªÅn t·ª´\r\n  acceptedAnswers?: string[]; // Cho d·∫°ng ƒëi·ªÅn t·ª´ - c√°c t·ª´ ƒë∆∞·ª£c ch·∫•p nh·∫≠n\r\n  imageUrl?: string; // Question image\r\n  audioUrl?: string; // Question audio\r\n  videoUrl?: string; // Question video\r\n  attachments?: Array<{ // Multiple attachments\r\n    type:",
  "correctanswerscountDungPlayerscoreDiemCurrentanswe": ">\n                              {correctAnswersCount} ƒë√∫ng ‚Ä¢ {player.score} ƒëi·ªÉm\n                              {currentAnswer && (\n                                <span className={`ml-2 ${currentAnswer.isCorrect ?",
  "cot1CauHoi": "‚Ä¢ C·ªôt 1: C√¢u h·ªèi",
  "cot25DapAnABCD": "‚Ä¢ C·ªôt 2-5: ƒê√°p √°n A, B, C, D",
  "cot6DapAnDungAbcd": "‚Ä¢ C·ªôt 6: ƒê√°p √°n ƒë√∫ng (A/B/C/D)",
  "cot7GiaiThichTuyChon": "‚Ä¢ C·ªôt 7: Gi·∫£i th√≠ch (t√πy ch·ªçn)",
  "cot8DiemMacDinh10": "‚Ä¢ C·ªôt 8: ƒêi·ªÉm (m·∫∑c ƒë·ªãnh 10)",
  "create": "T·∫°o m·ªõi",
  "createQuiz": {
    "back": "Quay l·∫°i",
    "completeAllInfo": "Please complete all quiz information",
    "completeInfoFirst": "Please complete information before continuing",
    "continue": "Ti·∫øp t·ª•c",
    "createError": "Error occurred while creating quiz",
    "createSuccess": "Quiz created successfully! Quiz is awaiting admin approval.",
    "info": {
      "basicInfo": "Basic Information",
      "categoryLabel": "Category *",
      "categoryPlaceholder": "Select category",
      "descriptionLabel": "Quiz description * (Rich Text format supported)",
      "descriptionPlaceholder": "Detailed description of your quiz... You can add text formatting, images, videos and more!",
      "difficultyLabel": "Difficulty *",
      "difficultyPlaceholder": "Select difficulty level",
      "durationLabel": "Duration (minutes) *",
      "fillInfo": "Fill in information to create your quiz",
      "imageLabel": "Image (optional)",
      "imagePlaceholder": "Image URL representing the quiz...",
      "noCategory": "Not selected",
      "noDescription": "No description yet",
      "noDifficulty": "Not selected",
      "noTitle": "No title yet",
      "preview": "Preview quiz information",
      "previewCategory": "Category: {{category}}",
      "previewDescription": "Description: {{description}}",
      "previewDifficulty": "Difficulty: {{difficulty}}",
      "previewDuration": "Duration: {{duration}} minutes",
      "previewImage": "Image:",
      "previewTitle": "Title: {{title}}",
      "titleLabel": "Quiz title *",
      "titlePlaceholder": "Enter an attractive title for your quiz..."
    },
    "loginRequired": "You need to login to create quizzes",
    "publish": "Publish Quiz",
    "steps": {
      "info": "Quiz Information",
      "questions": "C√¢u h·ªèi",
      "review": "Review & Publish"
    },
    "title": "Create New Quiz"
  },
  "createdAt": "T·∫°o l√∫c",
  "createdatAnyCategoryStringLearningresourcesAnyTaiL": ";\r\n  createdAt: any;\r\n  category: string;\r\n  learningResources?: any[]; // T√†i li·ªáu h·ªçc t·∫≠p\r\n}\r\n\r\ninterface Category {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  quizCount: number;\r\n}\r\n\r\nconst AdminDashboard: React.FC = () => {\r\n  const { t } = useTranslation();\r\n  // const navigate = useNavigate();\r\n  // const { user } = useSelector((state: RootState) => state.auth);\r\n  // const dispatch = useDispatch();\r\n  \r\n  // States\r\n  const [activeTab, setActiveTab] = useState(",
  "createdatNewDateConsolelogEmailQueuedSuccessfullyV": "},\r\n      createdAt: new Date()\r\n    });\r\n\r\n    console.log('‚úÖ Email queued successfully via Firestore extension');\r\n\r\n    return {\r\n      success: true,\r\n      message: 'Email OTP ƒëang ƒë∆∞·ª£c g·ª≠i ƒëi...'\r\n    };\r\n  } catch (error: any) {\r\n    console.error('Error queuing email:', error);\r\n    return {\r\n      success: false,\r\n      message: error.message || 'Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i.'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Generate v√† g·ª≠i OTP\r\n */\r\nexport const generateAndSendOTP = async (email: string): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    // Generate OTP\r\n    const otp = generateOTP();\r\n    \r\n    // Store OTP locally (hashed)\r\n    storeOTP(email, otp);\r\n    \r\n    // Send OTP via Cloud Function\r\n    const result = await sendOTPEmail(email, otp);\r\n    \r\n    if (result.success) {\r\n      return {\r\n        success: true,\r\n        message:",
  "createdatNewDateIsactiveTrueEmailverifiedTrueOtpDa": ",\r\n        createdAt: new Date(),\r\n        isActive: true,\r\n        emailVerified: true, // OTP ƒë√£ verify r·ªìi\r\n        needsRoleSelection: true,\r\n        ...additionalData\r\n      });\r\n    }\r\n  };\r\n\r\n  // Complete registration sau khi OTP verify th√†nh c√¥ng\r\n  const completeRegistrationAfterOTP = async () => {\r\n    if (!pendingUserData) {\r\n      toast.error(",
  "createdatServertimestampSuDungServertimestampThayV": ",\r\n                  createdAt: serverTimestamp(), // S·ª≠ d·ª•ng serverTimestamp thay v√¨ Date\r\n                  isActive: true\r\n                });\r\n                role =",
  "createerrorElseUserMoiChuaCoDocumentTrongFirestore": ", createError);\r\n            }\r\n          } else {\r\n            // User m·ªõi ch∆∞a c√≥ document trong Firestore - c√≥ th·ªÉ l√† user v·ª´a ƒëƒÉng k√Ω\r\n            console.log(",
  "createerrorElseUserThuongKhongCoDocumentCoTheChuaH": ", createError);\r\n              }\r\n            } else {\r\n              // User th∆∞·ªùng kh√¥ng c√≥ document - c√≥ th·ªÉ ch∆∞a ho√†n th√†nh ƒëƒÉng k√Ω\r\n              console.log(",
  "creator": {
    "createNewQuiz": "Create New Quiz",
    "loginMessage": "You need to login to access the Creator page",
    "roleRequired": "You need Creator or Admin role to access this page"
  },
  "creatorCungVaoDashboardChinhCaseUserDefaultReturn": "; // Creator c≈©ng v√†o dashboard ch√≠nh\r\n    case 'user':\r\n    default:\r\n      return",
  "creatorNguoiTao": "Creator (Ng∆∞·ªùi t·∫°o)",
  "creatorNguoiTaoh3PClassname": ">Creator (Ng∆∞·ªùi t·∫°o)</h3>\r\n                <p className=",
  "creatorToastsuccessdaCapNhatTrangThaiThanhCongCatc": "}\r\n          : creator\r\n      ));\r\n\r\n      toast.success(`ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng`);\r\n    } catch (error) {\r\n      console.error(",
  "cuNhat": "üìÖ C≈© nh·∫•t",
  "cuNhatoptionOptionValue": ">üìÖ C≈© nh·∫•t</option>\r\n                <option value=",
  "cuaBanDaBiAdminTuChoiVuiLongLienHeAdminDeBietThemC": "c·ªßa b·∫°n ƒë√£ b·ªã admin t·ª´ ch·ªëi. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.`,\r\n        quizId: editRequest.quizId,\r\n        createdAt: serverTimestamp(),\r\n        read: false\r\n      });\r\n\r\n      // Remove from edit requests list\r\n      setEditRequests(prev => prev.filter(req => req.id !== requestId));\r\n      \r\n      toast.success(`ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu ch·ªânh s·ª≠a c·ªßa ${editRequest.requestedByName || editRequest.requestedByEmail}!`);\r\n    } catch (error) {\r\n      console.error(",
  "cuaBanDaDuocAdminPheDuyetQuizDaDuocGoXuongDeBanChi": "c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c admin ph√™ duy·ªát. Quiz ƒë√£ ƒë∆∞·ª£c g·ª° xu·ªëng ƒë·ªÉ b·∫°n ch·ªânh s·ª≠a. Sau khi s·ª≠a xong, vui l√≤ng n·ªôp l·∫°i ƒë·ªÉ admin duy·ªát.`,\r\n        quizId: quizId,\r\n        createdAt: serverTimestamp(),\r\n        read: false\r\n      });\r\n\r\n      // Remove from edit requests list\r\n      setEditRequests(prev => prev.filter(req => req.id !== requestId));\r\n      \r\n      toast.success(`ƒê√£ ph√™ duy·ªát y√™u c·∫ßu ch·ªânh s·ª≠a c·ªßa ${editRequest.requestedByName || editRequest.requestedByEmail}!`);\r\n    } catch (error) {\r\n      console.error(",
  "custompromptThisgeneratesystempromptconfignnnoiDun": "${customPrompt || this.generateSystemPrompt(config)}\\n\\nN·ªôi dung: ${content}",
  "daBoYeuThichQuiz": "ƒê√£ b·ªè y√™u th√≠ch quiz!",
  "daCapNhatSelecteditemslengthItemtype": "ƒê√£ c·∫≠p nh·∫≠t ${selectedItems.length} ${itemType}!",
  "daCapNhatTaiLieu": "ƒê√£ c·∫≠p nh·∫≠t t√†i li·ªáu",
  "daChonSelecteditemslengthItemtypeSpanDivClassname": ">\r\n          ƒê√£ ch·ªçn {selectedItems.length} {itemType}\r\n        </span>\r\n        \r\n        <div className=",
  "daCoLoiXayRaKhiTaiDanhSachQuizVuiLongThuLai": "ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch quiz. Vui l√≤ng th·ª≠ l·∫°i.",
  "daDang": "ƒêa d·∫°ng",
  "daDangKy": "üë• ƒê√£ ƒëƒÉng k√Ω",
  "daDangKypDivDivClassname": ">üë• ƒê√£ ƒëƒÉng k√Ω</p>\r\n            </div>\r\n            <div className=",
  "daDangTuDeDenKho": "ƒëa d·∫°ng t·ª´ d·ªÖ ƒë·∫øn kh√≥",
  "daDangoptionSelectDivDivLabelClassname": ">ƒêa d·∫°ng</option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=",
  "daDuocCreatorSuaXongVaNopLaiDeAdminDuyetQuizidIdCr": "ƒë√£ ƒë∆∞·ª£c creator s·ª≠a xong v√† n·ªôp l·∫°i ƒë·ªÉ admin duy·ªát.`,\r\n          quizId: id,\r\n          createdBy: user?.uid,\r\n          createdByName: user?.displayName || user?.email,\r\n          createdAt: serverTimestamp(),\r\n          read: false\r\n        });\r\n        \r\n        toast.success(",
  "daDuyet": "‚úÖ ƒê√£ duy·ªát",
  "daDuyetoptionOptionValue": ">‚úÖ ƒê√£ duy·ªát</option>\r\n                        <option value=",
  "daDuyetspanCase": ">‚úÖ ƒê√£ duy·ªát</span>;\r\n      case",
  "daExportUpdatequizONoiKhacTranhTrungLapExportFrom": "; // ƒê√£ export updateQuiz ·ªü n∆°i kh√°c, tr√°nh tr√πng l·∫∑p\r\nexport * from",
  "daHoanThanhQuizscorespanDivThemMoiTagsQuiztagsQuiz": ">ƒê√£ ho√†n th√†nh: {quiz.score}%</span>\n          </div>\n        )}\n\n        {/* **TH√äM M·ªöI**: Tags */}\n        {quiz.tags && quiz.tags.length > 0 && (\n          <div className=",
  "daImportThanhCongQuestionslengthCauHoi": "ƒê√£ import th√†nh c√¥ng ${questions.length} c√¢u h·ªèi!",
  "daMoLaiQuizDeXemXet": "ƒê√£ m·ªü l·∫°i quiz ƒë·ªÉ xem x√©t!",
  "daNenMathroundselectedfilesize1024kbMathroundfilet": "ƒê√£ n√©n: ${Math.round(selectedFile.size / 1024)}KB ‚Üí ${Math.round(fileToUpload.size / 1024)}KB",
  "daPheDuyetQuizThanhCong": "ƒê√£ ph√™ duy·ªát quiz th√†nh c√¥ng!",
  "daPheDuyetYeuCauChinhSuaCuaEditrequestrequestedbyn": "ƒê√£ ph√™ duy·ªát y√™u c·∫ßu ch·ªânh s·ª≠a c·ªßa ${editRequest.requestedByName || editRequest.requestedByEmail}!",
  "daTaoLaiCauHoi": "ƒê√£ t·∫°o l·∫°i c√¢u h·ªèi",
  "daTaoNoiDungMauDeBanCoTheTestAi": "ƒê√£ t·∫°o n·ªôi dung m·∫´u ƒë·ªÉ b·∫°n c√≥ th·ªÉ test AI",
  "daTaoQuestionslengthCauHoiThanhCong": "‚úÖ ƒê√£ t·∫°o ${questions.length} c√¢u h·ªèi th√†nh c√¥ng!",
  "daTaoResultquestionslengthCauHoi": "ƒê√£ t·∫°o ${result.questions.length} c√¢u h·ªèi!",
  "daTaoThanhCongQuestionslengthCauHoi": "ƒê√£ t·∫°o th√†nh c√¥ng ${questions.length} c√¢u h·ªèi",
  "daThemCauHoiVaoQuiz": "ƒê√£ th√™m c√¢u h·ªèi v√†o quiz!",
  "daThemTaiLieu": "ƒê√£ th√™m t√†i li·ªáu",
  "daThemVaoYeuThich": "ƒê√£ th√™m v√†o y√™u th√≠ch!",
  "daThich": "ƒê√£ th√≠ch",
  "daTrichXuatResultextractedtextlengthKyTuTuFile": "ƒê√£ tr√≠ch xu·∫•t ${result.extractedText.length} k√Ω t·ª± t·ª´ file!",
  "daTuChoiQuiz": "ƒê√£ t·ª´ ch·ªëi quiz!",
  "daTuChoiYeuCauChinhSuaCuaEditrequestrequestedbynam": "ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu ch·ªânh s·ª≠a c·ªßa ${editRequest.requestedByName || editRequest.requestedByEmail}!",
  "daVuotQuaSoLanThuVuiLongYeuCauOtpMoi": "ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠. Vui l√≤ng y√™u c·∫ßu OTP m·ªõi.",
  "daXayRaLoi": "ƒê√£ x·∫£y ra l·ªói",
  "daXayRaLoiKhongXacDinh": "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh",
  "daXayRaLoiVuiLongTaiLaiTrang": "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng t·∫£i l·∫°i trang.",
  "daXayRaLoih2PClassname": ">ƒê√£ x·∫£y ra l·ªói</h2>\r\n            <p className=",
  "daXem": "ƒê√£ xem",
  "daXemSpanDivDivDivResourcewhywatchDivClassname": "/>\r\n                      ƒê√£ xem\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {resource.whyWatch && (\r\n              <div className=",
  "daXoaCreatorThanhCong": "ƒê√£ x√≥a creator th√†nh c√¥ng",
  "daXoaSelecteditemslengthItemtype": "ƒê√£ x√≥a ${selectedItems.length} ${itemType}!",
  "daXoaTaiLieu": "ƒê√£ x√≥a t√†i li·ªáu",
  "daXuLyFileFilenameThanhCong": "ƒê√£ x·ª≠ l√Ω file ${file.name} th√†nh c√¥ng!",
  "dangChoNguoiChoiKhac": "ƒêang ch·ªù ng∆∞·ªùi ch∆°i kh√°c...",
  "dangChoNguoiChoiKhacpDivDivFinalResultsPhaseUltraM": ">ƒêang ch·ªù ng∆∞·ªùi ch∆°i kh√°c...</p>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Final Results Phase - Ultra Modern Leaderboard */}\n        {currentGamePhase ===",
  "dangGui": "ƒêang g·ª≠i...",
  "dangHoatDong": "ƒêang ho·∫°t ƒë·ªông",
  "dangKetNoiVoiAiService": "ƒêang k·∫øt n·ªëi v·ªõi AI service...",
  "dangKiemTraXacThuc": "ƒêang ki·ªÉm tra x√°c th·ª±c...",
  "dangLuu": "ƒêang l∆∞u...",
  "dangNenAnh": "ƒêang n√©n ·∫£nh...",
  "dangNhapDeDanhGiaVaXemCacDanhGiaKhac": "ƒêƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√° v√† xem c√°c ƒë√°nh gi√° kh√°c",
  "dangNhapDeDanhGiaVaXemCacDanhGiaKhacpLinkTo": ">ƒêƒÉng nh·∫≠p ƒë·ªÉ ƒë√°nh gi√° v√† xem c√°c ƒë√°nh gi√° kh√°c</p>\r\n              <Link\r\n                to=",
  "dangSuDungCauHoiMauThayViAi": "ƒêang s·ª≠ d·ª•ng c√¢u h·ªèi m·∫´u thay v√¨ AI",
  "dangTai": "ƒêang t·∫£i...",
  "dangTaiDanhSachCreator": "ƒêang t·∫£i danh s√°ch creator...",
  "dangTaiDanhSachCreatorpDivFilteredcreatorslength0D": ">ƒêang t·∫£i danh s√°ch creator...</p>\r\n            </div>\r\n          ) : filteredCreators.length === 0 ? (\r\n            <div className=",
  "dangTaiDuLieu": "ƒêang t·∫£i d·ªØ li·ªáu...",
  "dangTaiDuLieuspanDivDivDivReturnDivClassname": ">ƒêang t·∫£i d·ªØ li·ªáu...</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=",
  "dangTaiNgonNgu": "ƒêang t·∫£i ng√¥n ng·ªØ...",
  "dangTaiQuiz": "ƒêang t·∫£i quiz...",
  "dangTaiQuizpDivDivIfErrorQuizReturnDivClassname": ">ƒêang t·∫£i quiz...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !quiz) {\n    return (\n      <div className=",
  "dangTaiQuizspanDivDivDivIfQuizReturnDivClassname": ">ƒêang t·∫£i quiz...</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!quiz) {\r\n    return (\r\n      <div className=",
  "dangTaiThongTinQuiz": "ƒêang t·∫£i th√¥ng tin quiz...",
  "dangTaiThongTinQuizpDivDivIfQuizReturnDivClassname": ">ƒêang t·∫£i th√¥ng tin quiz...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!quiz) {\r\n    return (\r\n      <div className=",
  "dangTaoCauHoi": "ƒêang t·∫°o c√¢u h·ªèi...",
  "dangTaoCauHoiWand2Classname": "/>\r\n              ƒêang t·∫°o c√¢u h·ªèi...\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Wand2 className=",
  "dangTaoCauHoih3PClassname": ">ƒêang t·∫°o c√¢u h·ªèi...</h3>\r\n              <p className=",
  "dangThietLapVaiTro": "ƒêang thi·∫øt l·∫≠p vai tr√≤...",
  "dangThuKetNoiLai": "ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...",
  "dangUpload": "ƒêang upload...",
  "dangXacThuc": "ƒêang x√°c th·ª±c...",
  "dangXuLyFile": "ƒêang x·ª≠ l√Ω file...",
  "dangXuLyFileFilename": "ƒêang x·ª≠ l√Ω file: ${file.name}...",
  "dangXuLyFilespanDivDivDivDivClassname": ">ƒêang x·ª≠ l√Ω file...</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=",
  "dangXuLyFilespanDivTipsDivClassname": ">ƒêang x·ª≠ l√Ω file...</span>\r\n                </div>\r\n              )}\r\n\r\n              {/* Tips */}\r\n              <div className=",
  "dangXuLyKetQua": "ƒêang x·ª≠ l√Ω k·∫øt qu·∫£...",
  "dangXuLyKetQuapDivDivReturnDivClassname": ">ƒêang x·ª≠ l√Ω k·∫øt qu·∫£...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=",
  "danhDauDaDoc": "ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc",
  "danhDauDaDocButtonButtonOnclickDeletenotificationn": ">\r\n                              ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc\r\n                            </button>\r\n                          )}\r\n                          <button\r\n                            onClick={() => deleteNotification(notification.id)}\r\n                            className=",
  "danhDauDaXem": "ƒê√°nh d·∫•u ƒë√£ xem",
  "danhDauDaXemButtonDivDivDivDivReturnDivClassname": ">\r\n                  ƒê√°nh d·∫•u ƒë√£ xem\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=",
  "danhDauDayLaInstantUploadConsolelog": "// ƒê√°nh d·∫•u ƒë√¢y l√† instant upload\r\n      }\r\n    };\r\n\r\n    console.log(",
  "danhGia": "ƒê√°nh gi√°",
  "danhGiaCuaBan": "ƒê√°nh gi√° c·ªßa b·∫°n",
  "danhGiaCuaBanLabelDivClassname": ">\r\n                ƒê√°nh gi√° c·ªßa b·∫°n\r\n              </label>\r\n              <div className=",
  "danhGiaLinkButtonOnclickhandletogglefavoriteDisabl": "/>\n              ƒê√°nh gi√°\n            </Link>\n            \n            <button\n              onClick={handleToggleFavorite}\n              disabled={favLoading}\n              className={`flex-1 px-3 py-2 rounded-lg text-sm transition-all duration-300 flex items-center justify-center ${\n                isFavorite\n                  ?",
  "danhGiaQuiztitleh3ButtonOnclickSetshowreviewformfa": ">ƒê√°nh gi√°: {quizTitle}</h3>\r\n              <button\r\n                onClick={() => setShowReviewForm(false)}\r\n                className=",
  "danhGiaTb": "ƒê√°nh gi√° TB",
  "danhGiaTbpDivDivDivH5Classname": ">ƒê√°nh gi√° TB</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <h5 className=",
  "danhGiaThThClassname": ">\r\n                      ƒê√°nh gi√°\r\n                    </th>\r\n                    <th className=",
  "danhGiaTichCuc": "ƒê√°nh gi√° t√≠ch c·ª±c",
  "danhGiaTichCucpDivDivDivDivDivClassname": ">ƒê√°nh gi√° t√≠ch c·ª±c</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className=",
  "danhGiaTuNguoiDungReviewslengthH3ButtonOnclickSets": ">\r\n                    ƒê√°nh gi√° t·ª´ ng∆∞·ªùi d√πng ({reviews.length})\r\n                  </h3>\r\n                  <button\r\n                    onClick={() => setShowReviewForm(true)}\r\n                    className=",
  "danhMuc": "üìÇ Danh m·ª•c:",
  "danhMucPhoBien": "Danh m·ª•c ph·ªï bi·∫øn",
  "danhMucPhoBienh3DivClassname": ">Danh m·ª•c ph·ªï bi·∫øn</h3>\r\n        <div className=",
  "danhMucstrongPClassname": ">üìÇ Danh m·ª•c:</strong> \r\n            <p className=",
  "danhSach": "Danh s√°ch",
  "danhSachCauHoi": "Danh s√°ch c√¢u h·ªèi",
  "danhSachCauHoiQuizquestionslengthCauH3DivClassname": "/>\r\n          Danh s√°ch c√¢u h·ªèi ({quiz.questions.length} c√¢u)\r\n        </h3>\r\n        <div className=",
  "danhSachCauHoih2DivClassname": ">Danh s√°ch c√¢u h·ªèi</h2>\r\n        <div className=",
  "danhSachQuiz": "Danh s√°ch Quiz",
  "dapAn": "‚úÖ ƒê√°p √°n:",
  "dapAnA": "ƒê√°p √°n A",
  "dapAnB": "ƒê√°p √°n B",
  "dapAnC": "ƒê√°p √°n C",
  "dapAnChinhXac": "ƒê√°p √°n ch√≠nh x√°c:",
  "dapAnChinhXaclabelInputClassname": ">ƒê√°p √°n ch√≠nh x√°c:</label>\r\n              <input\r\n                className=",
  "dapAnD": "ƒê√°p √°n D",
  "dapAnDung": "ƒê√°p √°n ƒë√∫ng",
  "dapAnDungAbcd": "ƒê√°p √°n ƒë√∫ng (A/B/C/D)",
  "dapAnDungSpanSpanClassname": ">ƒê√°p √°n ƒë√∫ng: </span>\r\n                      <span className=",
  "dapAnDungspanLabelDivDivDivGiaiThichDivClassname": ">ƒê√°p √°n ƒë√∫ng</span>\r\n                </label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Gi·∫£i th√≠ch */}\r\n      <div className=",
  "dapAnTracNghiem": "ƒê√°p √°n tr·∫Øc nghi·ªám",
  "dapAnTracNghiemh4ButtonOnclickhandleaddanswerVaria": ">ƒê√°p √°n tr·∫Øc nghi·ªám</h4>\r\n            <Button onClick={handleAddAnswer} variant=",
  "dapAnstrongSpanClassname": ">‚úÖ ƒê√°p √°n:</strong> <span className=",
  "dashboard": {
    "adminPanel": "Manage users and system",
    "completedQuizzes": "Completed Quizzes",
    "createQuizzes": "Create your own quizzes",
    "creatorsAndAdmins": "Creator + Admin",
    "editProfile": "View and edit personal information",
    "favoriteQuizzes": "Quizzes you saved for later",
    "pending": "Pending Update",
    "realTimeData": "Real-time Data",
    "registered": "Registered",
    "takeQuizzes": "Challenge your knowledge with diverse quizzes",
    "totalCreators": "Creators",
    "totalQuizzes": "T·ªïng Quiz",
    "totalUsers": "Ng∆∞·ªùi d√πng",
    "viewRanking": "View your ranking and achievements",
    "welcome": "Hello, {{name}}!"
  },
  "dashboardCardComponentGiongStyleAdminConstDashboar": ";\r\n\r\n// Dashboard card component gi·ªëng style Admin\r\nconst DashboardCard = React.memo(({ \r\n  to, \r\n  title, \r\n  description,\r\n  emoji,\r\n  bgColor =",
  "dat100Trong1Quiz": "ƒê·∫°t 100% trong 1 quiz",
  "datDiemTrungBinhTren80": "ƒê·∫°t ƒëi·ªÉm trung b√¨nh tr√™n 80%",
  "dataquestionsforeachqAnyIndexNumberIfQtextQanswers": ");\r\n            }\r\n            data.questions.forEach((q: any, index: number) => {\r\n              if (!q.text || !q.answers || !Array.isArray(q.answers) || q.answers.length !== 4) {\r\n                throw new Error(`Invalid question structure at index ${index}`);\r\n              }\r\n              const correctAnswers = q.answers.filter((a: any) => a.isCorrect);\r\n              if (correctAnswers.length !== 1) {\r\n                throw new Error(`Question ${index + 1} must have exactly 1 correct answer`);\r\n              }\r\n            });\r\n            return data.questions as any[];\r\n          };\r\n\r\n          const questions = await this.callWithRetry(run, 2, 800);\r\n          return {\r\n            success: true,\r\n            questions,\r\n            message: `ƒê√£ t·∫°o th√†nh c√¥ng ${questions.length} c√¢u h·ªèi`\r\n          };\r\n        } catch (err) {\r\n          lastError = err;\r\n          // Lu√¥n th·ª≠ model k·∫ø ti·∫øp khi l·ªói, ∆∞u ti√™n chuy·ªÉn model khi flash qu√° t·∫£i\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // If SDK attempts failed, try REST fallback with a stable model\r\n      try {\r\n        const questions = await this.callWithRetry(() => this.generateViaRest(",
  "datenowCauTrucThuMucRoRangTheoChucNangConstFolderT": "+ Date.now();\r\n        \r\n        // C·∫•u tr√∫c th∆∞ m·ª•c r√µ r√†ng theo ch·ª©c nƒÉng\r\n        const folder = type ===",
  "dayLaFilePdfHayTrichXuatVaPhanTichNoiDungVanBanTuF": "ƒê√¢y l√† file PDF. H√£y tr√≠ch xu·∫•t v√† ph√¢n t√≠ch n·ªôi dung vƒÉn b·∫£n t·ª´ file n√†y.\r\nT√≥m t·∫Øt n·ªôi dung ch√≠nh v√† cung c·∫•p th√¥ng tin chi ti·∫øt ƒë·ªÉ c√≥ th·ªÉ t·∫°o c√¢u h·ªèi.\r\nN·∫øu c√≥ b·∫£ng, bi·ªÉu ƒë·ªì ho·∫∑c h√¨nh ·∫£nh, h√£y m√¥ t·∫£ ch√∫ng.",
  "dayLaFileTaiLieuWordHayTrichXuatVaPhanTichNoiDungV": "ƒê√¢y l√† file t√†i li·ªáu Word. H√£y tr√≠ch xu·∫•t v√† ph√¢n t√≠ch n·ªôi dung vƒÉn b·∫£n t·ª´ file n√†y.\r\nT√≥m t·∫Øt n·ªôi dung ch√≠nh v√† cung c·∫•p th√¥ng tin chi ti·∫øt ƒë·ªÉ c√≥ th·ªÉ t·∫°o c√¢u h·ªèi.\r\nBao g·ªìm c·∫£ ƒë·ªãnh d·∫°ng, ti√™u ƒë·ªÅ, v√† c·∫•u tr√∫c c·ªßa t√†i li·ªáu.",
  "dayLaQuizMauDeTestHeThongDanhGia": "ƒê√¢y l√† quiz m·∫´u ƒë·ªÉ test h·ªá th·ªëng ƒë√°nh gi√°",
  "de": "D·ªÖ",
  "deDong": "ƒë·ªÉ ƒë√≥ng",
  "deHocSinhTrungHocCoSo": "d·ªÖ (h·ªçc sinh trung h·ªçc c∆° s·ªü)",
  "dePhatdung": "ƒë·ªÉ ph√°t/d·ª´ng\r\n            ‚Ä¢",
  "deXemThongKeBieuDo": "ƒê·ªÉ xem th·ªëng k√™ bi·ªÉu ƒë·ªì",
  "deXemThongKeBieuDoh3PClassname": ">ƒê·ªÉ xem th·ªëng k√™ bi·ªÉu ƒë·ªì</h3>\r\n                <p className=",
  "defaultFromAddressTuExtensionConfigReplyto": ", // Default FROM address t·ª´ extension config\r\n      replyTo:",
  "delete": "X√≥a",
  "demChiUsersActiveKhongBiXoaVaIsactiveTrueConstUser": "))\r\n      ]);\r\n      \r\n      // ƒê·∫øm ch·ªâ users ACTIVE (kh√¥ng b·ªã xo√° v√† isActive = true)\r\n      const users = usersSnapshot.docs.map(doc => doc.data());\r\n      const activeUsers = users.filter(user => \r\n        user.isActive !== false && \r\n        user.isDeleted !== true\r\n      );\r\n      \r\n      // ƒê·∫øm creators trong s·ªë users ACTIVE\r\n      const creators = activeUsers.filter(user => \r\n        user.role ===",
  "deoptionOptionValue": ">üü¢ D·ªÖ</option>\r\n              <option value=",
  "descriptionDayLaQuizMauDeTestHeThongDanhGiaCategor": ",\r\n            description: 'ƒê√¢y l√† quiz m·∫´u ƒë·ªÉ test h·ªá th·ªëng ƒë√°nh gi√°',\r\n            category: 'General',\r\n            difficulty: 'easy' as const,\r\n            questions: [\r\n              {\r\n                id: '1',\r\n                text: 'C√¢u h·ªèi m·∫´u?',\r\n                type: 'multiple',\r\n                answers: [\r\n                  { id: '1', text: 'ƒê√°p √°n A', isCorrect: true },\r\n                  { id: '2', text: 'ƒê√°p √°n B', isCorrect: false },\r\n                  { id: '3', text: 'ƒê√°p √°n C', isCorrect: false },\r\n                  { id: '4', text: 'ƒê√°p √°n D', isCorrect: false }\r\n                ],\r\n                explanation: 'Gi·∫£i th√≠ch m·∫´u',\r\n                points: 10\r\n              }\r\n            ],\r\n            duration: 300,\r\n            createdBy: 'system',\r\n            createdAt: new Date(),\r\n            updatedAt: new Date(),\r\n            isPublished: true,\r\n            tags: ['sample', 'test']\r\n          };\r\n          setQuiz(fallbackQuiz);\r\n          console.log('‚úÖ Using fallback quiz for testing');\r\n        } else {\r\n          console.log('‚úÖ Quiz data loaded successfully:', quizData.title);\r\n          setQuiz(quizData);\r\n        }\r\n      } catch (quizError) {\r\n        console.error('‚ùå Failed to load quiz:', quizError);\r\n        toast.error('Kh√¥ng t√¨m th·∫•y quiz n√†y');\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Step 2: Load reviews (OPTIONAL - don't fail if reviews fail)\r\n      console.log('üìä Loading reviews...');\r\n      try {\r\n        // Try simple query first to avoid index issues\r\n        const reviewsData = await reviewService.getQuizReviewsSimple(quizId);\r\n        console.log(",
  "despanCase": ">üü¢ D·ªÖ</span>;\r\n      case",
  "details": "Chi ti·∫øt",
  "diChuyenLen": "Di chuy·ªÉn l√™n",
  "diChuyenXuong": "Di chuy·ªÉn xu·ªëng",
  "diaLy": "ƒê·ªãa l√Ω",
  "diemCao": "‚≠ê ƒêi·ªÉm cao",
  "diemMacDinh10": "ƒêi·ªÉm (m·∫∑c ƒë·ªãnh 10)",
  "diemSoPhaiTrongKhoang0100": "ƒêi·ªÉm s·ªë ph·∫£i trong kho·∫£ng 0-100",
  "dienTu": "ƒêi·ªÅn t·ª´",
  "dienTuKhongCanAnswersArrayDungCorrectanswerVaAccep": ":\r\n        // ƒêi·ªÅn t·ª´: kh√¥ng c·∫ßn answers array, d√πng correctAnswer v√† acceptedAnswers\r\n        newAnswers = [];\r\n        newQuestion.correctAnswer =",
  "dienTuoptionOptionValue": ">ƒêi·ªÅn t·ª´</option>\r\n          <option value=",
  "dienTuoptionSelectDivDivDivClassname": ">ƒêi·ªÅn t·ª´</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=",
  "dieuHuongNhanh": "ƒêi·ªÅu h∆∞·ªõng nhanh",
  "dieuHuongNhanhh3DivClassname": ">ƒêi·ªÅu h∆∞·ªõng nhanh</h3>\r\n      <div className=",
  "difficulty": {
    "easy": "D·ªÖ",
    "hard": "Kh√≥",
    "medium": "Trung b√¨nh"
  },
  "dinhDangFile": "üìã ƒê·ªãnh d·∫°ng file:",
  "dinhDangFileKhongDuocHoTro": "ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£",
  "dinhDangFileKhongHopLeChoType": "‚ùå ƒê·ªãnh d·∫°ng file kh√¥ng h·ª£p l·ªá cho ${type}!",
  "dinhDangFileh4UlClassname": ">üìã ƒê·ªãnh d·∫°ng file:</h4>\r\n                <ul className=",
  "dispatchloginsuccessauthuser100ElseDispatchlogoutD": ");\r\n            dispatch(loginSuccess(authUser));\r\n          }, 100);\r\n        }\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n      dispatch(authCheckComplete());\r\n    });\r\n    \r\n    return () => {\r\n      clearTimeout(timeout);\r\n      unsubscribe();\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\n// Th√™m LoadingFallback component n·∫øu ch∆∞a c√≥\r\nconst LoadingFallback = () => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <div className=",
  "div1TatAdBlockerChoLocalhost5174divDiv2ThemGooglea": ">\r\n                  <div>1. T·∫Øt Ad Blocker cho localhost:5174</div>\r\n                  <div>2. Th√™m *.googleapis.com v√†o whitelist</div>\r\n                  <div>3. Th·ª≠ ch·∫ø ƒë·ªô Incognito/Private</div>\r\n                  <div>4. Ki·ªÉm tra Firewall/Antivirus</div>\r\n                </div>\r\n              </div>\r\n              <button \r\n                className=",
  "divButtonNutTestModalButtonOnclickConsolelog": ")}</div>\r\n        </button>\r\n\r\n        {/* N√∫t test modal */}\r\n        <button\r\n          onClick={() => {\r\n            console.log(",
  "divClassnameflexItemscenterJustifybetweenMb2SpanCl": "}>\r\n      <div className=\"flex items-center justify-between mb-2\">\r\n        <span className=\"text-xs font-medium text-gray-600 flex items-center\">\r\n          <svg className=\"w-3 h-3 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n          </svg>\r\n          Th·ªùi gian c√≤n l·∫°i\r\n        </span>\r\n        <span className={",
  "divClassnameflexItemscenterSpacex2Connectionstatus": "}>\r\n              <div className=\"flex items-center space-x-2\">\r\n                {connectionStatus.success ? (\r\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\r\n                ) : (\r\n                  <AlertCircle className=\"w-5 h-5 text-red-600\" />\r\n                )}\r\n                <span className={connectionStatus.success ? 'text-green-800' : 'text-red-800'}>\r\n                  {connectionStatus.message}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Configuration Step */}\r\n          {step === 'config' && (\r\n            <div className=\"space-y-6\">\r\n              <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 p-6 rounded-xl border border-blue-200\">\r\n                <div className=\"flex items-center space-x-2 mb-4\">\r\n                  <Settings className=\"w-5 h-5 text-blue-600\" />\r\n                  <h3 className=\"text-lg font-semibold text-gray-900\">{t('ai.configuration')}</h3>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      S·ªë l∆∞·ª£ng c√¢u h·ªèi\r\n                    </label>\r\n                    <select\r\n                      value={options.numQuestions}\r\n                      onChange={(e) => setOptions(prev => ({ ...prev, numQuestions: parseInt(e.target.value) }))}\r\n                      className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    >\r\n                      <option value={3}>3 {t('quiz.questions')}</option>\r\n                      <option value={5}>5 {t('quiz.questions')}</option>\r\n                      <option value={10}>10 {t('quiz.questions')}</option>\r\n                      <option value={15}>15 {t('quiz.questions')}</option>\r\n                      <option value={20}>20 {t('quiz.questions')}</option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">{t(\"admin.preview.difficulty\")}\r\n                    </label>\r\n                    <select\r\n                      value={options.difficulty}\r\n                      onChange={(e) => setOptions(prev => ({ ...prev, difficulty: e.target.value as any }))}\r\n                      className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    >\r\n                      <option value=\"easy\">{t(\"difficulty.easy\")}</option>\r\n                      <option value=\"medium\">{t(\"difficulty.medium\")}</option>\r\n                      <option value=\"hard\">{t(\"difficulty.hard\")}</option>\r\n                      <option value=\"mixed\">Tr·ªôn l·∫´n</option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Ng√¥n ng·ªØ\r\n                    </label>\r\n                    <select\r\n                      value={options.language}\r\n                      onChange={(e) => setOptions(prev => ({ ...prev, language: e.target.value as any }))}\r\n                      className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    >\r\n                      <option value=\"vi\">Ti·∫øng Vi·ªát</option>\r\n                      <option value=\"en\">English</option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Lo·∫°i c√¢u h·ªèi\r\n                    </label>\r\n                    <select\r\n                      value={options.questionTypes?.[0] || 'multiple'}\r\n                      onChange={(e) => setOptions(prev => ({ ...prev, questionTypes: [e.target.value as any] }))}\r\n                      className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    >\r\n                      <option value=\"multiple\">Tr·∫Øc nghi·ªám</option>\r\n                      <option value=\"true-false\">ƒê√∫ng/Sai</option>\r\n                      <option value=\"fill-in-blank\">ƒêi·ªÅn t·ª´</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"mt-6\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Prompt t√πy ch·ªânh (t√πy ch·ªçn)\r\n                  </label>\r\n                  <textarea\r\n                    value={customPrompt}\r\n                    onChange={(e) => setCustomPrompt(e.target.value)}\r\n                    rows={4}\r\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                    placeholder=\"Nh·∫≠p prompt t√πy ch·ªânh ƒë·ªÉ ƒëi·ªÅu ch·ªânh c√°ch AI t·∫°o c√¢u h·ªèi...\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex justify-end space-x-3\">\r\n                <button\r\n                  onClick={onClose}\r\n                  className=\"px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors\"\r\n                >{t(\"common.cancel\")}\r\n                </button>\r\n                <button\r\n                  onClick={handleGenerate}\r\n                  disabled={generating || !connectionStatus?.success}\r\n                  className=\"px-6 py-3 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg hover:from-purple-700 hover:to-blue-700 transition-colors disabled:opacity-50 flex items-center space-x-2\"\r\n                >\r\n                  <Sparkles className=\"w-5 h-5\" />\r\n                  <span>T·∫°o c√¢u h·ªèi</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Generating Step */}\r\n          {step === 'generate' && (\r\n            <div className=\"text-center py-12\">\r\n              <div className=\"w-20 h-20 bg-gradient-to-r from-purple-600 to-blue-600 rounded-full flex items-center justify-center mx-auto mb-6\">\r\n                <Loader2 className=\"w-10 h-10 text-white animate-spin\" />\r\n              </div>\r\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">ƒêang t·∫°o c√¢u h·ªèi...</h3>\r\n              <p className=\"text-gray-600\">Firebase AI ƒëang ph√¢n t√≠ch n·ªôi dung v√† t·∫°o c√¢u h·ªèi ph√π h·ª£p</p>\r\n              <div className=\"mt-6 bg-blue-50 rounded-lg p-4\">\r\n                <div className=\"flex items-center justify-center space-x-2 text-blue-800\">\r\n                  <Globe className=\"w-5 h-5\" />\r\n                  <span>S·ª≠ d·ª•ng Vertex AI/Gemini Pro</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Review Step */}\r\n          {step === 'review' && (\r\n            <div className=\"space-y-6\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <h3 className=\"text-xl font-bold text-gray-900\">\r\n                  Xem tr∆∞·ªõc c√¢u h·ªèi ({generatedQuestions.length})\r\n                </h3>\r\n                <div className=\"flex space-x-2\">\r\n                  <button\r\n                    onClick={() => setStep('config')}\r\n                    className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50\"\r\n                  >\r\n                    C·∫•u h√¨nh l·∫°i\r\n                  </button>\r\n                  <button\r\n                    onClick={handleUseQuestions}\r\n                    className=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2\"\r\n                  >\r\n                    <CheckCircle className=\"w-5 h-5\" />\r\n                    <span>S·ª≠ d·ª•ng c√¢u h·ªèi</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"space-y-4 max-h-96 overflow-y-auto\">\r\n                {generatedQuestions.map((question, index) => (\r\n                  <div key={index} className=\"bg-gray-50 rounded-lg p-4 border border-gray-200\">\r\n                    <div className=\"flex justify-between items-start mb-3\">\r\n                      <h4 className=\"font-semibold text-gray-900\">C√¢u {index + 1}</h4>\r\n                      <button\r\n                        onClick={() => handleRegenerateQuestion(index)}\r\n                        className=\"text-sm text-blue-600 hover:text-blue-700 flex items-center space-x-1\"\r\n                      >\r\n                        <Lightbulb className=\"w-4 h-4\" />\r\n                        <span>T·∫°o l·∫°i</span>\r\n                      </button>\r\n                    </div>\r\n                    <p className=\"text-gray-800 mb-3\">{question.text}</p>\r\n                    <div className=\"space-y-2\">\r\n                      {question.answers.map((answer, answerIndex) => (\r\n                        <div\r\n                          key={answerIndex}\r\n                          className={",
  "divClassnameflexItemscenterSpanClassnamefontmedium": "}\r\n                      >\r\n                        <div className=\"flex items-center\">\r\n                          <span className=\"font-medium mr-3\">\r\n                            {String.fromCharCode(65 + question.answers.indexOf(answer))}.\r\n                          </span>\r\n                          <span>{answer.text}</span>\r\n                          {answer.isCorrect && (\r\n                            <span className=\"ml-auto text-green-600 font-medium\">\r\n                              ‚úì Correct Answer\r\n                            </span>\r\n                          )}\r\n                          {answer.id === userAnswerValue && !answer.isCorrect && (\r\n                            <span className=\"ml-auto text-red-600 font-medium\">\r\n                              Your Answer\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                {/* Hi·ªÉn th·ªã ƒë√°p √°n cho checkbox */}\r\n                {question.type === 'checkbox' && (\r\n                  <div className=\"space-y-2\">\r\n                    {question.answers.map(answer => {\r\n                      const userSelectedIds: string[] = Array.isArray(userAnswerValue) ? userAnswerValue : [];\r\n                      const isUserSelected = userSelectedIds.includes(answer.id);\r\n                      \r\n                      return (\r\n                        <div\r\n                          key={answer.id}\r\n                          className={",
  "divClassnamefontboldTextsmplayerscoredivDivClassna": "}>\n                          <div className=\"font-bold text-sm\">{player.score}</div>\n                          <div className=\"text-xs text-gray-500\">pts</div>\n                        </div>\n                      </div>\n                    );\n                  })}\n              </div>\n            </div>\n            \n            {nextQuestionCountdown !== null && (\n              <div className=\"mt-4 text-center\">\n                {nextQuestionCountdown > 0 ? (\n                  <p className=\"text-gray-600\">C√¢u h·ªèi ti·∫øp theo trong: <span className=\"font-bold text-blue-600\">{nextQuestionCountdown}s</span></p>\n                ) : (\n                  <p className=\"text-gray-600\">ƒêang ch·ªù ng∆∞·ªùi ch∆°i kh√°c...</p>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Final Results Phase - Ultra Modern Leaderboard */}\n        {currentGamePhase === 'finished' && (\n          <div className=\"min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 p-4\">\n            <div className=\"max-w-4xl mx-auto\">\n              \n              {/* Trophy Header */}\n              <div className=\"text-center mb-8\">\n                <div className=\"inline-flex items-center justify-center w-24 h-24 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full mb-4 shadow-2xl\">\n                  <span className=\"text-4xl\">üèÜ</span>\n                </div>\n                <h1 className=\"text-5xl font-black text-white mb-2 bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent\">\n                  GAME COMPLETE!\n                </h1>\n                <p className=\"text-xl text-blue-200\">Amazing performance by all players</p>\n              </div>\n\n              {/* Champion Podium */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n                {Object.entries(playerScores)\n                  .sort(([,a], [,b]) => b - a)\n                  .slice(0, 3)\n                  .map(([playerId, score], index) => {\n                    const player = currentRoomData?.players?.find((p: any) => p.id === playerId);\n                    const isCurrentUser = playerId === currentUser?.uid;\n                    const position = index + 1;\n                    const playerAnswerHistory = playerAnswers[playerId] || [];\n                    const correctAnswers = playerAnswerHistory.filter(a => a.isCorrect).length;\n                    const totalQuestions = processedQuestions.length;\n                    const accuracy = totalQuestions > 0 ? Math.round((correctAnswers/totalQuestions)*100) : 0;\n                    \n                    const podiumData = {\n                      1: { \n                        trophy: 'ü•á', \n                        color: 'from-yellow-400 to-yellow-600', \n                        bgColor: 'from-yellow-50 to-orange-50',\n                        borderColor: 'border-yellow-400',\n                        height: 'h-32'\n                      },\n                      2: { \n                        trophy: 'ü•à', \n                        color: 'from-gray-400 to-gray-600', \n                        bgColor: 'from-gray-50 to-slate-50',\n                        borderColor: 'border-gray-400',\n                        height: 'h-24'\n                      },\n                      3: { \n                        trophy: 'ü•â', \n                        color: 'from-amber-600 to-amber-800', \n                        bgColor: 'from-amber-50 to-yellow-50',\n                        borderColor: 'border-amber-500',\n                        height: 'h-20'\n                      }\n                    };\n                    \n                    const podium = podiumData[position as keyof typeof podiumData];\n                    \n                    return (\n                      <div key={playerId} className=\"text-center\">\n                        <div className={",
  "divClassnamemt05QuizispublicTrueDivPClassnamequizi": "}>\r\n            <div className=\"mt-0.5\">\r\n              {quiz.isPublic === true ? 'üåç' : 'üîí'}\r\n            </div>\r\n            <p className={quiz.isPublic === true ? 'text-blue-800' : 'text-purple-800'}>\r\n              {quiz.isPublic === true \r\n                ? 'Quiz c√¥ng khai s·∫Ω xu·∫•t hi·ªán trong danh s√°ch t√¨m ki·∫øm v√† trang ch·ªß, gi√∫p nhi·ªÅu ng∆∞·ªùi tham gia h∆°n.'\r\n                : 'Quiz ri√™ng t∆∞ ch·ªâ nh·ªØng ng∆∞·ªùi c√≥ link tr·ª±c ti·∫øp m·ªõi c√≥ th·ªÉ truy c·∫≠p. Th√≠ch h·ª£p cho quiz n·ªôi b·ªô ho·∫∑c chia s·∫ª v·ªõi nh√≥m nh·ªè.'\r\n              }\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Additional Settings */}\r\n        <div className=\"space-y-3\">\r\n          <label className=\"flex items-center gap-2 text-sm font-semibold text-gray-700\">\r\n            <Star className=\"w-4 h-4\" />\r\n            C√†i ƒë·∫∑t b·ªï sung\r\n          </label>\r\n          \r\n          <div className=\"space-y-2\">\r\n            {/* Allow Retake */}\r\n            <div className=\"flex items-center gap-3 p-4 bg-gray-50 rounded-lg border border-gray-200\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"allowRetake\"\r\n                checked={quiz.allowRetake !== false}\r\n                onChange={(e) => setQuiz(q => ({ ...q, allowRetake: e.target.checked }))}\r\n                className=\"w-5 h-5 text-blue-600 rounded focus:ring-2 focus:ring-blue-500\"\r\n              />\r\n              <label htmlFor=\"allowRetake\" className=\"flex-1 cursor-pointer\">\r\n                <div className=\"font-medium text-gray-900\">üîÑ Cho ph√©p l√†m l·∫°i</div>\r\n                <p className=\"text-sm text-gray-600 mt-0.5\">\r\n                  H·ªçc vi√™n c√≥ th·ªÉ l√†m quiz nhi·ªÅu l·∫ßn ƒë·ªÉ c·∫£i thi·ªán ƒëi·ªÉm\r\n                </p>\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Preview */}\r\n      <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 p-6 rounded-2xl border border-blue-200\">\r\n        <h3 className=\"font-semibold text-blue-900 mb-3\">üìã {t('createQuiz.info.preview')}</h3>\r\n        <div className=\"space-y-2 text-sm\">\r\n          <p><strong>{t('quiz.title')}:</strong> {quiz.title || t('createQuiz.info.noTitle')}</p>\r\n          <div>\r\n            <strong>{t('quiz.description')}:</strong>{' '}\r\n            {quiz.description ? (\r\n              <RichTextViewer content={quiz.description} />\r\n            ) : (\r\n              <span>{t('createQuiz.info.noDescription')}</span>\r\n            )}\r\n          </div>\r\n          <p><strong>{t('quiz.category')}:</strong> {quiz.category || t('createQuiz.info.noCategory')}</p>\r\n          <p><strong>{t('quiz.difficulty')}:</strong> {quiz.difficulty || t('createQuiz.info.noDifficulty')}</p>\r\n          <p><strong>{t('quiz.duration')}:</strong> {quiz.duration} {t('minutes')}</p>\r\n          <p>\r\n            <strong>Quy·ªÅn ri√™ng t∆∞:</strong>{' '}\r\n            <span className={",
  "divDangThietLapVaiTroDiv": "></div>\r\n                ƒêang thi·∫øt l·∫≠p vai tr√≤...\r\n              </div>\r\n            ) : (",
  "divDivDivThongKeNhanhHienThiDivClassname": ")}</div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Th·ªëng k√™ nhanh hi·ªÉn th·ªã */}\r\n      <div className=",
  "divDivMainActionsGrid2CotNhuAdminDivClassname": "}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Main Actions Grid - 2 c·ªôt nh∆∞ Admin */}\r\n        <div className=",
  "divDivTaiLieuHocTapTrongPreviewPreviewquizlearning": ")}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* T√†i li·ªáu h·ªçc t·∫≠p trong Preview */}\r\n                {previewQuiz.learningResources && previewQuiz.learningResources.length > 0 && (\r\n                  <div className=",
  "divPchuaCoDuLieuQuizPhoBienpPClassname": ">üìä</div>\r\n          <p>Ch∆∞a c√≥ d·ªØ li·ªáu quiz ph·ªï bi·∫øn</p>\r\n          <p className=",
  "divSpanClassnametextgray600FontmediumRatingtofixed": "}\n            />\n          ))}\n        </div>\n        <span className=\"text-gray-600 font-medium\">\n          {rating.toFixed(1)}\n        </span>\n        <span className=\"text-gray-500\">\n          ({reviewCount})\n        </span>\n      </div>\n    );\n  };\n\n  const user = useSelector((state: RootState) => state.auth.user);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [favLoading, setFavLoading] = useState(false);\n  const [reviewStats, setReviewStats] = useState<QuizReviewStats | null>(null);\n\n  // Fetch review stats\n  useEffect(() => {\n    const fetchReviewStats = async () => {\n      try {\n        const stats = await reviewService.getQuizReviewStats(quiz.id);\n        setReviewStats(stats);\n      } catch (error) {\n        console.error('Error fetching review stats:', error);\n      }\n    };\n    \n    fetchReviewStats();\n  }, [quiz.id]);\n\n  useEffect(() => {\n    if (!user) return;\n    const checkFavorite = async () => {\n      const favRef = doc(db, 'user_favorites', user.uid);\n      const favSnap = await getDoc(favRef);\n      if (favSnap.exists()) {\n        const data = favSnap.data();\n        setIsFavorite(Array.isArray(data.quizIds) && data.quizIds.includes(quiz.id));\n      } else {\n        setIsFavorite(false);\n      }\n    };\n    checkFavorite();\n  }, [user, quiz.id]);\n\n  const handleToggleFavorite = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    if (!user) return;\n    setFavLoading(true);\n    const favRef = doc(db, 'user_favorites', user.uid);\n    try {\n      const favSnap = await getDoc(favRef);\n      if (favSnap.exists()) {\n        await updateDoc(favRef, {\n          quizIds: isFavorite ? arrayRemove(quiz.id) : arrayUnion(quiz.id)\n        });\n      } else {\n        await setDoc(favRef, {\n          quizIds: [quiz.id]\n        });\n      }\n      setIsFavorite(!isFavorite);\n      // toast.success(isFavorite ? 'ƒê√£ b·ªè y√™u th√≠ch quiz!' : 'ƒê√£ th√™m v√†o y√™u th√≠ch!');\n      // N·∫øu ƒëang ·ªü trang Favorites, refetch l·∫°i\n      if (window.location.pathname.startsWith('/favorites')) {\n        window.location.reload();\n      }\n    } catch (err) {\n      // toast.error('L·ªói khi c·∫≠p nh·∫≠t y√™u th√≠ch!');\n    } finally {\n      setFavLoading(false);\n    }\n  };\n\n  // **TH√äM M·ªöI**: Render list view\n  if (viewMode === 'list') {\n    return (\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow\">\n        <div className=\"flex items-center gap-6\">\n          {/* Image/Icon */}\n          <div className=\"w-20 h-20 rounded-lg overflow-hidden flex-shrink-0 bg-gradient-to-br from-blue-500 to-purple-600 relative\">\n            {quiz.imageUrl ? (\n              <img src={quiz.imageUrl} alt={quiz.title} className=\"w-full h-full object-cover\" />\n            ) : (\n              <div className=\"w-full h-full flex items-center justify-center text-white text-2xl font-bold\">\n                {quiz.category.charAt(0).toUpperCase()}\n              </div>\n            )}\n          </div>\n\n          {/* Content */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between mb-2\">\n              <h3 className=\"text-lg font-semibold text-gray-900 truncate pr-4\">{quiz.title}</h3>\n              <div className=\"flex items-center gap-2\">\n                <span className={",
  "doKho": "‚ö° ƒê·ªô kh√≥:",
  "doKhoLabelSelectValueformdatadifficultyOnchangeeSe": ">\r\n              üéØ ƒê·ªô kh√≥\r\n            </label>\r\n            <select\r\n              value={formData.difficulty}\r\n              onChange={(e) => setFormData({ ...formData, difficulty: e.target.value as any })}\r\n              className=",
  "doKhostrongPClassname": ">‚ö° ƒê·ªô kh√≥:</strong> \r\n            <p className=",
  "docTatCaWorksheetsWorkbooksheetnamesforeachsheetna": ";\r\n      \r\n      // ƒê·ªçc t·∫•t c·∫£ worksheets\r\n      workbook.SheetNames.forEach(sheetName => {\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        const csvText = XLSX.utils.sheet_to_csv(worksheet);\r\n        fullText += `\\n=== Sheet: ${sheetName} ===\\n${csvText}\\n`;\r\n      });\r\n      \r\n      return {\r\n        extractedText: fullText.trim(),\r\n        success: true,\r\n        metadata: {\r\n          fileSize: file.size,\r\n          fileName: file.name,\r\n          sheetCount: workbook.SheetNames.length,\r\n          sheetNames: workbook.SheetNames\r\n        }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        extractedText:",
  "dong": "ƒê√≥ng",
  "dongEsc": "ƒê√≥ng (ESC)",
  "dongModal": "ƒê√≥ng modal",
  "dongThongBao": "ƒê√≥ng th√¥ng b√°o",
  "download": "T·∫£i xu·ªëng",
  "downloadurlSetformdataprevPrevUrlDownloadurlToasts": ", downloadURL);\r\n        \r\n        setFormData(prev => ({\r\n          ...prev,\r\n          url: downloadURL\r\n        }));\r\n        \r\n        toast.success(`‚úÖ Upload ${type} th√†nh c√¥ng!`);\r\n      }\r\n    } catch (error: any) {\r\n      console.error(",
  "duLieuMauDeDemo": "üéØ D·ªØ li·ªáu m·∫´u ƒë·ªÉ demo",
  "duLieuSeXuatHienKhiCoNhieuNguoiThamGiaQuizHon": "D·ªØ li·ªáu s·∫Ω xu·∫•t hi·ªán khi c√≥ nhi·ªÅu ng∆∞·ªùi tham gia quiz h∆°n",
  "duLieuSeXuatHienKhiCoNhieuNguoiThamGiaQuizHonpDivD": ">D·ªØ li·ªáu s·∫Ω xu·∫•t hi·ªán khi c√≥ nhi·ªÅu ng∆∞·ªùi tham gia quiz h∆°n</p>\r\n        </div>\r\n      ) : (\r\n        <div className=",
  "duLieuThucTe": "üìà D·ªØ li·ªáu th·ª±c t·∫ø",
  "duLieuThucTepDivDivClassname": ">üìà D·ªØ li·ªáu th·ª±c t·∫ø</p>\r\n            </div>\r\n            <div className=",
  "duaTrenNoiDungFileDaTaiLenFilecontentTaoCauHoiVeFo": "D·ª±a tr√™n n·ªôi dung file ƒë√£ t·∫£i l√™n: ${fileContent}. T·∫°o c√¢u h·ªèi v·ªÅ: ${formData.topic}",
  "dung": "ƒê√∫ng",
  "dungSpace": "D·ª´ng (Space)",
  "dungsai": "ƒê√∫ng/Sai",
  "dungsaiTao2DapAnVoiIscorrectLogicNewanswersIdGener": ":\r\n        // ƒê√∫ng/Sai: t·∫°o 2 ƒë√°p √°n v·ªõi isCorrect logic\r\n        newAnswers = [\r\n          { id: generateId(), text:",
  "dungsaioptionOptionValue": ">ƒê√∫ng/Sai</option>\r\n                      <option value=",
  "edit": "Ch·ªânh s·ª≠a",
  "elseClearStoredOtpNeuGuiThatBaiClearotpemailReturn": "};\r\n    } else {\r\n      // Clear stored OTP n·∫øu g·ª≠i th·∫•t b·∫°i\r\n      clearOTP(email);\r\n      return result;\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Error generating and sending OTP:', error);\r\n    return {\r\n      success: false,\r\n      message: 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Verify OTP\r\n */\r\nexport const verifyOTP = (email: string, inputOTP: string): { success: boolean; message: string } => {\r\n  const storageKey =",
  "elseConstErrordataAwaitResponsejsonToasterrorApiKe": ");\r\n                    } else {\r\n                      const errorData = await response.json();\r\n                      toast.error(`‚ùå API key l·ªói: ${errorData.error?.message}`);\r\n                      console.error(",
  "elseLayRoleTuFirestoreChoUserThuongConstUserdocAwa": ");\r\n    } else {\r\n      // L·∫•y role t·ª´ Firestore cho user th∆∞·ªùng\r\n      const userDoc = await getDoc(doc(db,",
  "email": {
    "errors": {
      "configurationError": "EmailJS Configuration Error: Template needs 'To Email' field set to {{to_email}}. Please check EmailJS Dashboard.",
      "keyError": "Public Key Error: Key is invalid. Please check EmailJS Dashboard.",
      "sendFailed": "Cannot send email: {{error}}. Check internet connection and try again.",
      "serviceError": "Service Error: Service ID '{{serviceId}}' is invalid. Please check EmailJS Dashboard.",
      "templateError": "Template Error: Template ID '{{templateId}}' does not exist. Please check EmailJS Dashboard."
    },
    "otpSent": "Verification code has been sent to {{email}}. Please check your inbox (including Spam folder).",
    "required": "Email is required"
  },
  "emailDaDuocGui": "Email ƒë√£ ƒë∆∞·ª£c g·ª≠i!",
  "emailDaDuocGuih3PClassname": ">Email ƒë√£ ƒë∆∞·ª£c g·ª≠i!</h3>\r\n            <p className=",
  "emailDatLaiMatKhauDaDuocGuiHayKiemTraHopThuCuaBan": "Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i! H√£y ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n.",
  "emailKhongHopLe": "Email kh√¥ng h·ª£p l·ªá",
  "emailKhongXacDinh": "Email kh√¥ng x√°c ƒë·ªãnh",
  "emailNayDaDuocSuDung": "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng",
  "emailNayDuocGuiTuDongVuiLongKhongTraLoi": "Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.",
  "emailOtpDangDuocGuiDi": "Email OTP ƒëang ƒë∆∞·ª£c g·ª≠i ƒëi...",
  "emailUseremailDisplaynameUserdisplaynameUpdatedatN": ",\r\n        email: user.email,\r\n        displayName: user.displayName,\r\n        updatedAt: new Date()\r\n      }, { merge: true });\r\n\r\n      // C·∫≠p nh·∫≠t Redux store\r\n      dispatch(setRole(role));\r\n      console.log(",
  "error": "L·ªói",
  "errorFallbackReturnMockExtractedTextForTestingCons": ", error);\r\n      \r\n      // Fallback: Return mock extracted text for testing\r\n      const mockText = `\r\nN·ªôi dung m·∫´u ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ ·∫£nh (OCR ƒëang g·∫∑p v·∫•n ƒë·ªÅ).\r\n\r\nƒê√¢y l√† text m·∫´u ƒë·ªÉ test ch·ª©c nƒÉng AI:\r\n- JavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn\r\n- React l√† library ƒë·ªÉ x√¢y d·ª±ng UI\r\n- Node.js cho ph√©p ch·∫°y JavaScript tr√™n server\r\n- HTML l√† ng√¥n ng·ªØ ƒë√°nh d·∫•u\r\n- CSS d√πng ƒë·ªÉ t·∫°o ki·ªÉu cho trang web\r\n\r\nB·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng n·ªôi dung n√†y ƒë·ªÉ test t√≠nh nƒÉng t·∫°o c√¢u h·ªèi v·ªõi AI.\r\n      `.trim();\r\n      \r\n      console.log(",
  "errorFallbackRoleVoiCheckAdminEmailChinhXacHonCons": ", error);\r\n          // Fallback role v·ªõi check admin email ch√≠nh x√°c h∆°n\r\n          const fallbackRole:",
  "errorLoaiFileKhongDuocHoTroFiletypePrivateGetfilet": ",\r\n          error: `Lo·∫°i file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: ${file.type}`\r\n        };\r\n    }\r\n  }\r\n\r\n  private getFileType(file: File): string {\r\n    const extension = file.name.split(",
  "errorLoiDocFileTextErrorInstanceofErrorErrormessag": ",\r\n        error: `L·ªói ƒë·ªçc file text: ${error instanceof Error ? error.message :",
  "errorLoiXuLyAnhErrorInstanceofErrorErrormessage": ",\r\n        error: `L·ªói x·ª≠ l√Ω ·∫£nh: ${error instanceof Error ? error.message :",
  "errorLoiXuLyPdfErrorInstanceofErrorErrormessage": ",\r\n        error: `L·ªói x·ª≠ l√Ω PDF: ${error instanceof Error ? error.message :",
  "errorLoiXuLyTaiLieuErrorInstanceofErrorErrormessag": ",\r\n        error: `L·ªói x·ª≠ l√Ω t√†i li·ªáu: ${error instanceof Error ? error.message :",
  "errorNeuFirestoreFailVanLuuRoleVaoLocalstorageVaRe": ", error);\r\n      \r\n      // N·∫øu Firestore fail, v·∫´n l∆∞u role v√†o localStorage v√† Redux\r\n      console.warn(",
  "errorReturnNullCompressImageSieuNhanhVoiWebpFormat": ", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Compress image si√™u nhanh v·ªõi WebP format\r\n * WebP nh·∫π h∆°n JPEG 25-35%, encode nhanh h∆°n, quality t·ªët h∆°n\r\n */\r\nexport const compressImage = async (\r\n  file: File,\r\n  maxWidth: number = 1920,\r\n  maxHeight: number = 1080,\r\n  quality: number = 0.85,\r\n  useWebP: boolean = true // WebP m·∫∑c ƒë·ªãnh cho t·ªëc ƒë·ªô\r\n): Promise<File> => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    \r\n    reader.onload = (event) => {\r\n      const img = new Image();\r\n      img.src = event.target?.result as string;\r\n      \r\n      img.onload = () => {\r\n        const canvas = document.createElement(",
  "errorReturnNullTaoHoacCapNhatLearningSessionExport": ", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * T·∫°o ho·∫∑c c·∫≠p nh·∫≠t learning session\r\n */\r\nexport const initializeLearningSession = async (\r\n  userId: string,\r\n  quizId: string,\r\n  resources: LearningResource[]\r\n): Promise<LearningSession> => {\r\n  const sessionId = `${quizId}_${userId}`;\r\n  const sessionRef = doc(db,",
  "errorReturnNullXacDinhMauSacDuaTrenLoaiThongBaoCon": ", error);\r\n    return null;\r\n  }\r\n\r\n  // X√°c ƒë·ªãnh m√†u s·∫Øc d·ª±a tr√™n lo·∫°i th√¥ng b√°o\r\n  const getBgColor = () => {\r\n    switch (notification.type) {\r\n      case",
  "errorShowSpecificErrorToUserToasterrorloiAiErrorIn": ", error);\r\n      \r\n      // Show specific error to user\r\n      toast.error(`L·ªói AI: ${error instanceof Error ? error.message :",
  "errorThrowErrorKiemTraResourceDaHoanThanhThreshold": ", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Ki·ªÉm tra resource ƒë√£ ho√†n th√†nh threshold ch∆∞a\r\n */\r\nexport const validateResourceCompletion = (\r\n  resource: LearningResource,\r\n  progress: ResourceViewProgress\r\n): { completed: boolean; reason?: string } => {\r\n  const threshold = resource.threshold;\r\n\r\n  switch (resource.type) {\r\n    case",
  "errorThrowErrorStaticGetdefaultpromptnumquestionsN": ", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static getDefaultPrompt(numQuestions: number, difficulty: string, language: string): string {\r\n    return OpenAIService.getDefaultPrompt(numQuestions, difficulty, language);\r\n  }\r\n}\r\n\r\n/**\r\n * Main AI Service - Router cho c√°c providers\r\n */\r\nexport class AIService {\r\n  static async generateQuestions(\r\n    config: AIConfig,\r\n    options: QuestionGenerationOptions\r\n  ): Promise<Question[]> {\r\n    try {\r\n      switch (config.provider) {\r\n        case",
  "errorThrowErrorTaoPromptMacDinhChoViecGenerateCauH": ", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * T·∫°o prompt m·∫∑c ƒë·ªãnh cho vi·ªác generate c√¢u h·ªèi\r\n   */\r\n  private static getDefaultPrompt(numQuestions: number, difficulty: string, language: string): string {\r\n    const lang = language ===",
  "errorThrowNewErrorkhongTheTaoCauHoiErrorInstanceof": ", error);\r\n      throw new Error(`Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi: ${error instanceof Error ? error.message :",
  "excelspreadsheetServiceTrichXuatDataTuExcelcsvExpo": "};\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Excel/Spreadsheet Service - Tr√≠ch xu·∫•t data t·ª´ Excel/CSV\r\n */\r\nexport class SpreadsheetService {\r\n  static async extractTextFromSpreadsheet(file: File): Promise<FileProcessingResult> {\r\n    try {\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      const workbook = XLSX.read(arrayBuffer, { type: 'array' });\r\n      \r\n      let fullText = '';\r\n      \r\n      // ƒê·ªçc t·∫•t c·∫£ worksheets\r\n      workbook.SheetNames.forEach(sheetName => {\r\n        const worksheet = workbook.Sheets[sheetName];\r\n        const csvText = XLSX.utils.sheet_to_csv(worksheet);\r\n        fullText +=",
  "exportConstResultpageReactfcConstResultQuizQuizidI": ";\r\n\r\nexport const ResultPage: React.FC = () => {\r\n  const { result, quiz, quizId, isLoading } = useResultData();\r\n  \r\n  // T√≠nh to√°n ƒëi·ªÉm s·ªë, ki·ªÉm tra h·ª£p l·ªá\r\n  const correct = safeNumber(result?.correct);\r\n  const total = safeNumber(result?.total);\r\n  const percentage = total > 0 ? Math.round((correct / total) * 100) : 0;\r\n  \r\n  // Pass current result to leaderboard\r\n  const currentResult = result ? {\r\n    score: { percentage },\r\n    correct,\r\n    total,\r\n    timeSpent: result.timeSpent\r\n  } : undefined;\r\n  \r\n  const { leaderboard, userRank, loadingStats } = useLeaderboard(quizId, currentResult);\r\n\r\n  // Debug logging\r\n  console.log(",
  "exportConstSendotpemailAsyncEmailStringOtpStringPr": "*/\r\nexport const sendOTPEmail = async (email: string, otp: string): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    // T·∫°o HTML template cho email OTP\r\n    const emailHTML = `\r\n      <!DOCTYPE html>\r\n      <html>\r\n      <head>\r\n        <meta charset=",
  "exportFunctionGenerateidReturnMathrandomtostring36": ";\r\n\r\nexport function generateId() {\r\n  return Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\n// Utility function ƒë·ªÉ ki·ªÉm tra ƒë√°p √°n ƒëi·ªÅn t·ª´\r\nexport const checkShortAnswer = (userAnswer: string, question: Question): boolean => {\r\n  if (question.type !==",
  "exportInterfaceFileprocessingresultExtractedtextSt": ";\r\n\r\nexport interface FileProcessingResult {\r\n  extractedText: string;\r\n  success: boolean;\r\n  error?: string;\r\n  metadata?: any;\r\n}\r\n\r\n/**\r\n * OCR Service - Tr√≠ch xu·∫•t text t·ª´ h√¨nh ·∫£nh\r\n */\r\nexport class OCRService {\r\n  private static worker: any = null;\r\n\r\n  static async initializeWorker() {\r\n    if (!this.worker) {\r\n      this.worker = await createWorker();\r\n      await this.worker.loadLanguage(",
  "extensionSeTuDongGuiAwaitAdddoccollectiondb": "- Extension s·∫Ω t·ª± ƒë·ªông g·ª≠i\r\n    await addDoc(collection(db,",
  "fallbackNhapUrlThuCongDetailsClassname": "/>\r\n\r\n                  {/* Fallback: Nh·∫≠p URL th·ªß c√¥ng */}\r\n                  <details className=",
  "falseLuuYMoiCauHoiPhaiCoDung4DapAnChiCo1DapAnDungI": ": false}\r\n      ]\r\n    }\r\n  ]\r\n}\r\n\r\nL∆∞u √Ω:\r\n- M·ªói c√¢u h·ªèi ph·∫£i c√≥ ƒë√∫ng 4 ƒë√°p √°n\r\n- Ch·ªâ c√≥ 1 ƒë√°p √°n ƒë√∫ng (isCorrect: true)\r\n- C√¢u h·ªèi ph·∫£i r√µ r√†ng, ch√≠nh x√°c\r\n- ƒê√°p √°n ph·∫£i h·ª£p l√Ω v√† ƒëa d·∫°ng\r\n- Tr·∫£ v·ªÅ CH√çNH X√ÅC ƒë·ªãnh d·∫°ng JSON, kh√¥ng th√™m text kh√°c\r\n`;\r\n\r\n      const models = [",
  "fastUploadCompressUploadNgayKhiChonFileKhongDoiUse": "));\r\n    };\r\n  });\r\n};\r\n\r\n/**\r\n * FAST UPLOAD: Compress + Upload ngay khi ch·ªçn file (kh√¥ng ƒë·ª£i user confirm)\r\n * D√πng cho tr·∫£i nghi·ªám instant upload\r\n */\r\nexport const fastUploadImage = async (\r\n  file: File,\r\n  options: ImageUploadOptions = {},\r\n  onProgress?: (progress: UploadProgress) => void\r\n): Promise<ImageUploadResult> => {\r\n  // Step 1: Compress si√™u nhanh v·ªõi WebP\r\n  console.time(",
  "favorites": {
    "add": "Add to favorites",
    "fetchError": "Cannot load favorite quizzes.",
    "loadError": "Cannot load quiz list. Please check your network connection or try again later.",
    "loginRequired": "You need to login to view favorite quizzes.",
    "remove": "Remove from favorites",
    "title": "Favorite Quizzes"
  },
  "fileFilenameSizeMathroundfilesize1024kbTypeFiletyp": ", {\r\n      file: file.name,\r\n      size: `${Math.round(file.size / 1024)}KB`,\r\n      type: file.type\r\n    });\r\n\r\n    // üöÄ UPLOAD NGAY - Kh√¥ng ƒë·ª£i compression\r\n    const uploadTask = uploadBytesResumable(storageRef, file, metadata);\r\n\r\n    const uploadResult = await new Promise<ImageUploadResult>((resolve, _reject) => {\r\n      uploadTask.on(",
  "fileKhongHopLeChiChapNhanAllowedextensionsjoin": "File kh√¥ng h·ª£p l·ªá! Ch·ªâ ch·∫•p nh·∫≠n: ${allowedExtensions.join(', ')}",
  "fileQuaLonKichThuocToiDa10mb": "File qu√° l·ªõn! K√≠ch th∆∞·ªõc t·ªëi ƒëa: 10MB",
  "fileQuaLonToiDaSizembmbChoType": "File qu√° l·ªõn! T·ªëi ƒëa ${sizeMB}MB cho ${type}",
  "fileQuaLonVuiLongChonFileNhoHon50mb": "File qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 50MB.",
  "filenameCreateOcrWorkerVoiConfigConstWorkerAwaitCr": ", file.name);\r\n      \r\n      // Create OCR worker v·ªõi config\r\n      const worker = await createWorker(",
  "filter": "L·ªçc",
  "filterForResourcesConstHandlequizstartQuizQuizNavi": "); // üÜï Filter for resources\r\n\r\n  const handleQuizStart = (quiz: Quiz) => {\r\n    navigate(`/quiz/${quiz.id}`);\r\n  };\r\n  \r\n  const categories = Array.from(new Set(quizzes.map(q => q.category)));\r\n  const difficulties = Array.from(new Set(quizzes.map(q => q.difficulty)));\r\n  \r\n  // Ch·ªâ hi·ªÉn th·ªã quiz ƒë√£ ƒë∆∞·ª£c duy·ªát\r\n  let filtered = quizzes.filter(q => {\r\n    const hasResources = (q as any).resources && (q as any).resources.length > 0;\r\n    \r\n    return (\r\n      q.status ===",
  "finallySetloadingfalse3XoaThongBaoHeThongConstDele": "));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 3. X√≥a th√¥ng b√°o h·ªá th·ªëng\r\n  const deleteNotifications = async () => {\r\n    if (!confirm(t(",
  "finallySetloadingfalse4DonDepDuLieuDaXoaConstClean": "));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 4. D·ªçn d·∫πp d·ªØ li·ªáu ƒë√£ x√≥a\r\n  const cleanupDeletedData = async () => {\r\n    if (!confirm(t(",
  "finallySetloadingfalseBackupDuLieuConstBackupdataA": "));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Backup d·ªØ li·ªáu\r\n  const backupData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const collections = [",
  "finallySetloadingfalseConstHandleregisterAsyncIfVa": "));\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRegister = async () => {\r\n    if (!validateForm()) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      // G·ª≠i OTP tr∆∞·ªõc\r\n      const result = await generateAndSendOTP(formData.email.trim().toLowerCase());\r\n      \r\n      if (result.success) {\r\n        // L∆∞u data t·∫°m\r\n        setPendingUserData({\r\n          email: formData.email.trim().toLowerCase(),\r\n          password: formData.password,\r\n          displayName: formData.displayName.trim()\r\n        });\r\n        \r\n        // Hi·ªán m√†n h√¨nh nh·∫≠p OTP\r\n        setShowOTPVerification(true);\r\n        toast.success(result.message);\r\n      } else {\r\n        toast.error(result.message);\r\n      }\r\n    } catch (error: any) {\r\n      console.error(",
  "finallySetloadingfalseConstOpennotificationmodalSe": "));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const openNotificationModal = () => {\r\n    setShowNotificationModal(true);\r\n  };\r\n\r\n  // 2. Backup d·ªØ li·ªáu\r\n  const backupData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const collections = [",
  "finallySetloadingfalseDonDepDuLieuDaXoaConstCleanu": "));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // D·ªçn d·∫πp d·ªØ li·ªáu ƒë√£ x√≥a\r\n  const cleanupDeletedData = async () => {\r\n    if (!confirm(t(",
  "finallySetloadingfalseLoadactivenotificationcatchc": ");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadActiveNotification().catch(console.error);\r\n  }, [user]);\r\n\r\n  // Kh√¥ng hi·ªÉn th·ªã g√¨ n·∫øu ƒëang t·∫£i ho·∫∑c kh√¥ng c√≥ th√¥ng b√°o\r\n  if (loading || !notification) return null;\r\n\r\n  // N·∫øu c√≥ l·ªói, c√≥ th·ªÉ hi·ªÉn th·ªã m·ªôt th√¥ng b√°o l·ªói ho·∫∑c kh√¥ng hi·ªÉn th·ªã g√¨\r\n  if (error) {\r\n    console.error(",
  "finallySetloadingfalseXoaThongBaoHeThongConstDelet": "));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // X√≥a th√¥ng b√°o h·ªá th·ªëng\r\n  const deleteNotifications = async () => {\r\n    if (!confirm(t(",
  "finish": "K·∫øt th√∫c",
  "firebaseAiChuaKhaDung": "Firebase AI ch∆∞a kh·∫£ d·ª•ng",
  "firebaseAiDaSanSang": "Firebase AI ƒë√£ s·∫µn s√†ng",
  "firebaseAiDangPhanTichNoiDungVaTaoCauHoiPhuHop": "Firebase AI ƒëang ph√¢n t√≠ch n·ªôi dung v√† t·∫°o c√¢u h·ªèi ph√π h·ª£p",
  "firebaseAiDangPhanTichNoiDungVaTaoCauHoiPhuHoppDiv": ">Firebase AI ƒëang ph√¢n t√≠ch n·ªôi dung v√† t·∫°o c√¢u h·ªèi ph√π h·ª£p</p>\r\n              <div className=",
  "firestoreBiChanBoiAdBlockerHoacNetworkVuiLong": "üö´ Firestore b·ªã ch·∫∑n b·ªüi ad blocker ho·∫∑c network. Vui l√≤ng:",
  "fontmediumAnswertextDungTextgreen600Textred600": "font-medium ${\r\n                    answer.text === 'ƒê√∫ng' ? 'text-green-600' : 'text-red-600'\r\n                  }",
  "forceChuyenVeTabTongQuan": "Force chuy·ªÉn v·ªÅ tab T·ªïng quan",
  "formatADurationInMinutesToAHumanreadableStringExpo": ";\r\n\r\n/**\r\n * Format a duration in minutes to a human-readable string\r\n */\r\nexport const formatDuration = (minutes: number): string => {\r\n  if (minutes < 60) {\r\n    return `${minutes} ph√∫t`;\r\n  }\r\n  const hours = Math.floor(minutes / 60);\r\n  const remainingMinutes = minutes % 60;\r\n  return `${hours}h ${remainingMinutes}p`;\r\n};\r\n\r\n/**\r\n * Format a date to Vietnamese locale\r\n */\r\nexport const formatDate = (date: Date): string => {\r\n  return new Intl.DateTimeFormat(",
  "formdatatypeAudioAudioChiChapNhanAudioFiles": ") : formData.type === 'audio' ? (\r\n                  // AUDIO - CH·ªà CH·∫§P NH·∫¨N AUDIO FILES",
  "formdatatypePdfPdfChiChapNhanPdfFiles": ") : formData.type === 'pdf' ? (\r\n                  // PDF - CH·ªà CH·∫§P NH·∫¨N PDF FILES",
  "formdatatypeVideoVideoChiChapNhanVideoFiles": ") : formData.type === 'video' ? (\r\n                  // VIDEO - CH·ªà CH·∫§P NH·∫¨N VIDEO FILES",
  "geminiProTuGoogleHieuNguCanhTotMienPhiHanChe": "Gemini Pro t·ª´ Google - Hi·ªÉu ng·ªØ c·∫£nh t·ªët, mi·ªÖn ph√≠ h·∫°n ch·∫ø",
  "generatethumbnailsTrueOnprogressDeleteImageFromSto": "],\r\n    generateThumbnails: true\r\n  }, onProgress);\r\n};\r\n\r\n/**\r\n * Delete image from Storage (c·∫£ original v√† thumbnails)\r\n */\r\nexport const deleteImage = async (filePath: string): Promise<{ success: boolean; error?: string }> => {\r\n  try {\r\n    const auth = getAuth();\r\n    if (!auth.currentUser) {\r\n      return { success: false, error:",
  "getThumbnailUrlsBasedOnOriginalFilenameExtensionTu": ";\r\n};\r\n\r\n/**\r\n * Get thumbnail URLs based on original filename\r\n * Extension t·ª± ƒë·ªông t·∫°o thumbnails v·ªõi format: {filename}_200x200.{ext}\r\n * Retry multiple times v√¨ extension c·∫ßn th·ªùi gian x·ª≠ l√Ω\r\n */\r\nconst getThumbnailUrls = async (\r\n  fileName: string\r\n): Promise<{ small?: string; medium?: string; large?: string }> => {\r\n  const thumbnailSizes = [\r\n    { key: 'small', size: '200x200', maxRetries: 8 },\r\n    { key: 'medium', size: '400x400', maxRetries: 8 },\r\n    { key: 'large', size: '800x800', maxRetries: 10 }\r\n  ];\r\n\r\n  const thumbnailUrls: any = {};\r\n  const nameWithoutExt = fileName.substring(0, fileName.lastIndexOf('.'));\r\n  const extension = fileName.split('.').pop();\r\n\r\n  // Function ƒë·ªÉ retry l·∫•y thumbnail URL\r\n  const getThumbnailWithRetry = async (\r\n    thumbnailPath: string,\r\n    maxRetries: number,\r\n    size: string\r\n  ): Promise<string | null> => {\r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        const thumbnailRef = ref(storage, thumbnailPath);\r\n        const url = await getDownloadURL(thumbnailRef);\r\n        console.log(",
  "getresourceiconresourcetypeDivContentDivClassnamef": "}>\r\n                  {getResourceIcon(resource.type)}\r\n                </div>\r\n\r\n                {/* Content */}\r\n                <div className=\"flex-1 min-w-0\">\r\n                  <div className=\"flex items-start justify-between gap-2\">\r\n                    <div className=\"flex-1\">\r\n                      <div className=\"flex items-center gap-2 mb-1\">\r\n                        <h4 className=\"font-semibold text-gray-900\">\r\n                          {index + 1}. {resource.title}\r\n                        </h4>\r\n                        {resource.required && (\r\n                          <span className=\"px-2 py-0.5 bg-red-100 text-red-700 text-xs font-medium rounded\">\r\n                            B·∫Øt bu·ªôc\r\n                          </span>\r\n                        )}\r\n                        {!resource.required && (\r\n                          <span className=\"px-2 py-0.5 bg-gray-100 text-gray-600 text-xs font-medium rounded\">\r\n                            Khuy·∫øn ngh·ªã\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                      \r\n                      {resource.description && (\r\n                        <p className=\"text-sm text-gray-600 mb-2\">\r\n                          {resource.description}\r\n                        </p>\r\n                      )}\r\n\r\n                      <div className=\"flex items-center gap-4 text-xs text-gray-500\">\r\n                        <span className=\"flex items-center gap-1\">\r\n                          {getResourceIcon(resource.type)}\r\n                          {getTypeLabel(resource.type)}\r\n                        </span>\r\n                        {resource.estimatedTime && (\r\n                          <span>‚è±Ô∏è {resource.estimatedTime} ph√∫t</span>\r\n                        )}\r\n                        {resource.whyWatch && (\r\n                          <span className=\"truncate max-w-xs\">\r\n                            üí° {resource.whyWatch}\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Actions */}\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <button\r\n                        onClick={() => handleEditResource(resource)}\r\n                        className=\"p-2 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded transition-colors\"\r\n                        title=\"S·ª≠a\"\r\n                      >\r\n                        <Edit2 className=\"w-4 h-4\" />\r\n                      </button>\r\n                      <button\r\n                        onClick={() => handleDeleteResource(resource.id)}\r\n                        className=\"p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded transition-colors\"\r\n                        title=\"X√≥a\"\r\n                      >\r\n                        <Trash2 className=\"w-4 h-4\" />\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Add/Edit Form Modal */}\r\n      {showForm && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n          <div className=\"bg-white rounded-xl shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\r\n            {/* Header */}\r\n            <div className=\"flex items-center justify-between p-6 border-b\">\r\n              <h3 className=\"text-xl font-bold text-gray-900\">\r\n                {editingId ? 'S·ª≠a t√†i li·ªáu' : 'Th√™m t√†i li·ªáu m·ªõi'}\r\n              </h3>\r\n              <button\r\n                onClick={() => setShowForm(false)}\r\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\r\n              >\r\n                <X className=\"w-5 h-5\" />\r\n              </button>\r\n            </div>\r\n\r\n            {/* Form Content */}\r\n            <div className=\"p-6 space-y-4\">\r\n              {/* Resource Type */}\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                  Lo·∫°i t√†i li·ªáu *\r\n                </label>\r\n                <div className=\"grid grid-cols-2 sm:grid-cols-5 gap-2\">\r\n                  {(['video', 'pdf', 'image', 'audio', 'link'] as ResourceType[]).map(type => (\r\n                    <button\r\n                      key={type}\r\n                      type=\"button\"\r\n                      onClick={() => setFormData(prev => ({ ...prev, type }))}\r\n                      className={",
  "getresourceiconresourcetypeGettypelabelresourcetyp": ">\r\n                          {getResourceIcon(resource.type)}\r\n                          {getTypeLabel(resource.type)}\r\n                        </span>\r\n                        {resource.estimatedTime && (\r\n                          <span>‚è±Ô∏è {resource.estimatedTime} ph√∫t</span>\r\n                        )}\r\n                        {resource.whyWatch && (\r\n                          <span className=",
  "giaiPhap": "Gi·∫£i ph√°p:",
  "giaiThich": "Gi·∫£i th√≠ch:",
  "giaiThichDapAnTuyChon": "Gi·∫£i th√≠ch ƒë√°p √°n (t√πy ch·ªçn)",
  "giaiThichMau": "Gi·∫£i th√≠ch m·∫´u",
  "giaiThichSpanSpanClassname": ">Gi·∫£i th√≠ch: </span>\r\n                        <span className=",
  "giaiThichTaiSaoDapAnADung": "Gi·∫£i th√≠ch t·∫°i sao ƒë√°p √°n A ƒë√∫ng",
  "giaiThichTaiSaoDapAnNayDung": "Gi·∫£i th√≠ch t·∫°i sao ƒë√°p √°n n√†y ƒë√∫ng",
  "giaiThichTuyChon": "Gi·∫£i th√≠ch (t√πy ch·ªçn)",
  "giaiThichstrongPClassname": ">üí° Gi·∫£i th√≠ch:</strong>\r\n                <p className=",
  "giaiTri": "Gi·∫£i tr√≠",
  "giaiTriVaVanHoa": "Gi·∫£i tr√≠ v√† vƒÉn h√≥a",
  "giayToiDa1000LabelInputType": ")} (gi√¢y, t·ªëi ƒëa 1000)\n            </label>\n            <input\n              type=",
  "goQuizXuongDraftDeSuaIsapprovedFalseBoApprovedStat": ", // G·ª° quiz xu·ªëng draft ƒë·ªÉ s·ª≠a\r\n        isApproved: false, // B·ªè approved status\r\n        canEdit: true, // Cho ph√©p creator edit\r\n        editRequestApproved: true,\r\n        lastEditRequestApproved: new Date(),\r\n        approvedBy: user?.uid,\r\n        needsReApproval: true // Flag ƒë·ªÉ bi·∫øt quiz n√†y c·∫ßn ƒë∆∞·ª£c duy·ªát l·∫°i sau khi s·ª≠a\r\n      });\r\n\r\n      // Create notification for the creator\r\n      await addDoc(collection(db,",
  "goiCallbackNgayLapTucKhongDelayOnroleselectedroleC": ");\r\n      \r\n      // G·ªçi callback ngay l·∫≠p t·ª©c, kh√¥ng delay\r\n      onRoleSelected(role);\r\n      \r\n    } catch (error: any) {\r\n      console.error('Error updating user role:', error);\r\n      \r\n      // N·∫øu Firestore fail, v·∫´n l∆∞u role v√†o localStorage v√† Redux\r\n      console.warn('Firestore update failed, using localStorage fallback');\r\n      \r\n      // C·∫≠p nh·∫≠t Redux store\r\n      dispatch(setRole(role));\r\n      console.log('Role updated in Redux (fallback):', role);\r\n      \r\n      // L∆∞u v√†o localStorage \r\n      localStorage.setItem(",
  "goiCallbackNgayLapTucKhongDelayOnroleselectedroleH": ");\r\n      \r\n      // G·ªçi callback ngay l·∫≠p t·ª©c, kh√¥ng delay\r\n      onRoleSelected(role);\r\n      \r\n      // Hi·ªÉn th·ªã th√¥ng b√°o nh·∫π nh√†ng\r\n      toast.info('Vai tr√≤ ƒë√£ ƒë∆∞·ª£c ch·ªçn. D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c ƒë·ªìng b·ªô khi k·∫øt n·ªëi ·ªïn ƒë·ªãnh.');\r\n      \r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n      <div className=\"bg-white rounded-xl p-8 max-w-md w-full mx-4 shadow-2xl\">\r\n        <div className=\"text-center mb-6\">\r\n          <div className=\"w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n            <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\r\n            </svg>\r\n          </div>\r\n          <h2 className=\"text-2xl font-bold text-gray-800 mb-2\">Ch·ªçn vai tr√≤ c·ªßa b·∫°n</h2>\r\n          <p className=\"text-gray-600\">H√£y ch·ªçn vai tr√≤ ph√π h·ª£p ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng Quiz Trivia</p>\r\n        </div>\r\n\r\n        <div className=\"space-y-4\">\r\n          {/* User Role */}\r\n          <div \r\n            className={",
  "goiYChoLearnerTimestampsCreatedatDateUpdatedatDate": "- g·ª£i √Ω cho learner\r\n  \r\n  // Timestamps\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\n/**\r\n * Ti·∫øn ƒë·ªô xem t√†i li·ªáu c·ªßa c√° nh√¢n\r\n */\r\nexport interface ResourceViewProgress {\r\n  resourceId: string;\r\n  \r\n  // Completion status\r\n  completed: boolean;\r\n  completedAt?: Date;\r\n  \r\n  // Video tracking\r\n  secondsWatched?: number;\r\n  watchPercent?: number; // 0-100\r\n  lastWatchPosition?: number; // Last video position (seconds)\r\n  playbackSpeeds?: number[]; // T·ªëc ƒë·ªô ph√°t (ƒë·ªÉ detect >2x)\r\n  \r\n  // PDF tracking\r\n  pagesViewed?: number[]; // Array of page numbers viewed\r\n  pageViewTimes?: Record<number, number>; // Page number ‚Üí time spent (seconds)\r\n  \r\n  // Image/Slides tracking\r\n  imagesViewed?: number[]; // Array of image indices viewed\r\n  imageViewTimes?: Record<number, number>; // Image index ‚Üí time spent\r\n  \r\n  // Link tracking\r\n  confirmed?: boolean; // ƒê√£ tick",
  "gpt4VaGpt35TuOpenaiChatLuongCaoDaDangCauHoi": "GPT-4 v√† GPT-3.5 t·ª´ OpenAI - Ch·∫•t l∆∞·ª£ng cao, ƒëa d·∫°ng c√¢u h·ªèi",
  "guiDanhGia": "G·ª≠i ƒë√°nh gi√°",
  "guiDanhGiaThanhCong": "G·ª≠i ƒë√°nh gi√° th√†nh c√¥ng!",
  "guiEmailDatLaiMatKhau": "G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
  "guiLaiMaXacThuc": "G·ª≠i l·∫°i m√£ x√°c th·ª±c",
  "guiOtpQuaFirestoreTriggerEmailExtensionExtensionSe": ");\r\n};\r\n\r\n/**\r\n * G·ª≠i OTP qua Firestore Trigger Email Extension\r\n * Extension s·∫Ω t·ª± ƒë·ªông g·ª≠i email khi c√≥ document m·ªõi trong collection",
  "h3NutGuiThongBaoDivClassname": ")}\r\n      </h3>\r\n      \r\n      {/* N√∫t g·ª≠i th√¥ng b√°o */}\r\n      <div className=",
  "haiLong": "H√†i l√≤ng",
  "hanhDongNhanh": "H√†nh ƒë·ªông nhanh",
  "hanhDongNhanhh2PClassname": ">H√†nh ƒë·ªông nhanh</h2>\r\n            <p className=",
  "hayBatDauTaoQuizDauTienCuaBan": "H√£y b·∫Øt ƒë·∫ßu t·∫°o quiz ƒë·∫ßu ti√™n c·ªßa b·∫°n!",
  "hayBatDauTaoQuizDauTienCuaBanpLinkTo": ">H√£y b·∫Øt ƒë·∫ßu t·∫°o quiz ƒë·∫ßu ti√™n c·ªßa b·∫°n!</p>\r\n              <Link to=",
  "hayChonVaiTroPhuHopDeBatDauSuDungQuizTrivia": "H√£y ch·ªçn vai tr√≤ ph√π h·ª£p ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng Quiz Trivia",
  "hayChonVaiTroPhuHopDeBatDauSuDungQuizTriviapDivDiv": ">H√£y ch·ªçn vai tr√≤ ph√π h·ª£p ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng Quiz Trivia</p>\r\n        </div>\r\n\r\n        <div className=",
  "hayLaNguoiDauTienDanhGiaQuizNay": "H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n ƒë√°nh gi√° quiz n√†y!",
  "hayLaNguoiDauTienDanhGiaQuizNaypDivReturnDivClassn": ">H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n ƒë√°nh gi√° quiz n√†y!</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=",
  "hayTaoQuizDauTienCuaBanDeBatDau": "H√£y t·∫°o quiz ƒë·∫ßu ti√™n c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu!",
  "hayThemQuizVaoDanhSachYeuThichDeDeDangTruyCap": "H√£y th√™m quiz v√†o danh s√°ch y√™u th√≠ch ƒë·ªÉ d·ªÖ d√†ng truy c·∫≠p!",
  "hayTroThanhNguoiDauTienDanhGiaQuizNayChiaSeTraiNgh": ">\r\n                      H√£y tr·ªü th√†nh ng∆∞·ªùi ƒë·∫ßu ti√™n ƒë√°nh gi√° quiz n√†y! \r\n                      Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n ƒë·ªÉ gi√∫p nh·ªØng ng∆∞·ªùi kh√°c.\r\n                    </p>\r\n                    <button\r\n                      onClick={() => setShowReviewForm(true)}\r\n                      className=",
  "heDieuHanh": "H·ªá ƒëi·ªÅu h√†nh",
  "heQuanTriCoSoDuLieu": "H·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu",
  "headerCauHoiDivClassname": ">\r\n      {/* Header c√¢u h·ªèi */}\r\n      <div className=",
  "headerGiongAdminDivClassname": ">\r\n        {/* Header gi·ªëng Admin */}\r\n        <div className=",
  "headerVoiTimerVaProgressDivClassname": ">\n      {/* Header v·ªõi Timer v√† Progress */}\n      <div className=",
  "helperDeLayMauBadgeTheoLoaiTaiLieuConstGetresource": "/>;\n    }\n  };\n\n  // Helper ƒë·ªÉ l·∫•y m√†u badge theo lo·∫°i t√†i li·ªáu\n  const getResourceBadgeColor = (type: string) => {\n    switch (type) {\n      case",
  "helperEpKieuAnToanChoSoConstSafenumberValAnyFallba": ")}`;\r\n};\r\n\r\n// Helper √©p ki·ªÉu an to√†n cho s·ªë\r\nconst safeNumber = (val: any, fallback = 0) => {\r\n  const n = Number(val);\r\n  return isNaN(n) ? fallback : n;\r\n};\r\n\r\nexport const ResultPage: React.FC = () => {\r\n  const { attemptId } = useParams<{ attemptId: string }>();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { quizzes } = useSelector((state: RootState) => state.quiz);\r\n  const { user } = useSelector((state: RootState) => state.auth);\r\n  \r\n  const [result, setResult] = useState<ResultState | null>(location.state as ResultState || null);\r\n  const [quizId, setQuizId] = useState<string | null>(null);\r\n  const [quiz, setQuiz] = useState<Quiz | null>(null);\r\n  const [showAnswers, setShowAnswers] = useState(false);\r\n  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);\r\n  const [userRank, setUserRank] = useState<number | null>(null);\r\n  const [loadingStats, setLoadingStats] = useState(true);\r\n\r\n  useEffect(() => {\r\n    console.log(",
  "helperFunctionDeXuLyDateTuFirestoreConstParsefires": ");\r\n\r\n  // Helper function ƒë·ªÉ x·ª≠ l√Ω date t·ª´ Firestore\r\n  const parseFirestoreDate = (dateValue: any): Date => {\r\n    if (!dateValue) {\r\n      return new Date();\r\n    }\r\n    \r\n    // N·∫øu l√† Firestore Timestamp\r\n    if (dateValue && typeof dateValue.toDate ===",
  "hien": "Hi·ªán",
  "hienQuizDaHoanThanh": "Hi·ªán quiz ƒë√£ ho√†n th√†nh",
  "hienQuizDaHoanThanhLabelDivViewModeToggleDivClassn": "/>\r\n                Hi·ªán quiz ƒë√£ ho√†n th√†nh\r\n              </label>\r\n            </div>\r\n\r\n            {/* View Mode Toggle */}\r\n            <div className=",
  "hienTaiChuaCoNoiDungNao": "Hi·ªán t·∫°i ch∆∞a c√≥ n·ªôi dung n√†o.",
  "hienThi": "Hi·ªÉn th·ªã:",
  "hienThiFilteredcreatorslengthTrongTongCreatorsleng": ">\r\n              Hi·ªÉn th·ªã {filteredCreators.length} trong t·ªïng {creators.length} creator\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Creators Table */}\r\n        <div className=",
  "hienThispanDivClassname": ">Hi·ªÉn th·ªã:</span>\r\n              <div className=",
  "hienThongKe": "Hi·ªán th·ªëng k√™",
  "hinhAnhOcr": "üñºÔ∏è H√¨nh ·∫£nh (OCR):",
  "hinhAnhOcrstrongDivClassname": ">üñºÔ∏è H√¨nh ·∫£nh (OCR):</strong>\r\n                  <div className=",
  "hoSo": "H·ªì s∆°",
  "hoTroAnhJpgPngPdfWordDocDocxTextTxt": "H·ªó tr·ª£: ·∫¢nh (JPG, PNG), PDF, Word (DOC, DOCX), Text (TXT)",
  "hoTroAnhJpgPngPdfWordDocDocxTextTxtSpanSpanClassna": ">\r\n                  H·ªó tr·ª£: ·∫¢nh (JPG, PNG), PDF, Word (DOC, DOCX), Text (TXT)\r\n                </span>\r\n                <span className=",
  "hoTroDocFileAnhPdfWordText": "H·ªó tr·ª£ ƒë·ªçc file ·∫£nh, PDF, Word, Text",
  "hoTroYoutubeGoogleDriveHoacBatKyUrlNao": "üí° H·ªó tr·ª£: YouTube, Google Drive, ho·∫∑c b·∫•t k·ª≥ URL n√†o",
  "hoTroYoutubeGoogleDriveHoacBatKyUrlNaoPDivFormdata": ">\r\n                      üí° H·ªó tr·ª£: YouTube, Google Drive, ho·∫∑c b·∫•t k·ª≥ URL n√†o\r\n                    </p>\r\n                  </div>\r\n                ) : formData.type ===",
  "hoac": "ho·∫∑c",
  "hoacClickBenNgoaiDeDong": "ho·∫∑c click b√™n ngo√†i ƒë·ªÉ ƒë√≥ng",
  "hoacClickBenNgoaiDeDongCuonChuotDeZoomClickVaKeoDe": "ho·∫∑c click b√™n ngo√†i ƒë·ªÉ ƒë√≥ng\r\n          ‚Ä¢ Cu·ªôn chu·ªôt ƒë·ªÉ zoom ‚Ä¢ Click v√† k√©o ƒë·ªÉ di chuy·ªÉn",
  "hoacClickBenNgoaiDeDongSuDungToolbarPdfDeZoomTimKi": "ho·∫∑c click b√™n ngo√†i ƒë·ªÉ ƒë√≥ng\r\n          ‚Ä¢ S·ª≠ d·ª•ng toolbar PDF ƒë·ªÉ zoom, t√¨m ki·∫øm, in ·∫•n",
  "hoacNhapUrlAvatarThuCong": "Ho·∫∑c nh·∫≠p URL avatar th·ªß c√¥ng",
  "hoacNhapUrlAvatarThuCongSummaryInputType": ">\r\n                      Ho·∫∑c nh·∫≠p URL avatar th·ªß c√¥ng\r\n                    </summary>\r\n                    <input\r\n                      type=",
  "hoacQuestionacceptedanswersjoin": "> (ho·∫∑c: {question.acceptedAnswers.join(",
  "hoacdivInputType": ">ho·∫∑c</div>\r\n                    <input\r\n                      type=",
  "hoanHao": "üíØ Ho√†n h·∫£o",
  "hoanThanh": "‚úì Ho√†n th√†nh",
  "hoanThanh10Quiz": "Ho√†n th√†nh 10 quiz",
  "hoanThanh50Quiz": "Ho√†n th√†nh 50 quiz",
  "hoanThanh5QuizLienTiep": "Ho√†n th√†nh 5 quiz li√™n ti·∫øp",
  "hoanThanhQuizDauTien": "Ho√†n th√†nh quiz ƒë·∫ßu ti√™n",
  "hoanThanhQuizTrongThoiGianKyLuc": "Ho√†n th√†nh quiz trong th·ªùi gian k·ª∑ l·ª•c",
  "hoanThanhSpanResourceBadgeHasresourcesSpanClassnam": ">\n                    ‚úì Ho√†n th√†nh\n                  </span>\n                )}\n                {/* üÜï Resource Badge */}\n                {hasResources && (\n                  <span className=",
  "hoatDong": "Ho·∫°t ƒë·ªông",
  "hoatDongCuoi": "Ho·∫°t ƒë·ªông cu·ªëi",
  "hoatDongCuoiThThClassname": ">\r\n                      Ho·∫°t ƒë·ªông cu·ªëi\r\n                    </th>\r\n                    <th className=",
  "hocVienCoTheLamQuizNhieuLanDeCaiThienDiem": "H·ªçc vi√™n c√≥ th·ªÉ l√†m quiz nhi·ªÅu l·∫ßn ƒë·ªÉ c·∫£i thi·ªán ƒëi·ªÉm",
  "hocVienCoTheLamQuizNhieuLanDeCaiThienDiemPLabelDiv": ">\r\n                  H·ªçc vi√™n c√≥ th·ªÉ l√†m quiz nhi·ªÅu l·∫ßn ƒë·ªÉ c·∫£i thi·ªán ƒëi·ªÉm\r\n                </p>\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Preview */}\r\n      <div className=",
  "hocVienPhaiXemTaiLieuNayTruocKhiLamBai": "H·ªçc vi√™n ph·∫£i xem t√†i li·ªáu n√†y tr∆∞·ªõc khi l√†m b√†i",
  "hocVienPhaiXemTaiLieuNayTruocKhiLamBaiPLabelDivWhy": ">\r\n                    H·ªçc vi√™n ph·∫£i xem t√†i li·ªáu n√†y tr∆∞·ªõc khi l√†m b√†i\r\n                  </p>\r\n                </label>\r\n              </div>\r\n\r\n              {/* Why Watch */}\r\n              <div>\r\n                <label className=",
  "hocVienPhaiXemTruocKhiLamBai": "h·ªçc vi√™n ph·∫£i xem tr∆∞·ªõc khi l√†m b√†i!",
  "homNayTimestring": "H√¥m nay ${timeString}",
  "homQuaTimestring": "H√¥m qua ${timeString}",
  "hour12FalseIfIstodayReturnHomNayTimestringElseIfIs": ",\r\n    hour12: false\r\n  });\r\n  \r\n  if (isToday) {\r\n    return `H√¥m nay ${timeString}`;\r\n  } else if (isYesterday) {\r\n    return `H√¥m qua ${timeString}`;\r\n  } else {\r\n    return date.toLocaleString(",
  "html5BoSungNhieuTheSemanticNhu": "HTML5 b·ªï sung nhi·ªÅu th·∫ª semantic nh∆∞",
  "huy": "H·ªßy",
  "huyButtonButtonOnclickhandlesaveresourceDisabledup": ">\r\n                H·ªßy\r\n              </button>\r\n              <button\r\n                onClick={handleSaveResource}\r\n                disabled={uploading}\r\n                className=",
  "huyenThoaiQuiz": "üëë Huy·ªÅn tho·∫°i Quiz",
  "iconDivDivDivConstGetstatusbadgeStatusStringConstS": "}>\r\n          {icon}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    const styles = {\r\n      active: 'bg-green-100 text-green-800',\r\n      suspended: 'bg-yellow-100 text-yellow-800',\r\n      banned: 'bg-red-100 text-red-800'\r\n    };\r\n\r\n    const labels = {\r\n      active: 'Ho·∫°t ƒë·ªông',\r\n      suspended: 'T·∫°m kh√≥a',\r\n      banned: 'B·ªã c·∫•m'\r\n    };\r\n\r\n    return (\r\n      <span className={",
  "idDocidDataDemSoQuizTrongDanhMucNayConstQuizzesref": ", { id: doc.id, ...data });\r\n        \r\n        // ƒê·∫øm s·ªë quiz trong danh m·ª•c n√†y\r\n        const quizzesRef = collection(db,",
  "idx0ThiDapAnDungLaTrueNguocLaiFalseOnchangeQuestio": "(idx=0) th√¨ ƒë√°p √°n ƒë√∫ng l√† true, ng∆∞·ª£c l·∫°i false  \r\n      onChange({\r\n        ...question,\r\n        answers: question.answers.map((a, i) => ({ \r\n          ...a, \r\n          isCorrect: i === 0 ? idx === 0 : idx === 1 \r\n        })),\r\n      });\r\n    } else {\r\n      // V·ªõi Multiple Choice: ch·ªâ c√≥ 1 ƒë√°p √°n ƒë√∫ng\r\n      onChange({\r\n        ...question,\r\n        answers: question.answers.map((a, i) => ({ ...a, isCorrect: i === idx })),\r\n      });\r\n    }\r\n  };\r\n\r\n  // X·ª≠ l√Ω ƒëi·ªÅn t·ª´\r\n  const handleCorrectAnswerChange = (value: string) => {\r\n    // T·ª± ƒë·ªông t·∫°o acceptedAnswers t·ª´ correctAnswer\r\n    const accepted = [\r\n      value, // Nguy√™n vƒÉn\r\n      value.toLowerCase(), // Ch·ªØ th∆∞·ªùng\r\n      value.toUpperCase(), // Ch·ªØ hoa\r\n      value.charAt(0).toUpperCase() + value.slice(1).toLowerCase(), // Capitalize\r\n    ].filter((v, i, arr) => arr.indexOf(v) === i && v.trim() !==",
  "ifAllowedtypesincludesfiletypeToasterrorchiChapNha": "];\r\n    if (!allowedTypes.includes(file.type)) {\r\n      toast.error(`Ch·ªâ ch·∫•p nh·∫≠n: ${allowedTypes.map(t => t.split(",
  "ifFulltexttrimlength0ThrowNewErrornoTextFoundInPdf": ";\r\n        }\r\n        \r\n        if (fullText.trim().length === 0) {\r\n          throw new Error('No text found in PDF');\r\n        }\r\n        \r\n        return {\r\n          extractedText: fullText.trim(),\r\n          questions: [],\r\n          success: true\r\n        };\r\n        \r\n      } catch (pdfError) {\r\n        console.log('Real PDF processing failed, using fallback:', pdfError);\r\n        \r\n        // Fallback v·ªõi n·ªôi dung mock th√¥ng minh h∆°n\r\n        const mockText =",
  "ifSupportedtypesimagessomeextFilenameendswithextFa": ";\r\n      \r\n      if (supportedTypes.images.some(ext => fileName.endsWith(ext))) {\r\n        fallbackText = `\r\nN·ªôi dung m·∫´u t·ª´ ·∫£nh: ${file.name}\r\n\r\nJavaScript c∆° b·∫£n:\r\n- Bi·∫øn (variables): let, const, var\r\n- H√†m (functions): function declaration, arrow functions\r\n- V√≤ng l·∫∑p (loops): for, while, forEach\r\n- ƒêi·ªÅu ki·ªán (conditions): if, else, switch\r\n- M·∫£ng (arrays): [], push(), pop(), map(), filter()\r\n\r\nReact fundamentals:\r\n- Components: functional, class components\r\n- Props: passing data between components\r\n- State: useState hook, setState\r\n- Events: onClick, onChange, onSubmit\r\n- Lifecycle: useEffect hook\r\n\r\nB·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng n·ªôi dung n√†y ƒë·ªÉ test t√≠nh nƒÉng AI.\r\n        `.trim();\r\n      } else {\r\n        fallbackText = `\r\nN·ªôi dung m·∫´u t·ª´ file: ${file.name}\r\n\r\nWeb Development Topics:\r\n- HTML: structure, elements, attributes\r\n- CSS: styling, layout, responsive design\r\n- JavaScript: programming logic, DOM manipulation\r\n- Frameworks: React, Vue, Angular\r\n- Backend: Node.js, Express, databases\r\n\r\nB·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a n·ªôi dung n√†y v√† s·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o c√¢u h·ªèi.\r\n        `.trim();\r\n      }\r\n      \r\n      setExtractedText(fallbackText);\r\n      setCurrentStep(",
  "ifThresholdminviewedcountConstViewedcountProgressi": ":\r\n      if (threshold.minViewedCount) {\r\n        const viewedCount = progress.imagesViewed?.length || 0;\r\n        if (viewedCount < threshold.minViewedCount) {\r\n          return {\r\n            completed: false,\r\n            reason: `C·∫ßn xem t·ªëi thi·ªÉu ${threshold.minViewedCount} ·∫£nh/slide`\r\n          };\r\n        }\r\n\r\n        // Check min view time per image\r\n        if (threshold.minViewTime && progress.imageViewTimes) {\r\n          const validImages = Object.values(progress.imageViewTimes).filter(\r\n            time => time >= (threshold.minViewTime || 0)\r\n          ).length;\r\n          \r\n          if (validImages < threshold.minViewedCount) {\r\n            return {\r\n              completed: false,\r\n              reason: `C·∫ßn xem m·ªói ·∫£nh √≠t nh·∫•t ${threshold.minViewTime}s`\r\n            };\r\n          }\r\n        }\r\n      }\r\n      return { completed: true };\r\n\r\n    case",
  "imageChiChapNhanImageFiles": ") : (\r\n                  // IMAGE - CH·ªà CH·∫§P NH·∫¨N IMAGE FILES",
  "importCacComponentsConImportGamemodeselectorFrom": ";\r\n\r\n// Import c√°c components con\r\nimport GameModeSelector from",
  "importCauHoi": "‚úÖ Import c√¢u h·ªèi",
  "importCauHoiButtonDivDivDefaultReturnNullReturnBut": ">\r\n                ‚úÖ Import c√¢u h·ªèi\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        onClick={() => setIsOpen(true)}\r\n        className=",
  "importCheckshortanswerFunctionHoacTinhToanTaiDayCo": ": {\r\n                // Import checkShortAnswer function ho·∫∑c t√≠nh to√°n t·∫°i ƒë√¢y\r\n                const normalizeAnswer = (answer: string) => \r\n                  answer.trim().toLowerCase().replace(/\\s+/g,",
  "initializeFirebaseChi1LanDuyNhatConstAppGetappslen": ";\r\n// Initialize Firebase ch·ªâ 1 l·∫ßn duy nh·∫•t\r\nconst app = getApps().length === 0 ? initializeApp(firebaseConfig) : getApp();\r\n\r\n// Initialize Firebase services\r\nexport const auth = getAuth(app);\r\nsetPersistence(auth, browserLocalPersistence)\r\n  .catch((error) => {\r\n    console.error(",
  "initializeFirestoreConstDbGetfirestoreSecretKeyDeH": ";\r\n\r\n// Initialize Firestore\r\nconst db = getFirestore();\r\n\r\n// Secret key ƒë·ªÉ hash OTP (trong production n√™n l∆∞u trong env)\r\nconst OTP_SECRET = import.meta.env.VITE_OTP_SECRET ||",
  "initialstateReducersQuizLoadingStatesSetloadingSta": ",\r\n  initialState,\r\n  reducers: {\r\n    // Quiz loading states\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.isLoading = action.payload;\r\n    },\r\n    setError: (state, action: PayloadAction<string | null>) => {\r\n      state.error = action.payload;\r\n    },\r\n    \r\n    // Quiz data management\r\n    setQuizzes: (state, action: PayloadAction<Quiz[]>) => {\r\n      state.quizzes = action.payload;\r\n    },\r\n    addQuiz: (state, action: PayloadAction<Quiz>) => {\r\n      state.quizzes.unshift(action.payload);\r\n    },\r\n    updateQuiz: (state, action: PayloadAction<Quiz>) => {\r\n      const index = state.quizzes.findIndex(q => q.id === action.payload.id);\r\n      if (index !== -1) {\r\n        state.quizzes[index] = action.payload;\r\n      }\r\n    },\r\n    removeQuiz: (state, action: PayloadAction<string>) => {\r\n      state.quizzes = state.quizzes.filter(q => q.id !== action.payload);\r\n    },\r\n    \r\n    // Current quiz management\r\n    setCurrentQuiz: (state, action: PayloadAction<Quiz | null>) => {\r\n      state.currentQuiz = action.payload;\r\n      if (action.payload) {\r\n        state.currentQuestionIndex = 0;\r\n        state.userAnswers = {};\r\n        state.totalTime = action.payload.duration * 60; // T·ªïng th·ªùi gian (gi√¢y)\r\n        state.timeLeft = state.totalTime;\r\n        state.quizStartTime = Date.now();\r\n        state.isTimeWarning = false;\r\n      } else {\r\n        state.currentQuestionIndex = 0;\r\n        state.userAnswers = {};\r\n        state.timeLeft = 0;\r\n        state.quizStartTime = null;\r\n        state.totalTime = 0;\r\n        state.isTimeWarning = false;\r\n      }\r\n    },\r\n\r\n    // C·∫≠p nh·∫≠t timeLeft d·ª±a tr√™n th·ªùi gian th·ª±c t·∫ø ƒë√£ tr√¥i qua\r\n    updateTimeLeft: (state) => {\r\n      if (state.quizStartTime && state.totalTime > 0) {\r\n        const elapsed = Math.floor((Date.now() - state.quizStartTime) / 1000);\r\n        const newTimeLeft = Math.max(state.totalTime - elapsed, 0);\r\n        state.timeLeft = newTimeLeft;\r\n        // C·∫£nh b√°o khi c√≤n <= 10% t·ªïng th·ªùi gian\r\n        state.isTimeWarning = newTimeLeft <= Math.ceil(state.totalTime * 0.1);\r\n      }\r\n    },\r\n\r\n    // Gi·ªØ decrementTime cho tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát\r\n    decrementTime: (state) => {\r\n      if (state.timeLeft > 0) {\r\n        state.timeLeft -= 1;\r\n        // C·∫£nh b√°o khi c√≤n <= 10% t·ªïng th·ªùi gian\r\n        state.isTimeWarning = state.timeLeft <= Math.ceil(state.totalTime * 0.1);\r\n      }\r\n    },\r\n    \r\n    // Answer management\r\n    setUserAnswer: (state, action: PayloadAction<{ questionId: string; answerId: string }>) => {\r\n      state.userAnswers[action.payload.questionId] = action.payload.answerId;\r\n    },\r\n    clearUserAnswers: (state) => {\r\n      state.userAnswers = {};\r\n    },\r\n    \r\n    // Timer management\r\n    setTimeLeft: (state, action: PayloadAction<number>) => {\r\n      state.timeLeft = action.payload;\r\n    },\r\n    \r\n    // Results management\r\n    setUserResults: (state, action: PayloadAction<QuizResult[]>) => {\r\n      state.userResults = action.payload;\r\n    },\r\n    addUserResult: (state, action: PayloadAction<QuizResult>) => {\r\n      state.userResults.unshift(action.payload);\r\n    },\r\n    \r\n    // Filters\r\n    setFilters: (state, action: PayloadAction<QuizFilters>) => {\r\n      state.filters = action.payload;\r\n    },\r\n    updateFilter: (state, action: PayloadAction<Partial<QuizFilters>>) => {\r\n      state.filters = { ...state.filters, ...action.payload };\r\n    },\r\n    clearFilters: (state) => {\r\n      state.filters = {};\r\n    },\r\n    \r\n    // Reset quiz state\r\n    resetQuizState: (state) => {\r\n      state.currentQuiz = null;\r\n      state.currentQuestionIndex = 0;\r\n      state.userAnswers = {};\r\n      state.timeLeft = 0;\r\n      state.quizStartTime = null;\r\n      state.totalTime = 0;\r\n      state.isTimeWarning = false;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchQuizzes.pending, (state) => {\r\n        state.loading = true;\r\n        state.isLoading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchQuizzes.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.isLoading = false;\r\n        // Now action.payload is just the quizzes array\r\n        state.quizzes = action.payload;\r\n      })\r\n      .addCase(fetchQuizzes.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.isLoading = false;\r\n        state.error = action.error.message ||",
  "interfaceAdminprotectedroutepropsChildrenReactreac": ";\r\n\r\ninterface AdminProtectedRouteProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst AdminProtectedRoute: React.FC<AdminProtectedRouteProps> = ({ children }) => {\r\n  const { user, isAuthenticated } = useSelector((state: RootState) => state.auth);\r\n  const { t } = useTranslation();\r\n\r\n  // Ki·ªÉm tra xem user ƒë√£ ƒëƒÉng nh·∫≠p v√† c√≥ role admin kh√¥ng\r\n  if (!isAuthenticated || !user) {\r\n    return <Navigate to=",
  "interfaceImageuploaderpropsOnuploadsuccessResultIm": ";\r\n\r\ninterface ImageUploaderProps {\r\n  onUploadSuccess: (result: ImageUploadResult) => void;\r\n  onUploadError?: (error: string) => void;\r\n  options?: ImageUploadOptions;\r\n  previewUrl?: string;\r\n  className?: string;\r\n  label?: string;\r\n  showThumbnails?: boolean;\r\n  compressBeforeUpload?: boolean;\r\n  instantUpload?: boolean; // üöÄ Upload ngay 1-3s (kh√¥ng compress, kh√¥ng ƒë·ª£i)\r\n  ultraFast?: boolean; // ‚ö° Upload nhanh nh·∫•t c√≥ th·ªÉ\r\n}\r\n\r\nexport const ImageUploader: React.FC<ImageUploaderProps> = ({\r\n  onUploadSuccess,\r\n  onUploadError,\r\n  options = {},\r\n  previewUrl,\r\n  className =",
  "interfaceQuestioneditorpropsQuestionQuestionOnchan": ";\ninterface QuestionEditorProps {\r\n  question: Question;\r\n  onChange: (q: Question) => void;\r\n  onDelete: () => void;\r\n}\r\n\r\nconst QuestionEditor: React.FC<QuestionEditorProps> = ({ question, onChange, onDelete }) => {\n  const { t } = useTranslation();\n\r\n  \r\n  // X·ª≠ l√Ω thay ƒë·ªïi lo·∫°i c√¢u h·ªèi\r\n  const handleTypeChange = (newType: Question[",
  "interfaceQuickactionspropsOnrefreshdataVoidStatsTo": ";\r\n\r\ninterface QuickActionsProps {\r\n  onRefreshData: () => void;\r\n  stats: {\r\n    totalUsers: number;\r\n    pendingQuizzes: number;\r\n    approvedQuizzes: number;\r\n    totalCategories: number;\r\n  };\r\n}\r\n\r\n// ƒê·ªïi t√™n component\r\nconst QuickActionsSimple: React.FC<QuickActionsProps> = ({ stats }) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const { t } = useTranslation();\r\n  const [showNotificationModal, setShowNotificationModal] = useState(false);\r\n  const [notificationData, setNotificationData] = useState({\r\n    message:",
  "interfaceQuizpreviewpropsQuizQuizNullIsopenBoolean": ";\r\n\r\ninterface QuizPreviewProps {\r\n  quiz: Quiz | null;\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\n// Modal component v·ªõi kh·∫£ nƒÉng cu·ªôn t·ªët h∆°n\r\nconst Modal: React.FC<{ isOpen: boolean; onClose: () => void; children: React.ReactNode }> = ({ isOpen, children }) => {\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=",
  "isactiveBooleanConstNotificationbannerReactfcConst": ";\r\n  isActive: boolean;\r\n}\r\n\r\nconst NotificationBanner: React.FC = () => {\r\n  const [notification, setNotification] = useState<Notification | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { user } = useSelector((state: RootState) => state.auth);\r\n\r\n  // S·ª≠a l·∫°i useEffect ƒë·ªÉ x·ª≠ l√Ω l·ªói ƒë√∫ng c√°ch\r\n  useEffect(() => {\r\n    // H√†m n√†y ƒë∆∞·ª£c khai b√°o trong useEffect ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ v·ªõi React Hooks\r\n    const loadActiveNotification = async () => {\r\n      if (!user) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setLoading(true);\r\n        const notificationsRef = collection(db,",
  "iscorrectCorrectIncorrectSpanDivHienThiCauTraLoiCu": "}>\r\n                    {isCorrect ? '‚úì Correct' : '‚úó Incorrect'}\r\n                  </span>\r\n                </div>\r\n\r\n                {/* Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi c·ªßa user */}\r\n                <div className=\"mb-3 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\r\n                  <span className=\"font-medium text-blue-800\">C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n: </span>\r\n                  <span className=\"text-blue-700\">{userAnswerText}</span>\r\n                </div>\r\n                \r\n                {/* Hi·ªÉn th·ªã ƒë√°p √°n cho multiple choice, image v√† boolean */}\r\n                {(question.type === 'multiple' || question.type === 'image' || question.type === 'boolean') && (\r\n                  <div className=\"space-y-2\">\r\n                    {question.answers.map(answer => (\r\n                      <div\r\n                        key={answer.id}\r\n                        className={",
  "iscorrectFalseQuestiontypeImageImageurlOnchangeQue": ": '',\r\n        isCorrect: false,\r\n        ...(question.type === 'image' && { imageUrl: '' }),\r\n      };\r\n      onChange({\r\n        ...question,\r\n        answers: [...question.answers, newAnswer],\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleRemoveAnswer = (idx: number) => {\r\n    if (question.type === 'boolean') return; // Boolean kh√¥ng d√πng answers array\r\n    if ((question.type === 'multiple' || question.type === 'image') && question.answers.length <= 2) return; // T·ªëi thi·ªÉu 2 ƒë√°p √°n\r\n    \r\n    onChange({\r\n      ...question,\r\n      answers: question.answers.filter((_, i) => i !== idx),\r\n    });\r\n  };\r\n\r\n  const handleSetCorrect = (idx: number) => {\r\n    if (question.type === 'boolean') {\r\n      // V·ªõi Boolean: n·∫øu ch·ªçn \"ƒê√∫ng\" (idx=0) th√¨ ƒë√°p √°n ƒë√∫ng l√† true, ng∆∞·ª£c l·∫°i false  \r\n      onChange({\r\n        ...question,\r\n        answers: question.answers.map((a, i) => ({ \r\n          ...a, \r\n          isCorrect: i === 0 ? idx === 0 : idx === 1 \r\n        })),\r\n      });\r\n    } else {\r\n      // V·ªõi Multiple Choice: ch·ªâ c√≥ 1 ƒë√°p √°n ƒë√∫ng\r\n      onChange({\r\n        ...question,\r\n        answers: question.answers.map((a, i) => ({ ...a, isCorrect: i === idx })),\r\n      });\r\n    }\r\n  };\r\n\r\n  // X·ª≠ l√Ω ƒëi·ªÅn t·ª´\r\n  const handleCorrectAnswerChange = (value: string) => {\r\n    // T·ª± ƒë·ªông t·∫°o acceptedAnswers t·ª´ correctAnswer\r\n    const accepted = [\r\n      value, // Nguy√™n vƒÉn\r\n      value.toLowerCase(), // Ch·ªØ th∆∞·ªùng\r\n      value.toUpperCase(), // Ch·ªØ hoa\r\n      value.charAt(0).toUpperCase() + value.slice(1).toLowerCase(), // Capitalize\r\n    ].filter((v, i, arr) => arr.indexOf(v) === i && v.trim() !== ''); // Lo·∫°i b·ªè tr√πng l·∫∑p v√† r·ªóng\r\n    \r\n    onChange({\r\n      ...question,\r\n      correctAnswer: value,\r\n      acceptedAnswers: accepted,\r\n    });\r\n  };\r\n\r\n  const addAcceptedAnswer = () => {\r\n    const newAnswer = prompt('Nh·∫≠p t·ª´ ƒë·ªìng nghƒ©a ho·∫∑c c√°ch vi·∫øt kh√°c:');\r\n    if (newAnswer && newAnswer.trim()) {\r\n      onChange({\r\n        ...question,\r\n        acceptedAnswers: [...(question.acceptedAnswers || []), newAnswer.trim()],\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeAcceptedAnswer = (idx: number) => {\r\n    onChange({\r\n      ...question,\r\n      acceptedAnswers: question.acceptedAnswers?.filter((_, i) => i !== idx) || [],\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"border rounded-lg p-4 mb-4 bg-gray-50\">\r\n      {/* Header c√¢u h·ªèi */}\r\n      <div className=\"flex gap-2 mb-4\">\r\n        <input\r\n          className=\"flex-1 border p-2 rounded\"\r\n          placeholder=\"N·ªôi dung c√¢u h·ªèi\"\r\n          value={question.text}\r\n          onChange={e => onChange({ ...question, text: e.target.value })}\r\n        />\r\n        <select\r\n          className=\"border p-2 rounded min-w-[120px]\"\r\n          value={question.type}\r\n          onChange={e => handleTypeChange(e.target.value as Question['type'])}\r\n        >\r\n          <option value=\"multiple\">Tr·∫Øc nghi·ªám</option>\r\n          <option value=\"boolean\">ƒê√∫ng/Sai</option>\r\n          <option value=\"short_answer\">ƒêi·ªÅn t·ª´</option>\r\n          <option value=\"image\">Ch·ªçn ·∫£nh</option>\r\n        </select>\r\n        <input\r\n          type=\"number\"\r\n          className=\"w-20 border p-2 rounded\"\r\n          min={1}\r\n          max={100}\r\n          value={question.points}\r\n          onChange={e => onChange({ ...question, points: parseInt(e.target.value) || 1 })}\r\n          placeholder={t(\"profile.sort.score\")}\r\n        />\r\n        <Button variant=\"outline\" onClick={onDelete} className=\"text-red-600 border-red-300\">{t(\"action.clear\")}</Button>\r\n      </div>\r\n\r\n      {/* N·ªôi dung theo t·ª´ng d·∫°ng */}\r\n      {question.type === 'multiple' && (\r\n        <div className=\"space-y-3\">\r\n          <div className=\"flex justify-between items-center\">\r\n            <h4 className=\"font-medium text-gray-700\">ƒê√°p √°n tr·∫Øc nghi·ªám</h4>\r\n            <Button onClick={handleAddAnswer} variant=\"outline\" size=\"sm\">+ Th√™m ƒë√°p √°n</Button>\r\n          </div>\r\n          {question.answers.map((a, idx) => (\r\n            <div key={a.id} className=\"flex gap-2 items-center bg-white p-2 rounded border\">\r\n              <span className=\"text-sm font-mono bg-gray-100 px-2 py-1 rounded\">{String.fromCharCode(65 + idx)}</span>\r\n              <input\r\n                className=\"flex-1 border p-2 rounded\"\r\n                placeholder={",
  "iscurrentuserSpanClassnameml1TextxsyouspanDivDivCl": ")\n                              }\n                              {isCurrentUser && <span className=\"ml-1 text-xs\">(You)</span>}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {correctAnswersCount} ƒë√∫ng ‚Ä¢ {player.score} ƒëi·ªÉm\n                              {currentAnswer && (\n                                <span className={",
  "ispdfurlresourceurlPdfSetactivepdfresourceElseIfIs": "|| isPDFUrl(resource.url)) {\r\n      // PDF\r\n      setActivePDF(resource);\r\n    } else if (isAudioUrl(resource.url)) {\r\n      // Audio\r\n      setActiveAudio(resource);\r\n    } else {\r\n      // C√°c lo·∫°i kh√°c (link th∆∞·ªùng), m·ªü trong tab m·ªõi\r\n      window.open(resource.url,",
  "javascriptDuocPhatTrienBoiBrendanEichTaiNetscapeVa": "JavaScript ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Brendan Eich t·∫°i Netscape v√†o nƒÉm 1995.",
  "javascriptDuocPhatTrienBoiCongTyNao": "JavaScript ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi c√¥ng ty n√†o?",
  "javascriptLaNgonNguGi": "JavaScript l√† ng√¥n ng·ªØ g√¨?",
  "javascriptLaNgonNguLapTrinhPhoBien": "JavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn",
  "jsonstringifyerrorNull2ThrowNewErrorkhongTheTaoDan": ", JSON.stringify(error, null, 2));\r\n      throw new Error(`Kh√¥ng th·ªÉ t·∫°o ƒë√°nh gi√°: ${error instanceof Error ? error.message :",
  "jsonstringifyotpdataConsolelogOtpStoredSecurelyHas": ", JSON.stringify(otpData));\r\n  \r\n  console.log('‚úÖ OTP stored securely (hashed)');\r\n};\r\n\r\n/**\r\n * G·ª≠i OTP qua Firestore Trigger Email Extension\r\n * Extension s·∫Ω t·ª± ƒë·ªông g·ª≠i email khi c√≥ document m·ªõi trong collection 'mail'\r\n */\r\nexport const sendOTPEmail = async (email: string, otp: string): Promise<{ success: boolean; message: string }> => {\r\n  try {\r\n    // T·∫°o HTML template cho email OTP\r\n    const emailHTML =",
  "keoDeSapXep": "K√©o ƒë·ªÉ s·∫Øp x·∫øp",
  "keoThaAnhVaoDayHoacClickDeChon": "K√©o th·∫£ ·∫£nh v√†o ƒë√¢y ho·∫∑c click ƒë·ªÉ ch·ªçn",
  "keoThaAnhVaoDayHoacClickDeChonpPClassname": ">K√©o th·∫£ ·∫£nh v√†o ƒë√¢y ho·∫∑c click ƒë·ªÉ ch·ªçn</p>\r\n            <p className=",
  "ketNoiAiThanhCong": "K·∫øt n·ªëi AI th√†nh c√¥ng!",
  "ketNoiFirestoreBiChan": "üö´ K·∫øt n·ªëi Firestore b·ªã ch·∫∑n",
  "ketNoiFirestoreBiChandivDivClassname": ">üö´ K·∫øt n·ªëi Firestore b·ªã ch·∫∑n</div>\r\n              <div className=",
  "ketQuaTongQuanDivClassname": ">\r\n        {/* K·∫øt qu·∫£ t·ªïng quan */}\r\n        <div className=",
  "khacPhuc": "Kh·∫Øc ph·ª•c:",
  "khamPhaHangNghinQuizThuViThuThachBanThanVaLeoLenBa": ">\r\n            Kh√°m ph√° h√†ng ngh√¨n quiz th√∫ v·ªã, th·ª≠ th√°ch b·∫£n th√¢n v√† leo l√™n b·∫£ng x·∫øp h·∫°ng! üöÄ\r\n          </p>\r\n          \r\n          <div className=",
  "khamPhaQuiz": "Kh√°m ph√° Quiz",
  "khiDangKyCreatedatNewDateUpdatedatNewDatePreferenc": "khi ƒëƒÉng k√Ω\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n      preferences: {\r\n        theme:",
  "kho": "Kh√≥",
  "khoSinhVienDaiHoc": "kh√≥ (sinh vi√™n ƒë·∫°i h·ªçc)",
  "khoa": "Kh√≥a",
  "khoaHoc": "Khoa h·ªçc",
  "khoaHocTuNhienVaCongNghe": "Khoa h·ªçc t·ª± nhi√™n v√† c√¥ng ngh·ªá",
  "khong": "Kh√¥ng",
  "khongCanFirebaseFunctions": "‚Ä¢ Kh√¥ng c·∫ßn Firebase Functions",
  "khongChiaSe": "KH√îNG chia s·∫ª",
  "khongChoPhep": "‚ùå Kh√¥ng cho ph√©p",
  "khongCoCreatorNao": "Kh√¥ng c√≥ creator n√†o",
  "khongCoCreatorNaoh3PClassname": ">Kh√¥ng c√≥ creator n√†o</h3>\r\n              <p className=",
  "khongCoDuLieu": "Kh√¥ng c√≥ d·ªØ li·ªáu",
  "khongCoNoiDungDeTaoCauHoi": "Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi",
  "khongCoQuizNaoPhuHopVoiBoLocHienTai": "Kh√¥ng c√≥ quiz n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc hi·ªán t·∫°i.",
  "khongCoQuizNaoPhuHopVoiBoLocHienTaipDivClassname": ">Kh√¥ng c√≥ quiz n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc hi·ªán t·∫°i.</p>\r\n                <div className=",
  "khongHaiLong": "Kh√¥ng h√†i l√≤ng",
  "khongLayDuocUrl": "Kh√¥ng l·∫•y ƒë∆∞·ª£c URL:",
  "khongNhanDuocMa": "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£?",
  "khongSetRoleDeComponentXuLyRoleUndefinedAsAnyConst": ");\r\n              // Kh√¥ng set role, ƒë·ªÉ component x·ª≠ l√Ω\r\n              role = undefined as any;\r\n            }\r\n          }\r\n\r\n          const authUser = {\r\n            uid: user.uid,\r\n            email: user.email,\r\n            displayName: user.displayName,\r\n            photoURL: user.photoURL,\r\n            emailVerified: user.emailVerified,\r\n            role: role,\r\n            needsRoleSelection: userData?.needsRoleSelection || (!role && role !==",
  "khongSignOutNgayDeUserCoCoHoiVerifyEmailAwaitAuths": ");\r\n              // Kh√¥ng sign out ngay, ƒë·ªÉ user c√≥ c∆° h·ªôi verify email\r\n              // await auth.signOut();\r\n              // dispatch(logout());\r\n              // dispatch(authCheckComplete());\r\n              // return;\r\n            }\r\n          } else if (user.email ===",
  "khongTaoDuocCauHoiNao": "Kh√¥ng t·∫°o ƒë∆∞·ª£c c√¢u h·ªèi n√†o",
  "khongTheCapNhatProfile": "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t profile",
  "khongTheCapNhatQuiz": "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t quiz",
  "khongTheDocFile": "Kh√¥ng th·ªÉ ƒë·ªçc file",
  "khongTheDuyetQuiz": "Kh√¥ng th·ªÉ duy·ªát quiz",
  "khongTheGuiEmailVuiLongThuLai": "Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i.",
  "khongTheGuiLaiMaXacThuc": "Kh√¥ng th·ªÉ g·ª≠i l·∫°i m√£ x√°c th·ª±c",
  "khongTheKetNoiDenAi": "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn AI",
  "khongTheKetNoiDenServerVuiLongKiemTraKetNoiMangCua": "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n.",
  "khongTheKetNoiDenServerVuiLongThuLaiSau": "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i sau.",
  "khongTheKetNoiFirebaseAi": "Kh√¥ng th·ªÉ k·∫øt n·ªëi Firebase AI",
  "khongTheKetNoiFirestore": "Kh√¥ng th·ªÉ k·∫øt n·ªëi Firestore",
  "khongTheKetNoiFirestoreVuiLongTatAdBlockerHoacThuC": "Kh√¥ng th·ªÉ k·∫øt n·ªëi Firestore. Vui l√≤ng t·∫Øt ad blocker ho·∫∑c th·ª≠ ch·∫ø ƒë·ªô Incognito.",
  "khongTheLayUrlDownload": "Kh√¥ng th·ªÉ l·∫•y URL download:",
  "khongTheLuuKetQuaQuiz": "Kh√¥ng th·ªÉ l∆∞u k·∫øt qu·∫£ quiz",
  "khongTheLuuKetQuaQuizVuiLongThuLai": "Kh√¥ng th·ªÉ l∆∞u k·∫øt qu·∫£ quiz. Vui l√≤ng th·ª≠ l·∫°i!",
  "khongTheMoLaiQuiz": "Kh√¥ng th·ªÉ m·ªü l·∫°i quiz",
  "khongThePhanTichCauHoiTuAi": "Kh√¥ng th·ªÉ ph√¢n t√≠ch c√¢u h·ªèi t·ª´ AI",
  "khongThePhanTichCauHoiTuPhanHoiAi": "Kh√¥ng th·ªÉ ph√¢n t√≠ch c√¢u h·ªèi t·ª´ ph·∫£n h·ªìi AI",
  "khongThePhanTichCauTraLoiTuAiVuiLongThuLai": "Kh√¥ng th·ªÉ ph√¢n t√≠ch c√¢u tr·∫£ l·ªùi t·ª´ AI. Vui l√≤ng th·ª≠ l·∫°i.",
  "khongThePheDuyetYeuCauChinhSua": "Kh√¥ng th·ªÉ ph√™ duy·ªát y√™u c·∫ßu ch·ªânh s·ª≠a",
  "khongTheTaiAnh": "Kh√¥ng th·ªÉ t·∫£i ·∫£nh",
  "khongTheTaiAnhspanDivDivDivClassname": ">Kh√¥ng th·ªÉ t·∫£i ·∫£nh</span>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=",
  "khongTheTaiBangXepHang": "Kh√¥ng th·ªÉ t·∫£i b·∫£ng x·∫øp h·∫°ng!",
  "khongTheTaiDanhGia": "Kh√¥ng th·ªÉ t·∫£i ƒë√°nh gi√°",
  "khongTheTaiDanhSachCreator": "Kh√¥ng th·ªÉ t·∫£i danh s√°ch creator",
  "khongTheTaiDanhSachQuiz": "Kh√¥ng th·ªÉ t·∫£i danh s√°ch quiz",
  "khongTheTaiKetQuaQuiz": "Kh√¥ng th·ªÉ t·∫£i k·∫øt qu·∫£ quiz",
  "khongTheTaiQuiz": "Kh√¥ng th·ªÉ t·∫£i quiz",
  "khongTheTaiQuizCuaNguoiDung": "Kh√¥ng th·ªÉ t·∫£i quiz c·ªßa ng∆∞·ªùi d√πng",
  "khongTheTaiQuizPhoBien": "Kh√¥ng th·ªÉ t·∫£i quiz ph·ªï bi·∫øn",
  "khongTheTaiQuizh2PClassname": ">Kh√¥ng th·ªÉ t·∫£i quiz</h2>\n          <p className=",
  "khongTheTaoCauHoiErrorInstanceofErrorErrormessageU": "Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi: ${error instanceof Error ? error.message : 'Unknown error'}",
  "khongTheTaoDanhGiaErrorInstanceofErrorErrormessage": "Kh√¥ng th·ªÉ t·∫°o ƒë√°nh gi√°: ${error instanceof Error ? error.message : 'Unknown error'}",
  "khongTheTaoLaiCauHoi": "Kh√¥ng th·ªÉ t·∫°o l·∫°i c√¢u h·ªèi",
  "khongTheTaoQuiz": "Kh√¥ng th·ªÉ t·∫°o quiz",
  "khongTheTimKiemQuiz": "Kh√¥ng th·ªÉ t√¨m ki·∫øm quiz",
  "khongTheTimThayQuizNay": "Kh√¥ng th·ªÉ t√¨m th·∫•y quiz n√†y",
  "khongTheTimThayQuizNaypButtonOnclickWindowhistoryb": ">Kh√¥ng th·ªÉ t√¨m th·∫•y quiz n√†y</p>\r\n          <button \r\n            onClick={() => window.history.back()}\r\n            className=",
  "khongTheTrichXuatTextTuAnhVuiLongThuAnhKhacCoTextR": "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t text t·ª´ ·∫£nh. Vui l√≤ng th·ª≠ ·∫£nh kh√°c c√≥ text r√µ r√†ng h∆°n.",
  "khongTheTuChoiQuiz": "Kh√¥ng th·ªÉ t·ª´ ch·ªëi quiz",
  "khongTheTuChoiYeuCauChinhSua": "Kh√¥ng th·ªÉ t·ª´ ch·ªëi y√™u c·∫ßu ch·ªânh s·ª≠a",
  "khongTheXacThucNguoiDung": "Kh√¥ng th·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng",
  "khongTheXoaAnh": "Kh√¥ng th·ªÉ x√≥a ·∫£nh:",
  "khongTheXoaQuiz": "Kh√¥ng th·ªÉ x√≥a quiz",
  "khongTimThayCreatorPhuHopVoiBoLoc": "Kh√¥ng t√¨m th·∫•y creator ph√π h·ª£p v·ªõi b·ªô l·ªçc",
  "khongTimThayCreatorPhuHopVoiBoLocpDivDivClassname": ">Kh√¥ng t√¨m th·∫•y creator ph√π h·ª£p v·ªõi b·ªô l·ªçc</p>\r\n            </div>\r\n          ) : (\r\n            <div className=",
  "khongTimThayKetQua": "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£",
  "khongTimThayKetQuaQuiz": "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ quiz!",
  "khongTimThayKetQuah2ButtonOnclickNavigate": ">Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£</h2>\r\n          <button\r\n            onClick={() => navigate(",
  "khongTimThayOtpVuiLongYeuCauGuiLai": "Kh√¥ng t√¨m th·∫•y OTP. Vui l√≤ng y√™u c·∫ßu g·ª≠i l·∫°i.",
  "khongTimThayQuiz": "Kh√¥ng t√¨m th·∫•y quiz",
  "khongTimThayQuizNay": "Kh√¥ng t√¨m th·∫•y quiz n√†y",
  "khongTimThayQuizh3PClassname": ">Kh√¥ng t√¨m th·∫•y quiz</h3>\r\n                <p className=",
  "khongTimThayTaiKhoanVoiEmailNay": "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y",
  "khongTimThayYeuCauChinhSua": "Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu ch·ªânh s·ª≠a",
  "khongXacDinh": "Kh√¥ng x√°c ƒë·ªãnh",
  "khooptionSelectDivNumberOfQuestionsDivLabelClassna": ">üî¥ Kh√≥</option>\r\n            </select>\r\n          </div>\r\n\r\n          {/* Number of Questions */}\r\n          <div>\r\n            <label className=",
  "khospanDefaultReturnSpanClassname": ">üî¥ Kh√≥</span>;\r\n      default:\r\n        return <span className=",
  "khuyenNghi": "Khuy·∫øn ngh·ªã",
  "khuyenNghiSpanDivResourcedescriptionPClassname": ">\r\n                            Khuy·∫øn ngh·ªã\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                      \r\n                      {resource.description && (\r\n                        <p className=",
  "khuyenNghiSpanIsviewedSpanClassname": ">\r\n                      Khuy·∫øn ngh·ªã\r\n                    </span>\r\n                  )}\r\n                  {isViewed && (\r\n                    <span className=",
  "kichThuocFileVuotQuaMaxsizekbkb": "K√≠ch th∆∞·ªõc file v∆∞·ª£t qu√° ${maxSizeKB}KB",
  "kichThuocFileVuotQuaMaxsizekbkbMathroundfilesizekb": "K√≠ch th∆∞·ªõc file v∆∞·ª£t qu√° ${maxSizeKB}KB (${Math.round(fileSizeKB)}KB)",
  "kichThuocToiDaOptionsmaxsizekb5120kbPInputReffilei": ">\r\n              K√≠ch th∆∞·ªõc t·ªëi ƒëa: {options.maxSizeKB || 5120}KB\r\n            </p>\r\n            <input\r\n              ref={fileInputRef}\r\n              type=",
  "kiemTraGatingUserCoTheBatDauQuizKhongExportConstCh": "};\r\n  }\r\n};\r\n\r\n/**\r\n * Ki·ªÉm tra gating - user c√≥ th·ªÉ b·∫Øt ƒë·∫ßu quiz kh√¥ng\r\n */\r\nexport const checkGatingStatus = async (\r\n  userId: string,\r\n  quizId: string,\r\n  resources: LearningResource[]\r\n): Promise<{\r\n  ready: boolean;\r\n  requiredCount: number;\r\n  completedCount: number;\r\n  missingResources: LearningResource[];\r\n  warnings: string[];\r\n}> => {\r\n  try {\r\n    const session = await getLearningSession(userId, quizId);\r\n    \r\n    if (!session) {\r\n      // Ch∆∞a c√≥ session ‚Üí init\r\n      await initializeLearningSession(userId, quizId, resources);\r\n      const requiredResources = resources.filter(r => r.required);\r\n      return {\r\n        ready: requiredResources.length === 0,\r\n        requiredCount: requiredResources.length,\r\n        completedCount: 0,\r\n        missingResources: requiredResources,\r\n        warnings: requiredResources.length > 0 \r\n          ? [",
  "kiemTraHopThuCuaBanVaClickVaoLinkDeDatLaiMatKhau": "Ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n v√† click v√†o link ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.",
  "kiemTraHopThuCuaBanVaClickVaoLinkDeDatLaiMatKhauPB": ">\r\n              Ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n v√† click v√†o link ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.\r\n            </p>\r\n            <button\r\n              type=",
  "kiemTraQuyenAdminIfUserUserrole": "];\r\n\r\n  // Ki·ªÉm tra quy·ªÅn admin\r\n  if (!user || user.role !==",
  "kiemTraThanhTichVaLichSuLamQuizCuaBan": "Ki·ªÉm tra th√†nh t√≠ch v√† l·ªãch s·ª≠ l√†m quiz c·ªßa b·∫°n",
  "kiemTraThanhTichVaLichSuLamQuizCuaBanpDivClassname": ">Ki·ªÉm tra th√†nh t√≠ch v√† l·ªãch s·ª≠ l√†m quiz c·ªßa b·∫°n</p>\r\n            <div className=",
  "kiemTraThuMucSpamHoacNhanGuiLaiMaXacThuc": "Ki·ªÉm tra th∆∞ m·ª•c spam ho·∫∑c nh·∫•n \"G·ª≠i l·∫°i m√£ x√°c th·ª±c\"",
  "kiemTraVaChinhSuaTruocKhiThemVaoQuiz": "Ki·ªÉm tra v√† ch·ªânh s·ª≠a tr∆∞·ªõc khi th√™m v√†o quiz",
  "kiemTraVaChinhSuaTruocKhiThemVaoQuizpDivDivClassna": ">Ki·ªÉm tra v√† ch·ªânh s·ª≠a tr∆∞·ªõc khi th√™m v√†o quiz</p>\r\n              </div>\r\n\r\n              <div className=",
  "kienThucTongHop": "Ki·∫øn th·ª©c t·ªïng h·ª£p",
  "kieuDuLieuChoCauHoiExportInterfaceAnswerIdStringTe": ";\r\n\r\n// Ki·ªÉu d·ªØ li·ªáu cho c√¢u h·ªèi\r\nexport interface Answer {\r\n  id: string;\r\n  text: string;\r\n  isCorrect: boolean;\r\n  imageUrl?: string; // Cho d·∫°ng ch·ªçn ·∫£nh\r\n}\r\n\r\nexport interface Question {\r\n  id: string;\r\n  text: string;\r\n  type:",
  "lamCacQuizCoSan": "‚Ä¢ L√†m c√°c quiz c√≥ s·∫µn",
  "lamLai": "L√†m l·∫°i:",
  "lamLaiQuiz": "üîÑ L√†m l·∫°i Quiz",
  "lamLaiQuizButtonButtonOnclickConsolelog": ">\n        üîÑ L√†m l·∫°i Quiz\n      </Button>\n\n\n      <Button\n        onClick={() => {\n          console.log(",
  "lamMoiDanhGia": "L√†m m·ªõi ƒë√°nh gi√°",
  "lamMoiDanhSach": "L√†m m·ªõi danh s√°ch",
  "lanSuaCuoi": "L·∫ßn s·ª≠a cu·ªëi:",
  "lanSuaCuoispanSpanClassname": ">L·∫ßn s·ª≠a cu·ªëi:</span>\r\n              <span className=",
  "landing": {
    "cta": {
      "primary": "Get Started - Free!",
      "secondary": "ƒê√£ c√≥ t√†i kho·∫£n?"
    },
    "features": {
      "ranking": {
        "desc": "Track scores, statistics and compare with friends",
        "title": "Ranking & Achievements"
      },
      "realtime": {
        "desc": "Challenge yourself with countdown timer and track realtime progress",
        "title": "Real-time"
      },
      "topics": {
        "desc": "Science, history, sports, entertainment and many other exciting topics",
        "title": "Diverse Topics"
      }
    },
    "footer": {
      "rights": "All rights reserved."
    },
    "hero": {
      "subtitle": "Discover thousands of exciting quizzes, challenge yourself and enhance your knowledge with Quiz Trivia - the leading interactive quiz platform!",
      "title": "Test your knowledge"
    },
    "stats": {
      "players": "Ng∆∞·ªùi ch∆°i",
      "plays": "Plays",
      "quizzes": "Diverse Quizzes",
      "support": "Support"
    }
  },
  "lapTrinh": "L·∫≠p tr√¨nh",
  "lapTrinhVaPhatTrienPhanMem": "L·∫≠p tr√¨nh v√† ph√°t tri·ªÉn ph·∫ßn m·ªÅm",
  "layLearningSessionCuaUserChoMotQuizExportConstGetl": ";\r\n\r\n/**\r\n * L·∫•y learning session c·ªßa user cho m·ªôt quiz\r\n */\r\nexport const getLearningSession = async (\r\n  userId: string,\r\n  quizId: string\r\n): Promise<LearningSession | null> => {\r\n  try {\r\n    const sessionId = `${quizId}_${userId}`;\r\n    const sessionRef = doc(db,",
  "leaderboard": {
    "activeToday": "Active today",
    "activity": "Activity",
    "avgScore": "Avg score",
    "avgShort": "AVG",
    "collapse": "Collapse",
    "createFirstQuiz": "Create your first quiz to appear here!",
    "filters": {
      "allTime": "All time",
      "thisMonth": "Th√°ng n√†y",
      "thisWeek": "Tu·∫ßn n√†y"
    },
    "noData": "No data yet",
    "noQuizzes": "No quizzes yet",
    "perfect100": "perfect 100",
    "perfectScores": "Perfect scores",
    "playToAppear": "Play quizzes to appear on the leaderboard!",
    "players": "Ng∆∞·ªùi ch∆°i",
    "plays": "Plays",
    "searchPlayers": "Search players...",
    "time": "Th·ªùi gian",
    "title": "B·∫£ng x·∫øp h·∫°ng",
    "topPlayers": "Top Players",
    "topQuizzes": "Most Popular Quizzes",
    "viewAllCount": "View all ({{count}})",
    "viewMore": "View more",
    "yourPosition": "Your position"
  },
  "learningOutcomeMucTieuHocTapExportInterfaceLearnin": ";\r\n\r\n/**\r\n * Learning Outcome - M·ª•c ti√™u h·ªçc t·∫≠p\r\n */\r\nexport interface LearningOutcome {\r\n  id: string;\r\n  code: string; // LO1, LO2, LO3...\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\n/**\r\n * Ng∆∞·ª°ng ho√†n th√†nh cho t·ª´ng lo·∫°i t√†i li·ªáu\r\n */\r\nexport interface ResourceThreshold {\r\n  // Video thresholds\r\n  minWatchSec?: number; // T·ªëi thi·ªÉu X gi√¢y\r\n  minWatchPercent?: number; // T·ªëi thi·ªÉu X% video (0-100)\r\n  \r\n  // PDF thresholds\r\n  minPages?: number; // T·ªëi thi·ªÉu X trang\r\n  mustReachLastPage?: boolean; // Ph·∫£i ƒë·ªçc ƒë·∫øn trang cu·ªëi\r\n  minTimePerPage?: number; // T·ªëi thi·ªÉu X gi√¢y/trang (default: 1.5s)\r\n  \r\n  // Image/Slides thresholds\r\n  minViewedCount?: number; // T·ªëi thi·ªÉu X ·∫£nh/slide\r\n  minViewTime?: number; // T·ªëi thi·ªÉu X gi√¢y xem m·ªói ·∫£nh\r\n  \r\n  // Link thresholds\r\n  requireConfirm?: boolean; // Y√™u c·∫ßu tick",
  "lengthChuaCoDuLieuQuizResultsDe0ChoKhopVoiHomeCons": ").length;\r\n\r\n        // Ch∆∞a c√≥ d·ªØ li·ªáu quiz results => ƒë·ªÉ 0 cho kh·ªõp v·ªõi /home\r\n        const completedQuizzes = 0;\r\n\r\n        setStats({\r\n          totalQuizzes,\r\n          totalUsers,\r\n          completedQuizzes,\r\n          totalCreators,\r\n        });\r\n      } catch (_) {\r\n        // silent\r\n      }\r\n    };\r\n    fetchStats();\r\n  }, []);\r\n  const { user } = useSelector((state: RootState) => state.auth);\r\n  const [showNotificationModal, setShowNotificationModal] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [notificationData, setNotificationData] = useState({\r\n    message:",
  "liBieuDoCotDanhMucPhoBienliLiBieuDoTronTyLeQuizDaD": ">\r\n                <li>üìä Bi·ªÉu ƒë·ªì c·ªôt - Danh m·ª•c ph·ªï bi·∫øn</li>\r\n                <li>ü•ß Bi·ªÉu ƒë·ªì tr√≤n - T·ª∑ l·ªá quiz ƒë√£ duy·ªát/ch·ªù duy·ªát</li>\r\n                <li>üìà 8 Cards th·ªëng k√™ chi ti·∫øt</li>\r\n                <li>üéØ D·ªØ li·ªáu m·∫´u ƒë·ªÉ demo</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <main className=",
  "liCot1CauHoiliLiCot25DapAnABCDliLiCot6DapAnDungAbc": ">\r\n                  <li>‚Ä¢ C·ªôt 1: C√¢u h·ªèi</li>\r\n                  <li>‚Ä¢ C·ªôt 2-5: ƒê√°p √°n A, B, C, D</li>\r\n                  <li>‚Ä¢ C·ªôt 6: ƒê√°p √°n ƒë√∫ng (A/B/C/D)</li>\r\n                  <li>‚Ä¢ C·ªôt 7: Gi·∫£i th√≠ch (t√πy ch·ªçn)</li>\r\n                  <li>‚Ä¢ C·ªôt 8: ƒêi·ªÉm (m·∫∑c ƒë·ªãnh 10)</li>\r\n                </ul>\r\n              </div>\r\n\r\n              {/* Template Download */}\r\n              <div className=",
  "liLamCacQuizCoSanliLiXemLichSuKetQualiLiTheoDoiTie": ">\r\n                  <li>‚Ä¢ L√†m c√°c quiz c√≥ s·∫µn</li>\r\n                  <li>‚Ä¢ Xem l·ªãch s·ª≠ k·∫øt qu·∫£</li>\r\n                  <li>‚Ä¢ Theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Creator Role */}\r\n          <div \r\n            className={`p-4 border-2 rounded-lg cursor-pointer transition-all duration-200 ${\r\n              selectedRole ===",
  "liTatCaQuyenCuaUserliLiTaoQuizMoiliLiQuanLyQuizDaT": ">\r\n                  <li>‚Ä¢ T·∫•t c·∫£ quy·ªÅn c·ªßa User</li>\r\n                  <li>‚Ä¢ T·∫°o quiz m·ªõi</li>\r\n                  <li>‚Ä¢ Qu·∫£n l√Ω quiz ƒë√£ t·∫°o</li>\r\n                  <li>‚Ä¢ Quiz c·∫ßn admin ph√™ duy·ªát</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=",
  "lichSu": "L·ªãch s·ª≠",
  "lichSuTheGioiVaVietNam": "L·ªãch s·ª≠ th·∫ø gi·ªõi v√† Vi·ªát Nam",
  "limaOtpNayChiCoHieuLucTrongStrong10PhutstrongliLis": ">\r\n              <li>M√£ OTP n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong <strong>10 ph√∫t</strong></li>\r\n              <li><strong>KH√îNG chia s·∫ª</strong> m√£ n√†y v·ªõi b·∫•t k·ª≥ ai</li>\r\n              <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒëƒÉng k√Ω, vui l√≤ng b·ªè qua email n√†y</li>\r\n            </ul>\r\n          </div>\r\n          \r\n          <p style=",
  "linkYoutubeKhongHopLe": "Link YouTube kh√¥ng h·ª£p l·ªá",
  "linkYoutubeKhongHopLeh3PClassname": ">Link YouTube kh√¥ng h·ª£p l·ªá</h3>\r\n          <p className=",
  "linkclickToastsuccesstadminquickactionstoastsbacku": ";\r\n      link.click();\r\n      \r\n      toast.success(t('admin.quickActions.toasts.backupSuccess'));\r\n    } catch (error) {\r\n      toast.error(t('admin.quickActions.toasts.backupError'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 3. X√≥a th√¥ng b√°o h·ªá th·ªëng\r\n  const deleteNotifications = async () => {\r\n    if (!confirm(t('admin.quickActions.toasts.confirmDeleteAll'))) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      // L·∫•y t·∫•t c·∫£ th√¥ng b√°o ƒëang active\r\n      const notificationsSnapshot = await getDocs(collection(db, 'system_notifications'));\r\n      const deletePromises = notificationsSnapshot.docs.map(doc => \r\n        updateDoc(doc.ref, { isActive: false })\r\n      );\r\n      \r\n      await Promise.all(deletePromises);\r\n      toast.success(t('admin.quickActions.toasts.deleteSuccess'));\r\n      onRefreshData();\r\n    } catch (error) {\r\n      console.error('Error deleting notifications:', error);\r\n      toast.error(t('admin.quickActions.toasts.deleteError'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 4. D·ªçn d·∫πp d·ªØ li·ªáu ƒë√£ x√≥a\r\n  const cleanupDeletedData = async () => {\r\n    if (!confirm(t('admin.quickActions.toasts.confirmCleanup'))) return;\r\n    setLoading(true);\r\n    try {\r\n      // X√≥a quiz ƒë√£ b·ªã ƒë√°nh d·∫•u deleted=true\r\n      const quizzesSnapshot = await getDocs(collection(db, 'quizzes'));\r\n      const deletedQuizzes = quizzesSnapshot.docs.filter(doc => doc.data().deleted === true);\r\n      const quizDeletePromises = deletedQuizzes.map(q => updateDoc(doc(db, 'quizzes', q.id), { isPurged: true }));\r\n\r\n      // X√≥a user ƒë√£ b·ªã ƒë√°nh d·∫•u deleted=true\r\n      const usersSnapshot = await getDocs(collection(db, 'users'));\r\n      const deletedUsers = usersSnapshot.docs.filter(doc => doc.data().deleted === true);\r\n      const userDeletePromises = deletedUsers.map(u => updateDoc(doc(db, 'users', u.id), { isPurged: true }));\r\n\r\n      await Promise.all([...quizDeletePromises, ...userDeletePromises]);\r\n      toast.success(t('admin.quickActions.toasts.cleanupSuccess'));\r\n      onRefreshData();\r\n    } catch (error) {\r\n      toast.error(t('admin.quickActions.toasts.cleanupError'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const quickActions = [\r\n    // Updated actions as requested\r\n    {\r\n      icon: 'üì¢',\r\n      title: t('admin.quickActions.items.notify.title'),\r\n      description: t('admin.quickActions.items.notify.desc'),\r\n      action: openNotificationModal,\r\n      color: 'blue'\r\n    },\r\n    {\r\n      icon: '‚ùå',\r\n      title: t('admin.quickActions.items.deleteNotifications.title'),\r\n      description: t('admin.quickActions.items.deleteNotifications.desc'),\r\n      action: deleteNotifications,\r\n      color: 'red'\r\n    },\r\n    {\r\n      icon: 'üóÇÔ∏è',\r\n      title: t('admin.quickActions.items.backup.title'),\r\n      description: t('admin.quickActions.items.backup.desc'),\r\n      action: backupData,\r\n      color: 'green'\r\n    },\r\n    {\r\n      icon: 'üóëÔ∏è',\r\n      title: t('admin.quickActions.items.cleanup.title'),\r\n      description: t('admin.quickActions.items.cleanup.desc'),\r\n      action: cleanupDeletedData,\r\n      color: 'orange'\r\n    }\r\n  ];\r\n\r\n  // Banner notification UI\r\n  useEffect(() => {\r\n    if (showBanner && bannerData) {\r\n      document.body.classList.add('overflow-x-hidden');\r\n    } else {\r\n      document.body.classList.remove('overflow-x-hidden');\r\n    }\r\n  }, [showBanner, bannerData]);\r\n\r\n  return (\r\n    <div className=\"bg-white p-6 rounded-lg shadow relative\">\r\n      {/* Banner notification */}\r\n      {showBanner && bannerData && (\r\n        <div className={",
  "loadedquizzeslengthSetquizzesloadedquizzesNeuKhong": ", loadedQuizzes.length);\r\n      setQuizzes(loadedQuizzes);\r\n      \r\n      // N·∫øu kh√¥ng c√≥ quiz, hi·ªÉn th·ªã empty state\r\n      if (loadedQuizzes.length === 0) {\r\n        console.log(",
  "loading": "ƒêang t·∫£i...",
  "loadingData": "ƒêang t·∫£i d·ªØ li·ªáu...",
  "loadingmessagedivDivDivSkeletonChoLoadingDanhSachR": ">{loadingMessage}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  // Skeleton cho loading danh s√°ch\r\n  return (\r\n    <div className=",
  "loaiBoTrungLapVaRongOnchangeQuestionCorrectanswerV": "); // Lo·∫°i b·ªè tr√πng l·∫∑p v√† r·ªóng\r\n    \r\n    onChange({\r\n      ...question,\r\n      correctAnswer: value,\r\n      acceptedAnswers: accepted,\r\n    });\r\n  };\r\n\r\n  const addAcceptedAnswer = () => {\r\n    const newAnswer = prompt(",
  "loaiBoTrungLapVaRongReturnNewSetacceptedfiltervVtr": "),\r\n  ];\r\n  \r\n  // Lo·∫°i b·ªè tr√πng l·∫∑p v√† r·ªóng\r\n  return [...new Set(accepted)].filter(v => v.trim() !==",
  "loaiCauHoi": "Lo·∫°i c√¢u h·ªèi",
  "loaiCauHoiLabelSelectValueoptionsquestiontypes0": ">\r\n                      Lo·∫°i c√¢u h·ªèi\r\n                    </label>\r\n                    <select\r\n                      value={options.questionTypes?.[0] ||",
  "loaiCauHoilabelDivClassname": ">Lo·∫°i c√¢u h·ªèi</label>\r\n                    <div className=",
  "loaiFileKhongDuocHoTroFiletype": "Lo·∫°i file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: ${file.type}",
  "loaiTaiLieu": "Lo·∫°i t√†i li·ªáu *",
  "loaiTaiLieuLabelDivClassname": ">\r\n                  Lo·∫°i t√†i li·ªáu *\r\n                </label>\r\n                <div className=",
  "locationstateIfLocationstateCoStateTuNavigationSuD": ", location.state);\r\n    \r\n    if (location.state) {\r\n      // C√≥ state t·ª´ navigation - s·ª≠ d·ª•ng ngay\r\n      const resultData = location.state as ResultState;\r\n      console.log(",
  "loiAiErrorInstanceofErrorErrormessageUnknownError": "L·ªói AI: ${error instanceof Error ? error.message : 'Unknown error'}",
  "loiDinhDangJsonTuAiVuiLongThuLai": "L·ªói ƒë·ªãnh d·∫°ng JSON t·ª´ AI. Vui l√≤ng th·ª≠ l·∫°i.",
  "loiDocFileTextErrorInstanceofErrorErrormessageUnkn": "L·ªói ƒë·ªçc file text: ${error instanceof Error ? error.message : 'Unknown error'}",
  "loiDocPdfErrorInstanceofErrorErrormessageUnknownEr": "L·ªói ƒë·ªçc PDF: ${error instanceof Error ? error.message : 'Unknown error'}",
  "loiDocSpreadsheetErrorInstanceofErrorErrormessageU": "L·ªói ƒë·ªçc spreadsheet: ${error instanceof Error ? error.message : 'Unknown error'}",
  "loiDocTextFileErrorInstanceofErrorErrormessageUnkn": "L·ªói ƒë·ªçc text file: ${error instanceof Error ? error.message : 'Unknown error'}",
  "loiDocWordErrorInstanceofErrorErrormessageUnknownE": "L·ªói ƒë·ªçc Word: ${error instanceof Error ? error.message : 'Unknown error'}",
  "loiKetNoiAi": "‚ùå L·ªói k·∫øt n·ªëi AI",
  "loiKetNoiMang": "L·ªói k·∫øt n·ªëi m·∫°ng",
  "loiKetNoiResultmessage": "L·ªói k·∫øt n·ªëi: ${result.message}",
  "loiKhiCapNhatQuiz": "L·ªói khi c·∫≠p nh·∫≠t quiz",
  "loiKhiCapNhatYeuThich": "L·ªói khi c·∫≠p nh·∫≠t y√™u th√≠ch!",
  "loiKhiTaiKetQuaQuiz": "L·ªói khi t·∫£i k·∫øt qu·∫£ quiz",
  "loiKhiTaiQuiz": "L·ªói khi t·∫£i quiz",
  "loiKhiUploadAnh": "L·ªói khi upload ·∫£nh:",
  "loiKhiXuLyFile": "L·ªói khi x·ª≠ l√Ω file",
  "loiTaoCauHoiErrormessage": "‚ùå L·ªói t·∫°o c√¢u h·ªèi: ${errorMessage}",
  "loiTaoCauHoiResulterror": "L·ªói t·∫°o c√¢u h·ªèi: ${result.error}",
  "loiUpload": "L·ªói upload:",
  "loiUploadAvatar": "L·ªói upload avatar:",
  "loiXuLyAnhErrorInstanceofErrorErrormessageUnknownE": "L·ªói x·ª≠ l√Ω ·∫£nh: ${error instanceof Error ? error.message : 'Unknown error'}",
  "loiXuLyFileErrorInstanceofErrorErrormessageUnknown": "L·ªói x·ª≠ l√Ω file: ${error instanceof Error ? error.message : 'Unknown error'}",
  "loiXuLyPdfErrorInstanceofErrorErrormessageUnknownE": "L·ªói x·ª≠ l√Ω PDF: ${error instanceof Error ? error.message : 'Unknown error'}",
  "loiXuLyTaiLieuErrorInstanceofErrorErrormessageUnkn": "L·ªói x·ª≠ l√Ω t√†i li·ªáu: ${error instanceof Error ? error.message : 'Unknown error'}",
  "luaChonNhaCungCapAiPhuHopVoiNhuCauCuaBan": "L·ª±a ch·ªçn nh√† cung c·∫•p AI ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n",
  "luaChonNhaCungCapAiPhuHopVoiNhuCauCuaBanpDivDivCla": ">L·ª±a ch·ªçn nh√† cung c·∫•p AI ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n</p>\r\n              </div>\r\n\r\n              <div className=",
  "lui10s": "L√πi 10s",
  "luoi": "L∆∞·ªõi",
  "luonLa": ", // Lu√¥n l√†",
  "luonTraVe": ", // Lu√¥n tr·∫£ v·ªÅ",
  "luotTruocDo": "(L∆∞·ª£t tr∆∞·ªõc ƒë√≥)",
  "luotTruocDospanDivDivClassname": ">(L∆∞·ª£t tr∆∞·ªõc ƒë√≥)</span>\r\n                    )}\r\n                  </div>\r\n                  <div className=",
  "luuRoleAdminVaoFirestoreAwaitSetdocdocdb": ");\r\n      \r\n      // L∆∞u role admin v√†o Firestore\r\n      await setDoc(doc(db,",
  "luuThayDoi": "L∆∞u thay ƒë·ªïi",
  "luuY": "L∆∞u √Ω:",
  "luuYQuanTrong": "‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:",
  "luuYQuanTrongstrongUlStyle": ">‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong>\r\n            <ul style=",
  "luuYQuizNayCoTaiLieu": "L∆∞u √Ω: Quiz n√†y c√≥ t√†i li·ªáu",
  "lyDoYeuCau": "L√Ω do y√™u c·∫ßu:",
  "maNayVoiBatKyAi": "m√£ n√†y v·ªõi b·∫•t k·ª≥ ai",
  "maOtpMoiDaDuocGui": "M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i!",
  "maOtpNayChiCoHieuLucTrong": "M√£ OTP n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong",
  "maXacThucCuaBan": "M√É X√ÅC TH·ª∞C C·ª¶A B·∫†N",
  "maXacThucDangKyQuizApp": "üîê M√£ x√°c th·ª±c ƒëƒÉng k√Ω Quiz App",
  "maXacThucOtp": "M√£ X√°c Th·ª±c OTP",
  "maXacThucOtph2DivPStyle": ">M√£ X√°c Th·ª±c OTP</h2>\r\n          </div>\r\n          \r\n          <p style=",
  "mainFileProcessorRouterDeXuLyCacLoaiFileKhacNhauEx": "};\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Main File Processor - Router ƒë·ªÉ x·ª≠ l√Ω c√°c lo·∫°i file kh√°c nhau\r\n */\r\nexport class FileProcessor {\r\n  static getSupportedTypes() {\r\n    return {\r\n      images: ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'],\r\n      documents: ['.pdf', '.doc', '.docx', '.txt', '.rtf'],\r\n      spreadsheets: ['.csv', '.xlsx', '.xls']\r\n    };\r\n  }\r\n\r\n  static isFileSupported(fileName: string): boolean {\r\n    const lowercaseName = fileName.toLowerCase();\r\n    const supportedTypes = this.getSupportedTypes();\r\n    \r\n    return Object.values(supportedTypes)\r\n      .flat()\r\n      .some(ext => lowercaseName.endsWith(ext));\r\n  }\r\n\r\n  static async processFile(file: File): Promise<FileProcessingResult> {\r\n    const fileName = file.name.toLowerCase();\r\n    const supportedTypes = this.getSupportedTypes();\r\n    \r\n    try {\r\n      // Check file size (limit 50MB)\r\n      if (file.size > 50 * 1024 * 1024) {\r\n        return {\r\n          extractedText: '',\r\n          success: false,\r\n          error: 'File qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 50MB.'\r\n        };\r\n      }\r\n\r\n      // Route to appropriate service\r\n      if (supportedTypes.images.some(ext => fileName.endsWith(ext))) {\r\n        return await OCRService.extractTextFromImage(file);\r\n      }\r\n      \r\n      if (fileName.endsWith('.pdf')) {\r\n        return await PDFService.extractTextFromPDF(file);\r\n      }\r\n      \r\n      if (fileName.endsWith('.docx') || fileName.endsWith('.doc')) {\r\n        return await WordService.extractTextFromWord(file);\r\n      }\r\n      \r\n      if (supportedTypes.spreadsheets.some(ext => fileName.endsWith(ext))) {\r\n        return await SpreadsheetService.extractTextFromSpreadsheet(file);\r\n      }\r\n      \r\n      if (fileName.endsWith('.txt') || fileName.endsWith('.rtf')) {\r\n        return await TextService.extractTextFromTextFile(file);\r\n      }\r\n      \r\n      return {\r\n        extractedText: '',\r\n        success: false,\r\n        error: 'ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.'\r\n      };\r\n      \r\n    } catch (error) {\r\n      return {\r\n        extractedText: '',\r\n        success: false,\r\n        error:",
  "mammotherrorFallbackVoiNoiDungMockDuaTrenTenFileCo": ", mammothError);\r\n        }\r\n      }\r\n      \r\n      // Fallback v·ªõi n·ªôi dung mock d·ª±a tr√™n t√™n file\r\n      const mockText = `\r\nN·ªôi dung ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ file Word: ${file.name}\r\n\r\nB√†i h·ªçc 1: HTML C∆° b·∫£n\r\nHTML (HyperText Markup Language) l√† ng√¥n ng·ªØ ƒë√°nh d·∫•u si√™u vƒÉn b·∫£n ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o c·∫•u tr√∫c cho trang web.\r\nC√°c th·∫ª HTML c∆° b·∫£n: <html>, <head>, <body>, <div>, <p>, <h1>, <a>, <img>\r\nHTML5 b·ªï sung nhi·ªÅu th·∫ª semantic nh∆∞ <header>, <nav>, <section>, <article>, <footer>\r\n\r\nB√†i h·ªçc 2: CSS Styling\r\nCSS (Cascading Style Sheets) ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o ki·ªÉu v√† b·ªë c·ª•c cho c√°c ph·∫ßn t·ª≠ HTML.\r\nCSS Selector: element, class, id, attribute, pseudo-class\r\nCSS Properties: color, background, margin, padding, border, font, display, position\r\n\r\nB√†i h·ªçc 3: JavaScript Interactivity\r\nJavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ th√™m t√≠nh t∆∞∆°ng t√°c cho trang web.\r\nJavaScript c∆° b·∫£n: variables, functions, events, DOM manipulation\r\nES6+ features: arrow functions, let/const, template literals, destructuring, modules\r\n\r\nB√†i h·ªçc 4: Responsive Design\r\nResponsive design ƒë·∫£m b·∫£o trang web ho·∫°t ƒë·ªông t·ªët tr√™n m·ªçi thi·∫øt b·ªã.\r\nMedia queries trong CSS ƒë·ªÉ t·∫°o breakpoints cho c√°c k√≠ch th∆∞·ªõc m√†n h√¨nh kh√°c nhau.\r\nMobile-first approach: thi·∫øt k·∫ø cho mobile tr∆∞·ªõc, sau ƒë√≥ m·ªü r·ªông cho desktop.\r\n\r\nTh·ª±c h√†nh:\r\n- T·∫°o m·ªôt trang web ƒë∆°n gi·∫£n v·ªõi HTML\r\n- √Åp d·ª•ng CSS ƒë·ªÉ t·∫°o ki·ªÉu\r\n- Th√™m JavaScript ƒë·ªÉ t·∫°o t√≠nh t∆∞∆°ng t√°c\r\n- Ki·ªÉm tra responsive tr√™n c√°c thi·∫øt b·ªã kh√°c nhau\r\n      `.trim();\r\n      \r\n      return {\r\n        extractedText: mockText,\r\n        questions: [],\r\n        success: true\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error(",
  "matKhauCuConstNewpasswordSetnewpasswordUsestate": "); // M·∫≠t kh·∫©u c≈©\r\n  const [newPassword, setNewPassword] = useState(",
  "matKhauKhongChinhXac": "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c",
  "matKhauPhaiCoItNhat1ChuHoa": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ hoa",
  "matKhauPhaiCoItNhat1ChuThuong": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ th∆∞·ªùng",
  "matKhauPhaiCoItNhat1So": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 s·ªë",
  "matKhauPhaiCoItNhat6KyTu": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±",
  "matKhauQuaYeu": "M·∫≠t kh·∫©u qu√° y·∫øu",
  "mayChuAiDangQuaTaiHoacTamThoiKhongPhanHoiVuiLongTh": "M√°y ch·ªß AI ƒëang qu√° t·∫£i ho·∫∑c t·∫°m th·ªùi kh√¥ng ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau m·ªôt l√∫c.",
  "meo": "M·∫πo:",
  "messages": {
    "error": "ƒê√£ x·∫£y ra l·ªói",
    "networkError": "Network error",
    "noData": "Kh√¥ng c√≥ d·ªØ li·ªáu",
    "notFound": "Kh√¥ng t√¨m th·∫•y",
    "serverError": "Server error",
    "success": "Th√†nh c√¥ng",
    "unauthorized": "Unauthorized access"
  },
  "mienPhi": "Mi·ªÖn ph√≠",
  "mienPhiSpanDivDivPClassname": ">\r\n                                Mi·ªÖn ph√≠\r\n                              </span>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                        <p className=",
  "minicheckMinicheckCauHoiKiemTraNhanhCauHoiKiemTraN": "miniCheck?: MiniCheck; // C√¢u h·ªèi ki·ªÉm tra nhanh\r\n}\r\n\r\n/**\r\n * C√¢u h·ªèi ki·ªÉm tra nhanh cho external links\r\n */\r\nexport interface MiniCheck {\r\n  questions: MiniCheckQuestion[];\r\n  passingScore: number; // ƒêi·ªÉm t·ªëi thi·ªÉu ƒë·ªÉ pass (v√≠ d·ª•: 1/1, 2/3)\r\n}\r\n\r\nexport interface MiniCheckQuestion {\r\n  id: string;\r\n  question: string;\r\n  options: string[];\r\n  correctAnswer: number; // Index c·ªßa ƒë√°p √°n ƒë√∫ng\r\n}\r\n\r\n/**\r\n * T√†i li·ªáu h·ªçc t·∫≠p\r\n */\r\nexport interface LearningResource {\r\n  id: string;\r\n  type: ResourceType;\r\n  title: string;\r\n  description?: string;\r\n  url: string;\r\n  \r\n  // C·∫•u h√¨nh\r\n  required: boolean; // B·∫Øt bu·ªôc ph·∫£i xem\r\n  threshold: ResourceThreshold;\r\n  learningOutcomes: string[]; // LO IDs li√™n quan\r\n  \r\n  // Metadata\r\n  duration?: number; // Video duration (seconds)\r\n  totalPages?: number; // PDF total pages\r\n  totalSlides?: number; // Slide count\r\n  estimatedTime?: number; // Th·ªùi gian ∆∞·ªõc t√≠nh (ph√∫t)\r\n  \r\n  // Display\r\n  order: number; // Th·ª© t·ª± hi·ªÉn th·ªã\r\n  thumbnailUrl?: string;\r\n  whyWatch?: string; //",
  "minicheckscoreNumberDiemMinicheck0100Minicheckansw": "miniCheckScore?: number; // ƒêi·ªÉm mini-check (0-100)\r\n  miniCheckAnswers?: number[]; // User answers\r\n  \r\n  // Anti-cheating\r\n  tabFocusTime?: number; // T·ªïng th·ªùi gian tab ·ªü foreground\r\n  totalTime?: number; // T·ªïng th·ªùi gian (bao g·ªìm background)\r\n  suspiciousActivity?: string[]; // Log c√°c h√†nh vi ƒë√°ng ng·ªù\r\n  \r\n  // Timestamps\r\n  startedAt: Date;\r\n  lastActivityAt: Date;\r\n}\r\n\r\n/**\r\n * Session h·ªçc t·∫≠p c·ªßa user cho m·ªôt quiz\r\n */\r\nexport interface LearningSession {\r\n  id: string;\r\n  userId: string;\r\n  quizId: string;\r\n  \r\n  // Progress\r\n  viewedResources: Record<string, ResourceViewProgress>; // resourceId ‚Üí progress\r\n  \r\n  // Gating status\r\n  ready: boolean; // ƒê·ªß ƒëi·ªÅu ki·ªán b·∫Øt ƒë·∫ßu quiz\r\n  readyAt?: Date;\r\n  \r\n  // Stats\r\n  totalResourcesRequired: number;\r\n  completedResourcesRequired: number;\r\n  completionPercent: number; // 0-100\r\n  \r\n  // Timestamps\r\n  startedAt: Date;\r\n  lastActivityAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\n/**\r\n * K·∫øt qu·∫£ ph√¢n t√≠ch sau khi l√†m b√†i\r\n */\r\nexport interface LearningAnalytics {\r\n  userId: string;\r\n  quizId: string;\r\n  \r\n  // Correlation gi·ªØa xem t√†i li·ªáu v√† ƒëi·ªÉm\r\n  watchedAllRequired: boolean;\r\n  watchedAllRecommended: boolean;\r\n  quizScore: number;\r\n  \r\n  // LO Performance\r\n  loPerformance: Record<string, {\r\n    loId: string;\r\n    correct: number;\r\n    total: number;\r\n    percentage: number;\r\n    relatedResources: string[]; // Resource IDs\r\n  }>;\r\n  \r\n  // Recommendations\r\n  recommendedReview: string[]; // Resource IDs n√™n xem l·∫°i\r\n  \r\n  // Timestamps\r\n  completedAt: Date;\r\n}\r\n\r\n/**\r\n * Instructor Analytics - Dashboard cho gi·∫£ng vi√™n\r\n */\r\nexport interface InstructorAnalytics {\r\n  quizId: string;\r\n  \r\n  // Resource completion stats\r\n  resourceStats: Record<string, {\r\n    resourceId: string;\r\n    totalViews: number;\r\n    completionRate: number; // %\r\n    avgTimeSpent: number; // seconds\r\n    avgScore?: number; // Score c·ªßa users ƒë√£ xem resource n√†y\r\n  }>;\r\n  \r\n  // LO correlation\r\n  loCorrelation: Record<string, {\r\n    loId: string;\r\n    relatedResources: string[];\r\n    avgScoreWithResources: number;\r\n    avgScoreWithoutResources: number;\r\n    improvement: number; // % improvement\r\n  }>;\r\n  \r\n  // Heatmap data\r\n  heatmap: {\r\n    resourceId: string;\r\n    loId: string;\r\n    errorReduction: number; // % gi·∫£m t·ª∑ l·ªá sai\r\n  }[];\r\n  \r\n  // A/B Testing results\r\n  abTests?: {\r\n    testId: string;\r\n    variants: {\r\n      variant: string;\r\n      threshold: any;\r\n      avgScore: number;\r\n      completionRate: number;\r\n    }[];\r\n  }[];\r\n  \r\n  updatedAt: Date;\r\n}\r\n\r\n/**\r\n * Config cho gating behavior\r\n */\r\nexport interface GatingConfig {\r\n  mode:",
  "minutes": "ph√∫t",
  "minutesPhut": "${minutes} ph√∫t",
  "missingfieldsResultThrowNewErrorthieuTruongBatBuoc": ", missingFields, result);\r\n    throw new Error(`Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: ${missingFields.join(",
  "moKhoa": "M·ªü kh√≥a",
  "moTa": "M√¥ t·∫£",
  "moTaAnhTuyChon": "M√¥ t·∫£ ·∫£nh (t√πy ch·ªçn)",
  "moTaLabelTextareaValueformdatadescription": ">\r\n                  M√¥ t·∫£\r\n                </label>\r\n                <textarea\r\n                  value={formData.description ||",
  "moTaNganGonNoiDungTaiLieu": "M√¥ t·∫£ ng·∫Øn g·ªçn n·ªôi dung t√†i li·ªáu...",
  "moTaNganGonVeNoiDungQuiz": "M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ n·ªôi dung quiz...",
  "moTaQuiz": "M√¥ t·∫£ quiz *",
  "moTaQuizLabelTextareaClassname": "/>\r\n                      M√¥ t·∫£ quiz *\r\n                    </label>\r\n                    <textarea\r\n                      className=",
  "moTabMoi": "M·ªü tab m·ªõi",
  "moTabMoispanButtonDownloadButtonOnclickhandledownl": ">M·ªü tab m·ªõi</span>\r\n          </button>\r\n\r\n          {/* Download */}\r\n          <button\r\n            onClick={handleDownload}\r\n            className=",
  "moTastrongDivClassname": ">üìÑ M√¥ t·∫£:</strong> \r\n            <div className=",
  "moTrongTabMoi": "M·ªü trong tab m·ªõi",
  "moi": "M·ªõi:",
  "moiNguoiDeuCoTheTimKiemVaLamQuizNay": "M·ªçi ng∆∞·ªùi ƒë·ªÅu c√≥ th·ªÉ t√¨m ki·∫øm v√† l√†m quiz n√†y",
  "moiNguoiDeuCoTheTimKiemVaLamQuizNayPDivQuizispubli": ">\r\n                    M·ªçi ng∆∞·ªùi ƒë·ªÅu c√≥ th·ªÉ t√¨m ki·∫øm v√† l√†m quiz n√†y\r\n                  </p>\r\n                </div>\r\n                {quiz.isPublic === true && (\r\n                  <div className=",
  "moiNhat": "üÜï M·ªõi nh·∫•t",
  "moiNhatoptionOptionValue": ">üÜï M·ªõi nh·∫•t</option>\r\n                <option value=",
  "multiplayer": {
    "connecting": "Connecting...",
    "connectionFailed": "Connection Failed",
    "createRoom": "T·∫°o ph√≤ng",
    "finished": "Finished",
    "host": "Ch·ªß ph√≤ng",
    "inProgress": "In Progress",
    "joinRoom": "Tham gia ph√≤ng",
    "leaveRoom": "Leave Room",
    "lobby": "Lobby",
    "notReady": "Not Ready",
    "players": "Ng∆∞·ªùi ch∆°i",
    "ready": "Ready",
    "roomCode": "M√£ ph√≤ng",
    "roomFull": "Room Full",
    "spectator": "Spectator",
    "startGame": "Start Game",
    "title": "Multiplayer Arena",
    "waiting": "ƒêang ch·ªù ng∆∞·ªùi ch∆°i"
  },
  "nPermissionDeniedStorageRulesChuaDeployHoacChuaDun": "\\n‚ö†Ô∏è PERMISSION DENIED - Storage Rules ch∆∞a deploy ho·∫∑c ch∆∞a ƒë√∫ng!",
  "nav": {
    "admin": "Qu·∫£n tr·ªã vi√™n",
    "creator": "Ng∆∞·ªùi t·∫°o",
    "dashboard": "B·∫£ng ƒëi·ªÅu khi·ªÉn",
    "favorites": "Y√™u th√≠ch",
    "home": "Trang ch·ªß",
    "leaderboard": "B·∫£ng x·∫øp h·∫°ng",
    "login": "ƒêƒÉng nh·∫≠p",
    "logout": "ƒêƒÉng xu·∫•t",
    "multiplayer": "Multiplayer",
    "offline": "Offline",
    "profile": "H·ªì s∆°",
    "quizzes": "Quiz",
    "register": "ƒêƒÉng k√Ω"
  },
  "neuBanKhongYeuCauDangKyVuiLongBoQuaEmailNay": "N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒëƒÉng k√Ω, vui l√≤ng b·ªè qua email n√†y",
  "neuKhongCoTrongStoreFetchTuFirestoreGetquizbyidqui": ");\r\n      // N·∫øu kh√¥ng c√≥ trong store, fetch t·ª´ Firestore\r\n      getQuizById(quizId).then(qz => {\r\n        if (qz) {\r\n          console.log(",
  "next": "Ti·∫øp theo",
  "nextquestioncountdown0CauHoiTiepTheoTrongNextquest": ">\n                        {nextQuestionCountdown > 0 \n                          ? `C√¢u h·ªèi ti·∫øp theo trong ${nextQuestionCountdown} gi√¢y...`\n                          :",
  "ngayTao": "Ng√†y t·∫°o:",
  "ngayTaospanSpanClassname": ">Ng√†y t·∫°o:</span>\r\n              <span className=",
  "ngonNgu": "Ng√¥n ng·ªØ",
  "ngonNguDanhDau": "Ng√¥n ng·ªØ ƒë√°nh d·∫•u",
  "ngonNguLabelSelectValueoptionslanguageOnchangeeSet": ">\r\n                      Ng√¥n ng·ªØ\r\n                    </label>\r\n                    <select\r\n                      value={options.language}\r\n                      onChange={(e) => setOptions(prev => ({ ...prev, language: e.target.value as any }))}\r\n                      className=",
  "ngonNguLapTrinh": "Ng√¥n ng·ªØ l·∫≠p tr√¨nh",
  "ngonNgulabelSelectValueconfiglanguageOnchangeeSetc": ">Ng√¥n ng·ªØ</label>\r\n                    <select\r\n                      value={config.language}\r\n                      onChange={(e) => setConfig({...config, language: e.target.value as any})}\r\n                      className=",
  "nguoiDaDanhGia": "ng∆∞·ªùi ƒë√£ ƒë√°nh gi√°",
  "nguoiDung": "Ng∆∞·ªùi d√πng",
  "nguoiDungAnDanh": "Ng∆∞·ªùi d√πng ·∫©n danh",
  "nguoiDungChuaDangNhap": "Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p",
  "nguoiDungKhongXacDinh": "Ng∆∞·ªùi d√πng kh√¥ng x√°c ƒë·ªãnh",
  "nguoiTao": "Ng∆∞·ªùi t·∫°o",
  "nguoiTaospanSpanClassname": ">Ng∆∞·ªùi t·∫°o:</span>\r\n              <span className=",
  "nhan": "üí° Nh·∫•n",
  "nhanKbdClassname": ">\r\n            üí° Nh·∫•n <kbd className=",
  "nhanVaoTab": ">\r\n                  Nh·∫•n v√†o tab",
  "nhanVaoTabTongQuanBenDuoiHoac": "Nh·∫•n v√†o tab \"üìä T·ªïng quan\" b√™n d∆∞·ªõi ho·∫∑c",
  "nhanXetTuyChon": "Nh·∫≠n x√©t (t√πy ch·ªçn)",
  "nhanXetTuyChonLabelTextareaValuecommentOnchangeeSe": ">\r\n                Nh·∫≠n x√©t (t√πy ch·ªçn)\r\n              </label>\r\n              <textarea\r\n                value={comment}\r\n                onChange={(e) => setComment(e.target.value)}\r\n                rows={4}\r\n                className=",
  "nhapApiKey": "Nh·∫≠p API key...",
  "nhapDapAnChinhXac": "Nh·∫≠p ƒë√°p √°n ch√≠nh x√°c...",
  "nhapDapAnVaoOBenDuoi": "üí° Nh·∫≠p ƒë√°p √°n v√†o √¥ b√™n d∆∞·ªõi:",
  "nhapDapAnVaoOBenDuoiPInputType": ">\r\n          üí° Nh·∫≠p ƒë√°p √°n v√†o √¥ b√™n d∆∞·ªõi:\r\n        </p>\r\n        <input\r\n          type=",
  "nhapMaXacThuc": "Nh·∫≠p m√£ x√°c th·ª±c",
  "nhapMaXacThucLabelDivClassname": ">\r\n            Nh·∫≠p m√£ x√°c th·ª±c\r\n          </label>\r\n          <div className=",
  "nhapNoiDung": "Nh·∫≠p n·ªôi dung...",
  "nhapPromptTuyChinhDeDieuChinhCachAiTaoCauHoi": "Nh·∫≠p prompt t√πy ch·ªânh ƒë·ªÉ ƒëi·ªÅu ch·ªânh c√°ch AI t·∫°o c√¢u h·ªèi...",
  "nhapTagsCachNhauBangDauPhay": "Nh·∫≠p tags, c√°ch nhau b·∫±ng d·∫•u ph·∫©y...",
  "nhapUrl": "üîó Nh·∫≠p URL",
  "nhapUrlButtonDivUploadModeDivId": ">\r\n              üîó Nh·∫≠p URL\r\n            </button>\r\n          </div>\r\n\r\n          {/* Upload Mode */}\r\n          <div id=",
  "nhayVaoMotQuizBatKyVaThuThachKienThucCuaBan": "Nh·∫£y v√†o m·ªôt quiz b·∫•t k·ª≥ v√† th·ª≠ th√°ch ki·∫øn th·ª©c c·ªßa b·∫°n",
  "nhayVaoMotQuizBatKyVaThuThachKienThucCuaBanpDivCla": ">Nh·∫£y v√†o m·ªôt quiz b·∫•t k·ª≥ v√† th·ª≠ th√°ch ki·∫øn th·ª©c c·ªßa b·∫°n</p>\r\n            <div className=",
  "nhungQuizDuocYeuThichNhat": "Nh·ªØng quiz ƒë∆∞·ª£c y√™u th√≠ch nh·∫•t",
  "nhungQuizDuocYeuThichNhatTuanNay": "Nh·ªØng quiz ƒë∆∞·ª£c y√™u th√≠ch nh·∫•t tu·∫ßn n√†y",
  "nhungQuizDuocYeuThichNhatpDivDivLinkTo": ">Nh·ªØng quiz ƒë∆∞·ª£c y√™u th√≠ch nh·∫•t</p>\r\n              </div>\r\n            </div>\r\n            <Link \r\n              to=",
  "nhungThaoTacThuongDungDeBatDau": "Nh·ªØng thao t√°c th∆∞·ªùng d√πng ƒë·ªÉ b·∫Øt ƒë·∫ßu",
  "nhungThaoTacThuongDungDeBatDaupDivDivDivClassname": ">Nh·ªØng thao t√°c th∆∞·ªùng d√πng ƒë·ªÉ b·∫Øt ƒë·∫ßu</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=",
  "no": "Kh√¥ng",
  "noData": "Kh√¥ng c√≥ d·ªØ li·ªáu",
  "noiDungCauHoi": "N·ªôi dung c√¢u h·ªèi",
  "noiDungDaTrichXuat": "‚úÖ N·ªôi dung ƒë√£ tr√≠ch xu·∫•t:",
  "noiDungDaTrichXuath4DivDivClassname": ">‚úÖ N·ªôi dung ƒë√£ tr√≠ch xu·∫•t:</h4>\r\n            </div>\r\n            \r\n            <div className=",
  "noiDungDeTaoCauHoinncontent": "N·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}",
  "noiDungDuocTrichXuatTuFileWordFilenameBaiHoc1HtmlC": "N·ªôi dung ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ file Word: ${file.name}\r\n\r\nB√†i h·ªçc 1: HTML C∆° b·∫£n\r\nHTML (HyperText Markup Language) l√† ng√¥n ng·ªØ ƒë√°nh d·∫•u si√™u vƒÉn b·∫£n ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o c·∫•u tr√∫c cho trang web.\r\nC√°c th·∫ª HTML c∆° b·∫£n: <html>, <head>, <body>, <div>, <p>, <h1>, <a>, <img>\r\nHTML5 b·ªï sung nhi·ªÅu th·∫ª semantic nh∆∞ <header>, <nav>, <section>, <article>, <footer>\r\n\r\nB√†i h·ªçc 2: CSS Styling\r\nCSS (Cascading Style Sheets) ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o ki·ªÉu v√† b·ªë c·ª•c cho c√°c ph·∫ßn t·ª≠ HTML.\r\nCSS Selector: element, class, id, attribute, pseudo-class\r\nCSS Properties: color, background, margin, padding, border, font, display, position\r\n\r\nB√†i h·ªçc 3: JavaScript Interactivity\r\nJavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ th√™m t√≠nh t∆∞∆°ng t√°c cho trang web.\r\nJavaScript c∆° b·∫£n: variables, functions, events, DOM manipulation\r\nES6+ features: arrow functions, let/const, template literals, destructuring, modules\r\n\r\nB√†i h·ªçc 4: Responsive Design\r\nResponsive design ƒë·∫£m b·∫£o trang web ho·∫°t ƒë·ªông t·ªët tr√™n m·ªçi thi·∫øt b·ªã.\r\nMedia queries trong CSS ƒë·ªÉ t·∫°o breakpoints cho c√°c k√≠ch th∆∞·ªõc m√†n h√¨nh kh√°c nhau.\r\nMobile-first approach: thi·∫øt k·∫ø cho mobile tr∆∞·ªõc, sau ƒë√≥ m·ªü r·ªông cho desktop.\r\n\r\nTh·ª±c h√†nh:\r\n- T·∫°o m·ªôt trang web ƒë∆°n gi·∫£n v·ªõi HTML\r\n- √Åp d·ª•ng CSS ƒë·ªÉ t·∫°o ki·ªÉu\r\n- Th√™m JavaScript ƒë·ªÉ t·∫°o t√≠nh t∆∞∆°ng t√°c\r\n- Ki·ªÉm tra responsive tr√™n c√°c thi·∫øt b·ªã kh√°c nhau",
  "noiDungMauDuocTrichXuatTuAnhOcrDangGapVanDeDayLaTe": "N·ªôi dung m·∫´u ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ ·∫£nh (OCR ƒëang g·∫∑p v·∫•n ƒë·ªÅ).\r\n\r\nƒê√¢y l√† text m·∫´u ƒë·ªÉ test ch·ª©c nƒÉng AI:\r\n- JavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn\r\n- React l√† library ƒë·ªÉ x√¢y d·ª±ng UI\r\n- Node.js cho ph√©p ch·∫°y JavaScript tr√™n server\r\n- HTML l√† ng√¥n ng·ªØ ƒë√°nh d·∫•u\r\n- CSS d√πng ƒë·ªÉ t·∫°o ki·ªÉu cho trang web\r\n\r\nB·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng n·ªôi dung n√†y ƒë·ªÉ test t√≠nh nƒÉng t·∫°o c√¢u h·ªèi v·ªõi AI.",
  "noiDungMauTuAnhFilenameJavascriptCoBanBienVariable": "N·ªôi dung m·∫´u t·ª´ ·∫£nh: ${file.name}\r\n\r\nJavaScript c∆° b·∫£n:\r\n- Bi·∫øn (variables): let, const, var\r\n- H√†m (functions): function declaration, arrow functions\r\n- V√≤ng l·∫∑p (loops): for, while, forEach\r\n- ƒêi·ªÅu ki·ªán (conditions): if, else, switch\r\n- M·∫£ng (arrays): [], push(), pop(), map(), filter()\r\n\r\nReact fundamentals:\r\n- Components: functional, class components\r\n- Props: passing data between components\r\n- State: useState hook, setState\r\n- Events: onClick, onChange, onSubmit\r\n- Lifecycle: useEffect hook\r\n\r\nB·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng n·ªôi dung n√†y ƒë·ªÉ test t√≠nh nƒÉng AI.",
  "noiDungMauTuFileFilenameWebDevelopmentTopicsHtmlSt": "N·ªôi dung m·∫´u t·ª´ file: ${file.name}\r\n\r\nWeb Development Topics:\r\n- HTML: structure, elements, attributes\r\n- CSS: styling, layout, responsive design\r\n- JavaScript: programming logic, DOM manipulation\r\n- Frameworks: React, Vue, Angular\r\n- Backend: Node.js, Express, databases\r\n\r\nB·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a n·ªôi dung n√†y v√† s·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o c√¢u h·ªèi.",
  "noiDungNguon": "N·ªôi dung ngu·ªìn:",
  "noiDungNguonh4PClassname": ">N·ªôi dung ngu·ªìn:</h4>\r\n                <p className=",
  "noiDungThongBaoDivLabelClassname": ">\r\n              {/* N·ªôi dung th√¥ng b√°o */}\r\n              <div>\r\n                <label className=",
  "nopBai": "N·ªôp b√†i",
  "nopBaiButtonDivDivDivUnansweredQuestionsModalModal": ">\r\n                N·ªôp b√†i\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Unanswered Questions Modal */}\r\n      {modalControls.showUnansweredModal && (\r\n        <div className=",
  "nopBaiLuon": "N·ªôp b√†i lu√¥n",
  "nopBaiThanhCong": "N·ªôp b√†i th√†nh c√¥ng!",
  "notifications": {
    "clear": "Clear all",
    "empty": "No notifications",
    "error": "Cannot load notifications",
    "loading": "Loading notifications...",
    "markAllRead": "Mark all as read",
    "new": "New",
    "title": "Th√¥ng b√°o"
  },
  "objectkeysthumbnails10000Doi10sRoiCheckIfOnprogres": ", Object.keys(thumbnails));\r\n              }, 10000); // ƒê·ª£i 10s r·ªìi check\r\n            }\r\n\r\n            if (onProgress) {\r\n              onProgress({\r\n                progress: 100,\r\n                bytesTransferred: uploadTask.snapshot.totalBytes,\r\n                totalBytes: uploadTask.snapshot.totalBytes,\r\n                state:",
  "ocrForImagesUsingTesseractjsClientsideConstExtract": "}`\r\n      };\r\n    }\r\n  };\r\n\r\n  // OCR for images using Tesseract.js (client-side)\r\n  const extractTextFromImage = async (file: File): Promise<FileProcessingResult> => {\r\n    try {\r\n      // Import Tesseract.js dynamically v·ªõi c√°ch import ch√≠nh x√°c\r\n      const { createWorker } = await import(",
  "offline": {
    "connected": "Connected",
    "disconnected": "Disconnected",
    "downloadHint": "Download quizzes to play without internet",
    "noQuizzes": "No offline quizzes yet",
    "pendingSync": "{{count}} items pending sync",
    "quizzesStored": "Stored Quizzes",
    "storageInfo": "Storage Information",
    "storageUsed": "Storage Used",
    "sync": "Sync",
    "syncing": "Syncing...",
    "title": "Offline Quizzes",
    "totalPlays": "Total Plays"
  },
  "ok": "ƒê·ªìng √Ω",
  "onclearselectionVoidOnrefreshVoidConstBulkactionsR": ";\r\n  onClearSelection: () => void;\r\n  onRefresh: () => void;\r\n}\r\n\r\nconst BulkActions: React.FC<BulkActionsProps> = ({ \r\n  selectedItems, \r\n  itemType, \r\n  onClearSelection, \r\n  onRefresh \r\n}) => {\n  const { t } = useTranslation();\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  if (selectedItems.length === 0) return null;\r\n\r\n  const bulkDelete = async () => {\r\n    if (!confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ${selectedItems.length} ${itemType}?`)) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const promises = selectedItems.map(id => \r\n        deleteDoc(doc(db, itemType, id))\r\n      );\r\n      await Promise.all(promises);\r\n      \r\n      toast.success(`ƒê√£ x√≥a ${selectedItems.length} ${itemType}!`);\r\n      onClearSelection();\r\n      onRefresh();\r\n    } catch (error) {\r\n      toast.error(",
  "onclickSetselectedrolecreatorDivClassnameflexItems": "}\r\n            onClick={() => setSelectedRole('creator')}\r\n          >\r\n            <div className=\"flex items-start space-x-3\">\r\n              <div className=\"flex-shrink-0\">\r\n                <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center\">\r\n                  <svg className=\"w-6 h-6 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex-1\">\r\n                <h3 className=\"font-semibold text-gray-800 mb-1\">Creator (Ng∆∞·ªùi t·∫°o)</h3>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  T·∫°o quiz cho c·ªông ƒë·ªìng, bao g·ªìm t·∫•t c·∫£ quy·ªÅn c·ªßa User\r\n                </p>\r\n                <ul className=\"mt-2 text-xs text-gray-500 space-y-1\">\r\n                  <li>‚Ä¢ T·∫•t c·∫£ quy·ªÅn c·ªßa User</li>\r\n                  <li>‚Ä¢ T·∫°o quiz m·ªõi</li>\r\n                  <li>‚Ä¢ Qu·∫£n l√Ω quiz ƒë√£ t·∫°o</li>\r\n                  <li>‚Ä¢ Quiz c·∫ßn admin ph√™ duy·ªát</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mt-6 flex space-x-3\">\r\n          <button\r\n            onClick={() => selectedRole && handleRoleSelection(selectedRole)}\r\n            disabled={!selectedRole || isLoading}\r\n            className={",
  "onclickSetselectedroleuserDivClassnameflexItemssta": "}\r\n            onClick={() => setSelectedRole('user')}\r\n          >\r\n            <div className=\"flex items-start space-x-3\">\r\n              <div className=\"flex-shrink-0\">\r\n                <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\r\n                  <svg className=\"w-6 h-6 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253\" />\r\n                  </svg>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex-1\">\r\n                <h3 className=\"font-semibold text-gray-800 mb-1\">User (Ng∆∞·ªùi d√πng)</h3>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  Tham gia l√†m quiz, xem k·∫øt qu·∫£ v√† theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p c·ªßa b·∫°n\r\n                </p>\r\n                <ul className=\"mt-2 text-xs text-gray-500 space-y-1\">\r\n                  <li>‚Ä¢ L√†m c√°c quiz c√≥ s·∫µn</li>\r\n                  <li>‚Ä¢ Xem l·ªãch s·ª≠ k·∫øt qu·∫£</li>\r\n                  <li>‚Ä¢ Theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Creator Role */}\r\n          <div \r\n            className={",
  "onclickdispatchfetchquizzesUserAsAnyThuLaiButtonDi": "onClick={()=>dispatch(fetchQuizzes({ user }) as any)}\r\n                >\r\n                  üîÑ Th·ª≠ l·∫°i\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ) : filtered.length === 0 ? (\r\n            <div className=",
  "onclickdispatchfetchquizzesUserAsAnyThuLaiKetNoiBu": "onClick={()=>dispatch(fetchQuizzes({ user }) as any)}\r\n              >\r\n                üîÑ Th·ª≠ l·∫°i k·∫øt n·ªëi\r\n              </button>\r\n            </div>\r\n          ) : error ? (\r\n            <div className=",
  "onclickhandleshareresultChiaSeKetQuaButtonButtonOn": "onClick={handleShareResult}\n      >\n        üì§ Chia s·∫ª k·∫øt qu·∫£\n      </Button>\n      \n      <Button\n        onClick={() => navigate(",
  "open": "M·ªü",
  "optionSelectDivDoiTuongNhanThongBaoDivLabelClassna": ")}</option>\r\n                </select>\r\n              </div>\r\n\r\n              {/* ƒê·ªëi t∆∞·ª£ng nh·∫≠n th√¥ng b√°o */}\r\n              <div>\r\n                <label className=",
  "optionValue33CauoptionOptionValue55CauoptionOption": ">\r\n              <option value={3}>3 c√¢u</option>\r\n              <option value={5}>5 c√¢u</option>\r\n              <option value={10}>10 c√¢u</option>\r\n              <option value={15}>15 c√¢u</option>\r\n              <option value={20}>20 c√¢u</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Generate Button */}\r\n        <button\r\n          onClick={generateQuestions}\r\n          disabled={isGenerating || (!formData.topic.trim() && !fileContent)}\r\n          className=",
  "optionsKiemTraXacThucConstAuthGetauthIfAuthcurrent": "} = options;\r\n\r\n    // Ki·ªÉm tra x√°c th·ª±c\r\n    const auth = getAuth();\r\n    if (!auth.currentUser) {\r\n      throw new Error(",
  "optionsTrySuDungEndpointCuaFirebaseProjectConstPro": "} = options;\r\n\r\n    try {\r\n      // S·ª≠ d·ª•ng endpoint c·ªßa Firebase project\r\n      const projectId =",
  "or": "Ho·∫∑c",
  "otpDaHetHanVuiLongYeuCauGuiLai": "OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu g·ª≠i l·∫°i.",
  "overviewProfileEditStatesConstDisplaynameSetdispla": "('overview');\r\n  \r\n  // Profile edit states\r\n  const [displayName, setDisplayName] = useState(user?.displayName || '');\r\n  const [currentPassword, setCurrentPassword] = useState(''); // M·∫≠t kh·∫©u c≈©\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [avatarUrl, setAvatarUrl] = useState(user?.photoURL || '');\r\n  const [saving, setSaving] = useState(false);\r\n  \r\n  // Enhanced pagination and filtering\r\n  const [itemsPerPage, setItemsPerPage] = useState(10);\r\n  const [currentPage, ] = useState(1);\r\n  const [showAll, setShowAll] = useState(false);\r\n  const [sortBy, setSortBy] = useState",
  "pDivDivTagsQuiztagsQuiztagslength0DivH3Classnamefo": ": '‚àû'}\n                  </p>\n                </div>\n              </div>\n\n              {/* Tags */}\n              {quiz.tags && quiz.tags.length > 0 && (\n                <div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">{t('quiz.topics')}</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {quiz.tags.map((tag, index) => (\n                      <span\n                        key={index}\n                        className=\"px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm\"\n                      >\n                        #{tag}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Learning Resources Section - NEW */}\n            {(quiz as any).learningResources && (quiz as any).learningResources.length > 0 && (\n              <div className=\"bg-gradient-to-br from-emerald-50 to-teal-50 rounded-xl shadow-sm p-6 border-2 border-emerald-200\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h2 className=\"text-xl font-bold text-emerald-900 flex items-center gap-2\">\n                    <BookOpen className=\"w-6 h-6 text-emerald-600\" />\n                    üìö T√†i li·ªáu h·ªçc t·∫≠p\n                  </h2>\n                  <span className=\"px-3 py-1 bg-emerald-200 text-emerald-800 rounded-full text-sm font-semibold\">\n                    {(quiz as any).learningResources.length} t√†i li·ªáu\n                  </span>\n                </div>\n\n                <p className=\"text-emerald-700 text-sm mb-4\">\n                  üí° Xem t√†i li·ªáu n√†y tr∆∞·ªõc khi l√†m b√†i ƒë·ªÉ ƒë·∫°t k·∫øt qu·∫£ t·ªët nh·∫•t!\n                </p>\n\n                <div className=\"space-y-3\">\n                  {(quiz as any).learningResources.map((resource: any, idx: number) => (\n                    <div \n                      key={resource.id || idx} \n                      className=\"bg-white rounded-lg p-4 border-2 border-emerald-100 hover:border-emerald-300 hover:shadow-md transition-all\"\n                    >\n                      <div className=\"flex items-start gap-4\">\n                        {/* Icon */}\n                        <div className={",
  "pDivDivThemCauHoiMoiConstAddquestionSetquizqQQuest": ")}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Th√™m c√¢u h·ªèi m·ªõi\r\n  const addQuestion = () => {\r\n    setQuiz(q => ({\r\n      ...q,\r\n      questions: [\r\n        ...q.questions,\r\n        {\r\n          id: generateId(),\r\n          text:",
  "pDivModalGuiThongBaoShownotificationmodalDivClassn": ")}\r\n        </p>\r\n      </div>\r\n\r\n      {/* Modal g·ª≠i th√¥ng b√°o */}\r\n      {showNotificationModal && (\r\n        <div className=",
  "pPStrongquyenRiengTustrong": ")}</p>\r\n          <p>\r\n            <strong>Quy·ªÅn ri√™ng t∆∞:</strong>{",
  "pProviderSelectedprovidernamepPModelConfigmodelpPS": ">\r\n                  <p>‚Ä¢ Provider: {selectedProvider?.name}</p>\r\n                  <p>‚Ä¢ Model: {config?.model}</p>\r\n                  <p>‚Ä¢ S·ªë c√¢u h·ªèi: {config?.maxQuestions}</p>\r\n                  <p>‚Ä¢ ƒê·ªô kh√≥: {config?.difficulty}</p>\r\n                  <p>‚Ä¢ Lo·∫°i: {config?.questionTypes.join(",
  "parseQuestionsTuFirebaseFunctionResponsePrivateSta": ";\r\n  }\r\n\r\n  /**\r\n   * Parse questions t·ª´ Firebase Function response\r\n   */\r\n  private static parseQuestionsFromResponse(questionsData: any[]): Question[] {\r\n    try {\r\n      const questions: Question[] = [];\r\n      \r\n      for (const questionData of questionsData) {\r\n        const question: Question = {\r\n          id:",
  "payloadUseridUserdataidNewroleEtargetvalueMessageB": ", payload: { userId: userData.id, newRole: e.target.value }, message: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·ªïi quy·ªÅn cho ng∆∞·ªùi d√πng n√†y th√†nh ${e.target.value}?` })}\r\n                    disabled={userData.id === user?.uid}\r\n                    className=",
  "pdferrorFallbackVoiNoiDungMockThongMinhHonConstMoc": ", pdfError);\r\n        \r\n        // Fallback v·ªõi n·ªôi dung mock th√¥ng minh h∆°n\r\n        const mockText = `\r\nN·ªôi dung ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ file PDF: ${file.name}\r\n\r\nCh∆∞∆°ng 1: Gi·ªõi thi·ªáu v·ªÅ L·∫≠p tr√¨nh Web\r\nJavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o t√≠nh t∆∞∆°ng t√°c cho trang web.\r\nHTML (HyperText Markup Language) l√† ng√¥n ng·ªØ ƒë√°nh d·∫•u c∆° b·∫£n ƒë·ªÉ x√¢y d·ª±ng c·∫•u tr√∫c trang web.\r\nCSS (Cascading Style Sheets) ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ thi·∫øt k·∫ø v√† t·∫°o ki·ªÉu cho c√°c ph·∫ßn t·ª≠ HTML.\r\n\r\nCh∆∞∆°ng 2: Framework v√† Library\r\nReact l√† m·ªôt JavaScript library ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Facebook ƒë·ªÉ x√¢y d·ª±ng giao di·ªán ng∆∞·ªùi d√πng.\r\nNode.js cho ph√©p ch·∫°y JavaScript tr√™n ph√≠a server, m·ªü r·ªông kh·∫£ nƒÉng c·ªßa JavaScript.\r\nExpress.js l√† framework web cho Node.js, gi√∫p x√¢y d·ª±ng API v√† web application d·ªÖ d√†ng.\r\n\r\nCh∆∞∆°ng 3: Database v√† Backend\r\nMongoDB l√† database NoSQL ph·ªï bi·∫øn, l∆∞u tr·ªØ d·ªØ li·ªáu d∆∞·ªõi d·∫°ng document.\r\nMySQL l√† h·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu quan h·ªá (RDBMS) m√£ ngu·ªìn m·ªü.\r\nAPI (Application Programming Interface) l√† c√°ch ƒë·ªÉ c√°c ·ª©ng d·ª•ng giao ti·∫øp v·ªõi nhau.\r\n\r\nK·∫øt lu·∫≠n:\r\nL·∫≠p tr√¨nh web hi·ªán ƒë·∫°i y√™u c·∫ßu ki·∫øn th·ª©c v·ªÅ nhi·ªÅu c√¥ng ngh·ªá kh√°c nhau.\r\n        `.trim();\r\n        \r\n        return {\r\n          extractedText: mockText,\r\n          questions: [],\r\n          success: true\r\n        };\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error(",
  "pemailNayDuocGuiTuDongVuiLongKhongTraLoipP2025Quiz": ">\r\n            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>\r\n            <p>¬© 2025 Quiz App. All rights reserved.</p>\r\n          </div>\r\n        </div>\r\n      </body>\r\n      </html>\r\n    `;\r\n\r\n    // T·∫°o document trong collection",
  "phaiXemTruocKhiLamBai": "ph·∫£i xem tr∆∞·ªõc khi l√†m b√†i!",
  "phanBoDoKho": "Ph√¢n b·ªë ƒë·ªô kh√≥",
  "phanBoDoKhoh3DivClassname": ">Ph√¢n b·ªë ƒë·ªô kh√≥</h3>\r\n        <div className=",
  "phanTichHinhAnhNayVaTrichXuatNoiDungVanBanNeuCoBie": "Ph√¢n t√≠ch h√¨nh ·∫£nh n√†y v√† tr√≠ch xu·∫•t n·ªôi dung vƒÉn b·∫£n. \r\nN·∫øu c√≥ bi·ªÉu ƒë·ªì, b·∫£ng, ho·∫∑c th√¥ng tin tr·ª±c quan, h√£y m√¥ t·∫£ chi ti·∫øt.\r\nTr·∫£ v·ªÅ n·ªôi dung m·ªôt c√°ch c√≥ c·∫•u tr√∫c v√† r√µ r√†ng ƒë·ªÉ c√≥ th·ªÉ t·∫°o c√¢u h·ªèi.",
  "phatSpace": "Ph√°t (Space)",
  "phatTrienWebFrontendVaBackend": "Ph√°t tri·ªÉn web frontend v√† backend",
  "phoBien": "üî• Ph·ªï bi·∫øn",
  "phoBienNhat": "üî• Ph·ªï bi·∫øn nh·∫•t",
  "phoBienNhatoptionOptionValue": ">üî• Ph·ªï bi·∫øn nh·∫•t</option>\r\n              <option value=",
  "phoBienoptionOptionValue": ">üî• Ph·ªï bi·∫øn</option>\r\n                <option value=",
  "phongNayYeuCauMatKhau": "Ph√≤ng n√†y y√™u c·∫ßu m·∫≠t kh·∫©u",
  "phongTo": "Ph√≥ng to",
  "pkhongNhanDuocMapPkiemTraThuMucSpamHoacNhan": ">\r\n          <p>Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£?</p>\r\n          <p>Ki·ªÉm tra th∆∞ m·ª•c spam ho·∫∑c nh·∫•n",
  "placeholderdapAnStringfromcharcode65IdxValueatextO": "placeholder={`ƒê√°p √°n ${String.fromCharCode(65 + idx)}`}\r\n                value={a.text}\r\n                onChange={e => handleAnswerChange(idx,",
  "pleaseWait": "Vui l√≤ng ƒë·ª£i m·ªôt ch√∫t",
  "popFunctionDeRetryLayThumbnailUrlConstGetthumbnail": ").pop();\r\n\r\n  // Function ƒë·ªÉ retry l·∫•y thumbnail URL\r\n  const getThumbnailWithRetry = async (\r\n    thumbnailPath: string,\r\n    maxRetries: number,\r\n    size: string\r\n  ): Promise<string | null> => {\r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        const thumbnailRef = ref(storage, thumbnailPath);\r\n        const url = await getDownloadURL(thumbnailRef);\r\n        console.log(`‚úÖ Thumbnail ${size} ready after ${attempt} attempts`);\r\n        return url;\r\n      } catch (error: any) {\r\n        if (attempt < maxRetries) {\r\n          // ƒê·ª£i l√¢u h∆°n cho m·ªói l·∫ßn retry (2s, 3s, 4s, ...)\r\n          const waitTime = 2000 + (attempt * 1000);\r\n          console.log(`‚è≥ Waiting for thumbnail ${size}... attempt ${attempt}/${maxRetries}`);\r\n          await new Promise(resolve => setTimeout(resolve, waitTime));\r\n        } else {\r\n          console.log(`‚ö†Ô∏è Thumbnail ${size} not available after ${maxRetries} attempts (Extension may still be processing)`);\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // L·∫•y t·∫•t c·∫£ thumbnails song song\r\n  const thumbnailPromises = thumbnailSizes.map(async ({ key, size, maxRetries }) => {\r\n    const thumbnailFileName = `${nameWithoutExt}_${size}.${extension}`;\r\n    const thumbnailPath = `thumbnails/${thumbnailFileName}`;\r\n    const url = await getThumbnailWithRetry(thumbnailPath, maxRetries, size);\r\n    return { key, url };\r\n  });\r\n\r\n  const results = await Promise.all(thumbnailPromises);\r\n  \r\n  // Map results to object\r\n  results.forEach(({ key, url }) => {\r\n    if (url) {\r\n      thumbnailUrls[key] = url;\r\n    }\r\n  });\r\n\r\n  return thumbnailUrls;\r\n};\r\n\r\n/**\r\n * Upload image to Firebase Storage v·ªõi Progress Callback\r\n */\r\nexport const uploadImage = async (\r\n  file: File,\r\n  options: ImageUploadOptions = {},\r\n  onProgress?: (progress: UploadProgress) => void\r\n): Promise<ImageUploadResult> => {\r\n  const auth = getAuth();\r\n  const currentUser = auth.currentUser;\r\n\r\n  if (!currentUser) {\r\n    return {\r\n      success: false,\r\n      error:",
  "previous": "Tr∆∞·ªõc ƒë√≥",
  "prevtopicUsefilecontentTrueToastsuccessdaXuLyFileF": "|| prev.topic,\r\n          useFileContent: true \r\n        }));\r\n        toast.success(`ƒê√£ x·ª≠ l√Ω file ${file.name} th√†nh c√¥ng!`);\r\n      } else {\r\n        toast.error(result.error ||",
  "privateRiengTu": "üîí Private (Ri√™ng t∆∞)",
  "privateRiengTuH4PClassname": "}`}>\r\n                    üîí Private (Ri√™ng t∆∞)\r\n                  </h4>\r\n                  <p className=",
  "privateRiengTuH4PClassnametextsmTextgray600ChiBanV": "}>\r\n                    üîí Private (Ri√™ng t∆∞)\r\n                  </h4>\r\n                  <p className=\"text-sm text-gray-600\">\r\n                    Ch·ªâ b·∫°n v√† ng∆∞·ªùi c√≥ link m·ªõi truy c·∫≠p ƒë∆∞·ª£c\r\n                  </p>\r\n                </div>\r\n                {quiz.isPublic === false && (\r\n                  <div className=\"absolute top-2 right-2\">\r\n                    <div className=\"w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center\">\r\n                      <svg className=\"w-4 h-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </button>\r\n          </div>\r\n\r\n          {/* Info message */}\r\n          <div className={",
  "processing": "ƒêang x·ª≠ l√Ω...",
  "profile": {
    "achievementSystem": "Achievement system",
    "achievements": "Achievements",
    "authenticating": "Authenticating...",
    "avatarUrl": "Avatar URL",
    "changePassword": "ƒê·ªïi m·∫≠t kh·∫©u",
    "confirmNewPassword": "Confirm New Password",
    "currentPassword": "Current Password",
    "currentPasswordRequired": "You need to enter the correct current password to authenticate before changing to a new password",
    "editProfile": "Ch·ªânh s·ª≠a h·ªì s∆°",
    "emailNotFound": "User email not found",
    "fillAllFields": "Please fill in all fields",
    "filters": {
      "score": {
        "all": "T·∫•t c·∫£",
        "high": "High (‚â•80%)",
        "low": "Low (<60%)",
        "medium": "Medium (60-79%)"
      }
    },
    "inDevelopment": "Feature under development",
    "loginRequired": "Please login to view profile",
    "memberSince": "Member since",
    "myProfile": "H·ªì s∆° c·ªßa t√¥i",
    "newPassword": "New Password",
    "noResults": "No results yet",
    "noResultsDesc": "You haven't completed any quizzes. Start your first quiz!",
    "pagination": {
      "next": "Ti·∫øp theo",
      "of": "c·ªßa",
      "pageXofY": "Page {{x}}/{{y}}",
      "paginate": "Paginate",
      "perPage10": "10/page",
      "perPage100": "100/page",
      "perPage25": "25/page",
      "perPage50": "50/page",
      "prev": "Tr∆∞·ªõc ƒë√≥",
      "results": "results",
      "showing": "Showing"
    },
    "passwordChangeError": "Error changing password",
    "passwordChangeSuccess": "Password changed successfully!",
    "passwordMismatch": "New password and confirm password do not match",
    "passwordMustDiffer": "New password must be different from current password",
    "passwordTooShort": "New password must be at least 6 characters",
    "profileUpdateError": "Error updating profile",
    "profileUpdateSuccess": "Profile updated successfully!",
    "recentActivity": "Recent Activity",
    "requiresRecentLogin": "Login session has expired. Please logout and login again",
    "searchPlaceholder": "Search quizzes...",
    "settings": {
      "title": "Personal information"
    },
    "sort": {
      "date": "Ng√†y",
      "label": "S·∫Øp x·∫øp",
      "percentage": "Percentage",
      "score": "ƒêi·ªÉm"
    },
    "stats": {
      "accuracy": "Accuracy",
      "averageScore": "Average Score",
      "completedQuizzes": "Completed Quizzes",
      "correctRate": "Correct rate",
      "highScores": "High Scores",
      "onTotal": "On total quizzes",
      "over80": ">= 80%"
    },
    "tabs": {
      "achievements": "Achievements",
      "history": "Quiz History",
      "overview": "Overview",
      "settings": "C√†i ƒë·∫∑t"
    },
    "updateProfile": "C·∫≠p nh·∫≠t h·ªì s∆°",
    "updating": "Updating...",
    "viewAgain": "Review quiz",
    "viewAllCount": "View all ({{count}})",
    "viewAllHistory": "View all history",
    "viewDetails": "View detailed result",
    "weakPassword": "New password is too weak. Please choose a stronger password (at least 6 characters)",
    "wrongPassword": "Old password is incorrect"
  },
  "prompt11000ReturnSuccessTrueQuestionsMessageDaTaoT": ", prompt), 1, 1000);\r\n        return {\r\n          success: true,\r\n          questions,\r\n          message: `ƒê√£ t·∫°o th√†nh c√¥ng ${questions.length} c√¢u h·ªèi`\r\n        };\r\n      } catch (e) {\r\n        lastError = e;\r\n      }\r\n\r\n      throw lastError || new Error(",
  "promptSystempromptnnnoiDungDeTaoCauHoinncontentStr": ",\r\n          prompt: `${systemPrompt}\\n\\nN·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}`,\r\n          stream: false,\r\n          options: {\r\n            temperature: 0.7,\r\n            num_predict: 2000\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Local AI Error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      const generatedText = data.response;\r\n\r\n      return OpenAIService.parseQuestionsFromText(generatedText);\r\n    } catch (error) {\r\n      console.error(",
  "promptTuyChinhTuyChon": "Prompt t√πy ch·ªânh (t√πy ch·ªçn)",
  "promptTuyChinhTuyChonLabelTextareaValuecustompromp": ">\r\n                    Prompt t√πy ch·ªânh (t√πy ch·ªçn)\r\n                  </label>\r\n                  <textarea\r\n                    value={customPrompt}\r\n                    onChange={(e) => setCustomPrompt(e.target.value)}\r\n                    rows={4}\r\n                    className=",
  "providerConfigGenerateReviewindexofstepII1DivI3Div": "}>\r\n                  {['provider', 'config', 'generate', 'review'].indexOf(step) > i ? '‚úì' : i + 1}\r\n                </div>\r\n                {i < 3 && <div className=\"w-8 h-1 bg-white bg-opacity-30 mx-2\"></div>}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"flex-1 overflow-y-auto p-6\">\r\n          {step === 'provider' && (\r\n            <div className=\"space-y-6\">\r\n              <div className=\"text-center\">\r\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">Ch·ªçn AI Provider</h3>\r\n                <p className=\"text-gray-600\">L·ª±a ch·ªçn nh√† cung c·∫•p AI ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n</p>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                {providers.map((provider: AIProvider) => (\r\n                  <div\r\n                    key={provider.id}\r\n                    onClick={() => handleProviderSelect(provider)}\r\n                    className=\"border-2 border-gray-200 rounded-xl p-6 cursor-pointer hover:border-blue-500 hover:bg-blue-50 transition-all group\"\r\n                  >\r\n                    <div className=\"flex items-start justify-between\">\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"flex items-center space-x-3 mb-3\">\r\n                          <div className={",
  "provideridOpenaiBrainClassnamew5H5ProvideridClaude": "}>\r\n                            {provider.id === 'openai' ? <Brain className=\"w-5 h-5\" /> :\r\n                             provider.id === 'claude' ? <Shield className=\"w-5 h-5\" /> :\r\n                             provider.id === 'gemini' ? <Globe className=\"w-5 h-5\" /> :\r\n                             <Cpu className=\"w-5 h-5\" />}\r\n                          </div>\r\n                          <div>\r\n                            <h4 className=\"font-semibold text-gray-900\">{provider.name}</h4>\r\n                            {provider.free && (\r\n                              <span className=\"inline-block bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full\">\r\n                                Mi·ªÖn ph√≠\r\n                              </span>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                        <p className=\"text-gray-600 text-sm\">{provider.description}</p>\r\n                        <div className=\"mt-3 flex flex-wrap gap-2\">\r\n                          {provider.models.slice(0, 2).map((model: string) => (\r\n                            <span key={model} className=\"bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded\">\r\n                              {model}\r\n                            </span>\r\n                          ))}\r\n                          {provider.models.length > 2 && (\r\n                            <span className=\"text-gray-500 text-xs\">+{provider.models.length - 2} more</span>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <Sparkles className=\"w-5 h-5 text-gray-400 group-hover:text-blue-500 transition-colors\" />\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {step === 'config' && config && selectedProvider && (\r\n            <div className=\"space-y-6\">\r\n              <div className=\"text-center\">\r\n                <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">C·∫•u h√¨nh AI</h3>\r\n                <p className=\"text-gray-600\">T√πy ch·ªânh c√°ch AI t·∫°o c√¢u h·ªèi cho b·∫°n</p>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n                {/* API Configuration */}\r\n                <div className=\"space-y-4\">\r\n                  <h4 className=\"font-semibold text-gray-900 border-b pb-2\">API Configuration</h4>\r\n                  \r\n                  {selectedProvider.requiresApiKey && (\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                        API Key\r\n                      </label>\r\n                      <div className=\"relative\">\r\n                        <input\r\n                          type={showApiKey ? 'text' : 'password'}\r\n                          value={config.apiKey || ''}\r\n                          onChange={(e) => setConfig({...config, apiKey: e.target.value})}\r\n                          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\r\n                          placeholder=\"Nh·∫≠p API key...\"\r\n                        />\r\n                        <button\r\n                          type=\"button\"\r\n                          onClick={() => setShowApiKey(!showApiKey)}\r\n                          className=\"absolute right-3 top-2.5 text-gray-400 hover:text-gray-600\"\r\n                        >\r\n                          {showApiKey ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Model</label>\r\n                    <select\r\n                      value={config.model}\r\n                      onChange={(e) => setConfig({...config, model: e.target.value})}\r\n                      className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\r\n                    >\r\n                      {selectedProvider.models.map((model: string) => (\r\n                        <option key={model} value={model}>{model}</option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                      Temperature: {config.temperature}\r\n                    </label>\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"1\"\r\n                      step=\"0.1\"\r\n                      value={config.temperature}\r\n                      onChange={(e) => setConfig({...config, temperature: parseFloat(e.target.value)})}\r\n                      className=\"w-full\"\r\n                    />\r\n                    <div className=\"flex justify-between text-xs text-gray-500\">\r\n                      <span>Conservative</span>\r\n                      <span>Creative</span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Test Connection */}\r\n                  <button\r\n                    onClick={handleTestConnection}\r\n                    disabled={testingConnection || (selectedProvider.requiresApiKey && !config.apiKey)}\r\n                    className=\"w-full flex items-center justify-center space-x-2 py-2 px-4 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\r\n                  >\r\n                    {testingConnection ? (\r\n                      <Loader2 className=\"w-4 h-4 animate-spin\" />\r\n                    ) : (\r\n                      <Zap className=\"w-4 h-4\" />\r\n                    )}\r\n                    <span>{testingConnection ? 'Testing...' : 'Test Connection'}</span>\r\n                  </button>\r\n\r\n                  {connectionStatus && (\r\n                    <div className={",
  "ptrangNayHienThipUlClassname": ">\r\n              <p>Trang n√†y hi·ªÉn th·ªã:</p>\r\n              <ul className=",
  "publicCongKhai": "üåç Public (C√¥ng khai)",
  "publicCongKhaiH4PClassname": "}`}>\r\n                    üåç Public (C√¥ng khai)\r\n                  </h4>\r\n                  <p className=",
  "publicCongKhaiH4PClassnametextsmTextgray600MoiNguo": "}>\r\n                    üåç Public (C√¥ng khai)\r\n                  </h4>\r\n                  <p className=\"text-sm text-gray-600\">\r\n                    M·ªçi ng∆∞·ªùi ƒë·ªÅu c√≥ th·ªÉ t√¨m ki·∫øm v√† l√†m quiz n√†y\r\n                  </p>\r\n                </div>\r\n                {quiz.isPublic === true && (\r\n                  <div className=\"absolute top-2 right-2\">\r\n                    <div className=\"w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center\">\r\n                      <svg className=\"w-4 h-4 text-white\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\r\n                      </svg>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </button>\r\n\r\n            {/* Private Option */}\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => setQuiz(q => ({ ...q, isPublic: false }))}\r\n              className={",
  "qidIspurgedTrueXoaUserDaBiDanhDauDeletedtrueConstU": ", q.id), { isPurged: true }));\r\n\r\n      // X√≥a user ƒë√£ b·ªã ƒë√°nh d·∫•u deleted=true\r\n      const usersSnapshot = await getDocs(collection(db,",
  "qpointsDiemSpanDivDivQtype": ">\r\n                  {q.points} ƒëi·ªÉm\r\n                </span>\r\n              </div>\r\n            </div>\r\n            \r\n            {q.type ===",
  "quaNhieuYeuCauVuiLongThuLaiSau": "Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau",
  "quaTrinhNayCoTheMatVaiPhut": "Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t",
  "quaTrinhNayCoTheMatVaiPhutpDivCase": ">Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t</p>\r\n          </div>\r\n        );\r\n\r\n      case",
  "quanLyCreator": "Qu·∫£n l√Ω Creator",
  "quanLyCreatorh1PClassname": ">Qu·∫£n l√Ω Creator</h1>\r\n          <p className=",
  "quanLyQuizDaTao": "‚Ä¢ Qu·∫£n l√Ω quiz ƒë√£ t·∫°o",
  "quanLyVaTheoDoiHoatDongCuaCacCreator": "Qu·∫£n l√Ω v√† theo d√µi ho·∫°t ƒë·ªông c·ªßa c√°c creator",
  "quanLyVaTheoDoiHoatDongCuaCacCreatorpDivStatsCards": ">Qu·∫£n l√Ω v√† theo d√µi ho·∫°t ƒë·ªông c·ªßa c√°c creator</p>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        {stats && (\r\n          <div className=",
  "quanTri": "Qu·∫£n tr·ªã",
  "quanTrongChiTraVeJsonThuanTuyKhongThemTextHoacMark": "}\r\n  ]\r\n}\r\n\r\nQUAN TR·ªåNG: Ch·ªâ tr·∫£ v·ªÅ JSON thu·∫ßn t√∫y, kh√¥ng th√™m text ho·∫∑c markdown n√†o kh√°c.\r\n`;\r\n  }\r\n\r\n  /**\r\n   * Parse questions t·ª´ Firebase Function response\r\n   */\r\n  private static parseQuestionsFromResponse(questionsData: any[]): Question[] {\r\n    try {\r\n      const questions: Question[] = [];\r\n      \r\n      for (const questionData of questionsData) {\r\n        const question: Question = {\r\n          id: `q_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n          text: questionData.text ||",
  "quayLai": "‚Üê Quay l·∫°i",
  "quayLaiAdmin": "Quay l·∫°i Admin",
  "quayLaiAdminButtonDivClassname": "/>\r\n            Quay l·∫°i Admin\r\n          </button>\r\n          \r\n          <div className=",
  "quayLaiButtonButtonOnclickasyncConsolelog": ">\r\n                ‚Üê Quay l·∫°i\r\n              </button>\r\n              <button\r\n                onClick={async () => {\r\n                  console.log(",
  "quayLaiDangNhap": "Quay l·∫°i ƒëƒÉng nh·∫≠p",
  "quayLaiProfile": "Quay l·∫°i Profile",
  "quayLaiProfileButtonDivDivConstIsexcellentPercenta": ">\r\n            Quay l·∫°i Profile\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const isExcellent = percentage >= 80;\r\n\r\n  return (\r\n    <div className=",
  "quenMatKhau": "Qu√™n m·∫≠t kh·∫©u",
  "quenMatKhauh2DivSentFormOnsubmithandleresetpasswor": ">Qu√™n m·∫≠t kh·∫©u</h2>\r\n        </div>\r\n\r\n        {!sent ? (\r\n          <form onSubmit={handleResetPassword} className=",
  "questionanswerslength2ReturnToiThieu2DapAnOnchange": ") && question.answers.length <= 2) return; // T·ªëi thi·ªÉu 2 ƒë√°p √°n\r\n    \r\n    onChange({\r\n      ...question,\r\n      answers: question.answers.filter((_, i) => i !== idx),\r\n    });\r\n  };\r\n\r\n  const handleSetCorrect = (idx: number) => {\r\n    if (question.type ===",
  "questionsQuestionDurationNumberInMinutesCreatedbyS": ";\r\n  questions: Question[];\r\n  duration: number; // in minutes\r\n  createdBy: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  isPublished: boolean;\r\n  tags: string[];\r\n  imageUrl?: string;\r\n  \r\n  // **LEARNING RESOURCES**: T√†i li·ªáu h·ªçc t·∫≠p\r\n  resources?: Array<{\r\n    id: string;\r\n    type:",
  "questionsSuccessFalseErrorLoiDocPdfErrorInstanceof": ",\r\n        questions: [],\r\n        success: false,\r\n        error: `L·ªói ƒë·ªçc PDF: ${error instanceof Error ? error.message :",
  "questionsSuccessFalseErrorLoiDocSpreadsheetErrorIn": ",\r\n        questions: [],\r\n        success: false,\r\n        error: `L·ªói ƒë·ªçc spreadsheet: ${error instanceof Error ? error.message :",
  "questionsSuccessFalseErrorLoiDocTextFileErrorInsta": ",\r\n        questions: [],\r\n        success: false,\r\n        error: `L·ªói ƒë·ªçc text file: ${error instanceof Error ? error.message :",
  "questionsSuccessFalseErrorLoiDocWordErrorInstanceo": ",\r\n        questions: [],\r\n        success: false,\r\n        error: `L·ªói ƒë·ªçc Word: ${error instanceof Error ? error.message :",
  "questionsSuccessFalseErrorLoiXuLyFileErrorInstance": ",\r\n        questions: [],\r\n        success: false,\r\n        error: `L·ªói x·ª≠ l√Ω file: ${error instanceof Error ? error.message :",
  "questionsTagsAllowretakeTrueMacDinhChoPhepLamLaiIs": ",\r\n  questions: [],\r\n  tags: [],\r\n  allowRetake: true, // M·∫∑c ƒë·ªãnh cho ph√©p l√†m l·∫°i\r\n  isPublic: true, // M·∫∑c ƒë·ªãnh l√† Public\r\n  resources: [], // üÜï Learning Materials\r\n};\r\n\r\nexport const categories = [\r\n  { value:",
  "quiz": {
    "answer": "ƒê√°p √°n",
    "author": "Author",
    "averageScore": "Average Score",
    "backToQuizList": "Back to quiz list",
    "category": "Ch·ªß ƒë·ªÅ",
    "categoryAndDifficulty": "Category & Difficulty",
    "completed": "Completed",
    "correctAnswer": "Correct Answer",
    "create": "T·∫°o Quiz",
    "createFirstQuiz": "Create First Quiz",
    "createLoginRequired": "You need to login to create quizzes",
    "createQuizzesToTest": "Create some quizzes to test the review system",
    "createSuccess": "Quiz created successfully",
    "deleteSuccess": "Quiz deleted successfully",
    "description": "Description",
    "detailedInfo": "Detailed Information",
    "difficulty": "Difficulty",
    "draft": "B·∫£n nh√°p",
    "duration": "Duration",
    "editReasonRequired": "Please enter edit reason",
    "editRequest": {
      "needPermission": "Quiz is approved, need admin permission to edit",
      "pendingExists": "There is a pending edit request",
      "placeholder": "Please describe why you want to edit this quiz...",
      "reason": "Edit reason",
      "submit": "Send request",
      "title": "Edit Quiz Request",
      "warning": "Quiz has been approved. Edit request will be sent to admin for review. After getting permission to edit, you need to resubmit for admin approval of new content."
    },
    "editRequestError": "Error sending edit request",
    "exploreDescription": "Discover new knowledge through exciting quizzes",
    "exploreQuizzes": "Explore Quizzes",
    "loadError": "Error loading quiz list",
    "loading": "Loading quiz...",
    "loadingRealQuizzes": "Loading real quizzes list...",
    "moreQuestions": "... and {{count}} more questions",
    "myQuizzes": "Quiz c·ªßa t√¥i",
    "myQuizzesDescription": "Manage and track quizzes you've created",
    "noDescription": "No description",
    "noMatchFound": "No quizzes match the filter",
    "noQuizzesInDatabase": "No quizzes in database",
    "noQuizzesYet": "You haven't created any quizzes yet. Create your first quiz!",
    "noTimeLimit": "No time limit",
    "noTitle": "No title",
    "notFound": "Quiz not found",
    "playNow": "Play Now",
    "players": "Ng∆∞·ªùi ch∆°i",
    "points": "Points: {{points}}",
    "popularQuizzes": "Quiz ph·ªï bi·∫øn",
    "preview": "Preview",
    "previewPage": {
      "backToList": "Back to quiz list",
      "loadingQuiz": "Loading quiz...",
      "quizNotFound": "Quiz not found",
      "title": "Quiz Preview"
    },
    "published": "Published",
    "question": "C√¢u h·ªèi",
    "questionType": "Question Type",
    "questionTypes": {
      "boolean": "True/False",
      "multiple": "Multiple Choice",
      "short_answer": "Short Answer"
    },
    "questions": "C√¢u h·ªèi",
    "questionsCount": "{{count}} questions",
    "rating": "Rating",
    "ratingCount": "{{count}} ratings",
    "result": "K·∫øt qu·∫£",
    "reviewCount": "Review Count",
    "reviewText": "Review Content",
    "reviews": {
      "alreadyReviewed": "You have already reviewed this quiz. Thank you for your feedback!",
      "beFirst": "Be the first to review this quiz!",
      "comment": "Comment",
      "commentPlaceholder": "Share your thoughts about this quiz...",
      "commentTooShort": "Comment needs at least 10 characters",
      "loginRequired": "You need to login to review quizzes",
      "noReviews": "No reviews yet",
      "ratingRequired": "Please select a star rating",
      "reviewQuiz": "Review {{quizTitle}}",
      "reviewsCount": "reviews",
      "submitError": "Error occurred while submitting review",
      "submitReview": "Submit Review",
      "submitSuccess": "Thank you for reviewing the quiz!",
      "submitting": "Submitting...",
      "title": "Quiz Reviews",
      "yourRating": "Your Rating"
    },
    "reviewsTitle": "Reviews",
    "score": "ƒêi·ªÉm",
    "searchPlaceholder": "üîç Search quizzes, categories, tags...",
    "startQuiz": "B·∫Øt ƒë·∫ßu Quiz",
    "startQuizButton": "B·∫Øt ƒë·∫ßu Quiz",
    "stats": "Th·ªëng k√™",
    "status": {
      "hasEditRequests": "Has edit requests"
    },
    "statusFilter": {
      "all": "All statuses",
      "draft": "B·∫£n nh√°p"
    },
    "submitQuiz": "N·ªôp b√†i",
    "submitReview": "Submit Review",
    "tags": "Tags",
    "takeQuiz": "L√†m Quiz",
    "timeLimit": "{{time}} minutes",
    "title": "Title",
    "topics": "Topics",
    "type": "Type: {{type}}",
    "updateSuccess": "Quiz updated successfully",
    "viewReviews": "View Reviews"
  },
  "quizAsAnylearningresourceslengthTaiLieuSpanDivPCla": ">\n                    {(quiz as any).learningResources.length} t√†i li·ªáu\n                  </span>\n                </div>\n\n                <p className=",
  "quizCanAdminPheDuyet": "‚Ä¢ Quiz c·∫ßn admin ph√™ duy·ªát",
  "quizCongKhaiSeXuatHienTrongDanhSachTimKiemVaTrangC": "Quiz c√¥ng khai s·∫Ω xu·∫•t hi·ªán trong danh s√°ch t√¨m ki·∫øm v√† trang ch·ªß, gi√∫p nhi·ªÅu ng∆∞·ªùi tham gia h∆°n.",
  "quizCuaToi": "Quiz c·ªßa t√¥i",
  "quizDaDuocSuaVaNopLai": "Quiz ƒë√£ ƒë∆∞·ª£c s·ª≠a v√† n·ªôp l·∫°i",
  "quizDaDuocXoaKhoiDatabase": "Quiz ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi database",
  "quizDaTao": "Quiz ƒë√£ t·∫°o",
  "quizDaTaopDivDivClassname": ">Quiz ƒë√£ t·∫°o</p>\r\n                    </div>\r\n                    <div className=",
  "quizHoanThanhTamThoi0ViChuaCoDataVeQuizResultsCons": ");\r\n      \r\n      // Quiz ho√†n th√†nh t·∫°m th·ªùi = 0 v√¨ ch∆∞a c√≥ data v·ªÅ quiz results\r\n      const completedQuizzes = 0;\r\n      \r\n      setStats({\r\n        totalQuizzes: quizzesSnapshot.size,\r\n        totalUsers: activeUsers.length, // CH·ªà ƒê·∫æM USERS HO·∫†T ƒê·ªòNG\r\n        completedQuizzes: completedQuizzes,\r\n        totalCreators: creators.length // CH·ªà ƒê·∫æM CREATORS HO·∫†T ƒê·ªòNG\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error(",
  "quizKhongTonTai": "Quiz kh√¥ng t·ªìn t·∫°i",
  "quizKhongTonTaih2PClassname": ">Quiz kh√¥ng t·ªìn t·∫°i</h2>\r\n          <p className=",
  "quizNay": "Quiz n√†y",
  "quizNgauNhien": "Quiz ng·∫´u nhi√™n",
  "quizNgauNhienh3PClassname": ">Quiz ng·∫´u nhi√™n</h3>\r\n            <p className=",
  "quizPhoBien": "Quiz ph·ªï bi·∫øn",
  "quizPhoBienh2PClassname": ">Quiz ph·ªï bi·∫øn</h2>\r\n            <p className=",
  "quizPhoBienh3DivClassname": ">üèÜ Quiz Ph·ªï Bi·∫øn</h3>\r\n        <div className=",
  "quizPhoBienh3SpanClassname": ">üèÜ Quiz Ph·ªï Bi·∫øn</h3>\r\n        <span className=",
  "quizRiengTuChiNhungNguoiCoLinkTrucTiepMoiCoTheTruy": "Quiz ri√™ng t∆∞ ch·ªâ nh·ªØng ng∆∞·ªùi c√≥ link tr·ª±c ti·∫øp m·ªõi c√≥ th·ªÉ truy c·∫≠p. Th√≠ch h·ª£p cho quiz n·ªôi b·ªô ho·∫∑c chia s·∫ª v·ªõi nh√≥m nh·ªè.",
  "quizUpdatedquiztitleDaDuocCreatorSuaXongVaNopLaiDe": "Quiz \"${updatedQuiz.title}\" ƒë√£ ƒë∆∞·ª£c creator s·ª≠a xong v√† n·ªôp l·∫°i ƒë·ªÉ admin duy·ªát.",
  "quizdataCapNhatUsersstatsProfileConstUserrefDocdb": ", quizData);\r\n    // --- C·∫≠p nh·∫≠t users.stats (profile) ---\r\n    const userRef = doc(db,",
  "quizdifficultyEasyDeQuizdifficultyMediumTrungBinhK": "}>\n            {quiz.difficulty === 'easy' ? 'üü¢ D·ªÖ' : quiz.difficulty === 'medium' ? 'üü° Trung b√¨nh' : 'üî¥ Kh√≥'}\n          </span>\n          {quiz.isPublic && (\n            <span className=\"px-3 py-1.5 rounded-2xl text-xs font-semibold bg-green-500/80 text-white backdrop-blur-sm shadow-lg\">\n              üì¢ C√¥ng khai\n            </span>\n          )}\n        </div>\n\n        {/* **TH√äM M·ªöI**: Favorite button in overlay */}\n        <div className=\"absolute top-4 right-4 z-20\">\n          <button\n            onClick={handleToggleFavorite}\n            disabled={!user || favLoading}\n            className={",
  "quizdifficultycharat0touppercaseQuizdifficultyslic": "}>\n                  {quiz.difficulty.charAt(0).toUpperCase() + quiz.difficulty.slice(1)}\n                </span>\n                {quiz.isCompleted && (\n                  <span className=\"px-2 py-1 bg-green-100 text-green-800 text-xs rounded font-medium\">\n                    ‚úì Ho√†n th√†nh\n                  </span>\n                )}\n                {/* üÜï Resource Badge */}\n                {hasResources && (\n                  <span className=\"px-2 py-1 bg-emerald-100 text-emerald-700 border border-emerald-300 text-xs rounded-full font-bold flex items-center gap-1\">\n                    üìö {resourceCount} t√†i li·ªáu\n                  </span>\n                )}\n              </div>\n            </div>\n            \n            <p className=\"text-gray-600 text-sm mb-3 line-clamp-1\">{quiz.description}</p>\n            \n            <div className=\"flex items-center gap-6 text-sm text-gray-500 mb-4\">\n              <div className=\"flex items-center\">\n                <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\" />\n                </svg>\n                {quiz.category}\n              </div>\n              <div className=\"flex items-center\">\n                <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                {quiz.questions.length} c√¢u h·ªèi\n              </div>\n              <div className=\"flex items-center\">\n                <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                {formatDuration(quiz.duration)}\n              </div>\n              {quiz.totalPlayers && (\n                <div className=\"flex items-center\">\n                  <Eye className=\"w-4 h-4 mr-1\" />\n                  {quiz.totalPlayers} l∆∞·ª£t ch∆°i\n                </div>\n              )}\n              {reviewStats && reviewStats.totalReviews > 0 && (\n                <RatingDisplay \n                  rating={reviewStats.averageRating} \n                  reviewCount={reviewStats.totalReviews} \n                />\n              )}\n            </div>\n\n            {/* Tags */}\n            {quiz.tags && quiz.tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-1 mb-4\">\n                {quiz.tags.slice(0, 4).map((tag, index) => (\n                  <span key={index} className=\"px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded\">\n                    {tag}\n                  </span>\n                ))}\n                {quiz.tags.length > 4 && (\n                  <span className=\"px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded\">\n                    +{quiz.tags.length - 4}\n                  </span>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex items-center gap-3 flex-shrink-0\">\n            <button\n              onClick={handleToggleFavorite}\n              disabled={!user || favLoading}\n              className={",
  "quizdurationPhutpDivDivClassname": ">{quiz.duration} ph√∫t</p>\r\n          </div>\r\n          <div className=",
  "quizispublicTrueCongKhaiRiengTuSpanPPStronglamLais": "}`}>\r\n              {quiz.isPublic === true ? (\r\n                <>üåç C√¥ng khai</>\r\n              ) : (\r\n                <>üîí Ri√™ng t∆∞</>\r\n              )}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            <strong>L√†m l·∫°i:</strong>{",
  "quizlearningresourceslengthTaiLieuHocTapSpanDivQui": ">\r\n                            {quiz.learningResources.length} t√†i li·ªáu h·ªçc t·∫≠p\r\n                          </span>\r\n                        </div>\r\n                        {quiz.learningResources.some((r: any) => r.required) && (\r\n                          <span className=",
  "quizlearningresourceslengthTaiLieuSpanQuizlearning": ">\r\n                            üìö {quiz.learningResources.length} t√†i li·ªáu\r\n                          </span>\r\n                          {quiz.learningResources.some((r: any) => r.required) && (\r\n                            <span className=",
  "quizquestionslengthCauHoispanDivReviewstatsReviews": ">{quiz.questions.length} c√¢u h·ªèi</span>\n            </div>\n            {reviewStats && reviewStats.totalReviews > 0 && (\n              <div className=",
  "quizquestionslengthCaupDivDivClassname": ">{quiz.questions.length} c√¢u</p>\r\n          </div>\r\n          <div className=",
  "quizquestionsmapquestionIndexConstUseranswervalueR": ">\r\n          {quiz.questions.map((question, index) => {\r\n            const userAnswerValue = result.answers[question.id];\r\n            \r\n            // Logic ƒë·ªÉ x√°c ƒë·ªãnh ƒë√°p √°n ƒë√∫ng sai d·ª±a tr√™n lo·∫°i c√¢u h·ªèi\r\n            let isCorrect = false;\r\n            let userAnswerText =",
  "quizresourceslengthTaiLieuSpanQuizresourcessomerAn": ">\r\n                {quiz.resources.length} t√†i li·ªáu\r\n              </span>\r\n              {quiz.resources.some((r: any) => r.required) && (\r\n                <span className=",
  "quiztotalplayersLuotChoiDivReviewstatsReviewstatst": "/>\n                  {quiz.totalPlayers} l∆∞·ª£t ch∆°i\n                </div>\n              )}\n              {reviewStats && reviewStats.totalReviews > 0 && (\n                <RatingDisplay \n                  rating={reviewStats.averageRating} \n                  reviewCount={reviewStats.totalReviews} \n                />\n              )}\n            </div>\n\n            {/* Tags */}\n            {quiz.tags && quiz.tags.length > 0 && (\n              <div className=",
  "quyenHan": "Quy·ªÅn h·∫°n",
  "quyenHanh5DivClassname": ">Quy·ªÅn h·∫°n</h5>\r\n                    <div className=",
  "quyenRiengTu": "Quy·ªÅn ri√™ng t∆∞",
  "quyenRiengTuLabelDivClassname": "/>\r\n            Quy·ªÅn ri√™ng t∆∞\r\n          </label>\r\n          \r\n          <div className=",
  "ratHaiLong": "R·∫•t h√†i l√≤ng",
  "ratKhongHaiLong": "R·∫•t kh√¥ng h√†i l√≤ng",
  "ratTe": "R·∫•t t·ªá",
  "ratTot": "R·∫•t t·ªët",
  "reactLaGi": "React l√† g√¨?",
  "reactLaMotJavascriptLibraryDeXayDungUserInterface": "React l√† m·ªôt JavaScript library ƒë·ªÉ x√¢y d·ª±ng user interface.",
  "refresh": "L√†m m·ªõi",
  "rendercategoriesMainModalXacNhanThaoTacModalIsopen": "&& renderCategories()}\r\n          </>\r\n        )}\r\n      </main>\r\n\r\n      {/* Modal x√°c nh·∫≠n thao t√°c */}\r\n      <Modal\r\n        isOpen={confirmModal.open}\r\n        onClose={() => setConfirmModal({ open: false, type: null })}\r\n        title={t(",
  "replaceAdminCungVaoDashboardChinhCase": "replace />; // Admin c≈©ng v√†o dashboard ch√≠nh\r\n    case",
  "replaceCreatorCungVaoDashboardChinhCase": "replace />; // Creator c≈©ng v√†o dashboard ch√≠nh\r\n    case",
  "resourcecountTaiLieuSpanDivDivPClassname": ">\n                    üìö {resourceCount} t√†i li·ªáu\n                  </span>\n                )}\n              </div>\n            </div>\n            \n            <p className=",
  "resourceestimatedtimePhutSpanResourcerequiredSpanC": "/>\r\n                      {resource.estimatedTime} ph√∫t\r\n                    </span>\r\n                  )}\r\n                  {resource.required ? (\r\n                    <span className=",
  "resourceestimatedtimePhutSpanResourceurlAHrefresou": "/>\r\n                          {resource.estimatedTime} ph√∫t\r\n                        </span>\r\n                      )}\r\n                      {resource.url && (\r\n                        <a \r\n                          href={resource.url} \r\n                          target=",
  "resourceestimatedtimePhutspanSpanResourceurlAHrefr": ">{resource.estimatedTime} ph√∫t</span>\n                              </span>\n                            )}\n                            {resource.url && (\n                              <a \n                                href={resource.url} \n                                target=",
  "resourcetypetouppercaseSpanDivResourcedescriptionP": "}>\n                              {resource.type.toUpperCase()}\n                            </span>\n                          </div>\n                          \n                          {resource.description && (\n                            <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">{resource.description}</p>\n                          )}\n                          \n                          <div className=\"flex flex-wrap items-center gap-3 text-sm\">\n                            {resource.required && (\n                              <span className=\"inline-flex items-center gap-1 px-2.5 py-1 bg-red-100 text-red-700 rounded-full font-bold border border-red-300\">\n                                <span className=\"text-base\">‚ö†Ô∏è</span> B·∫ÆT BU·ªòC\n                              </span>\n                            )}\n                            {resource.estimatedTime && (\n                              <span className=\"inline-flex items-center gap-1 text-gray-600\">\n                                <Clock className=\"w-4 h-4\" />\n                                <span className=\"font-medium\">{resource.estimatedTime} ph√∫t</span>\n                              </span>\n                            )}\n                            {resource.url && (\n                              <a \n                                href={resource.url} \n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                className=\"inline-flex items-center gap-1.5 px-3 py-1.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium shadow-sm hover:shadow\"\n                              >\n                                <ExternalLink className=\"w-4 h-4\" />\n                                Xem t√†i li·ªáu\n                              </a>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {(quiz as any).learningResources.some((r: any) => r.required) && (\n                  <div className=\"mt-4 p-3 bg-amber-50 border-2 border-amber-300 rounded-lg\">\n                    <p className=\"text-sm text-amber-800 font-medium flex items-center gap-2\">\n                      <span className=\"text-lg\">‚ö†Ô∏è</span>\n                      <span>L∆∞u √Ω: Quiz n√†y c√≥ t√†i li·ªáu <strong>B·∫ÆT BU·ªòC</strong> ph·∫£i xem tr∆∞·ªõc khi l√†m b√†i!</span>\n                    </p>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Questions Preview */}\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4\">{t('quiz.questionType')}</h2>\n              \n              <div className=\"space-y-3\">\n                {quiz.questions.slice(0, 3).map((question, index) => (\n                  <div key={question.id} className=\"p-4 bg-gray-50 rounded-lg\">\n                    <div className=\"flex items-start space-x-3\">\n                      <span className=\"inline-flex items-center justify-center w-6 h-6 bg-blue-600 text-white text-sm font-semibold rounded-full\">\n                        {index + 1}\n                      </span>\n                      <div className=\"flex-1\">\n                        <p className=\"text-gray-800 font-medium\">{question.text}</p>\n                        <div className=\"mt-2 flex items-center space-x-4 text-sm text-gray-600\">\n                          <span>{t('quiz.type', {type: t(",
  "resultdataSetresultresultdataSetquizidresultdataqu": ", resultData);\r\n      setResult(resultData);\r\n      setQuizId(resultData.quizId || attemptId || null);\r\n    } else if (attemptId) {\r\n      // Kh√¥ng c√≥ state, c·∫ßn fetch t·ª´ Firestore\r\n      console.log(",
  "retry": "Th·ª≠ l·∫°i",
  "returnBanLaMotChuyenGiaTaoCauHoiTracNghiemChatLuon": ";\r\n    \r\n    return `\r\nB·∫°n l√† m·ªôt chuy√™n gia t·∫°o c√¢u h·ªèi tr·∫Øc nghi·ªám ch·∫•t l∆∞·ª£ng cao. H√£y t·∫°o ${numQuestions} c√¢u h·ªèi tr·∫Øc nghi·ªám b·∫±ng ${lang} d·ª±a tr√™n n·ªôi dung ƒë∆∞·ª£c cung c·∫•p.\r\n\r\nY√™u c·∫ßu:\r\n- M·ªói c√¢u h·ªèi c√≥ 4 ƒë√°p √°n (A, B, C, D)\r\n- Ch·ªâ c√≥ 1 ƒë√°p √°n ƒë√∫ng\r\n- C√¢u h·ªèi ph·∫£i li√™n quan tr·ª±c ti·∫øp ƒë·∫øn n·ªôi dung\r\n- ƒê·ªô kh√≥: ${difficulty}\r\n- Bao g·ªìm gi·∫£i th√≠ch cho ƒë√°p √°n ƒë√∫ng\r\n- ƒê·∫£m b·∫£o c√¢u h·ªèi c√≥ t√≠nh ph√¢n bi·ªát cao\r\n\r\nTr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng JSON ch√≠nh x√°c nh∆∞ sau:\r\n{",
  "returnBanLaMotChuyenGiaTaoCauHoiTracNghiemChuyenNg": ";\r\n\r\n    return `B·∫°n l√† m·ªôt chuy√™n gia t·∫°o c√¢u h·ªèi tr·∫Øc nghi·ªám chuy√™n nghi·ªáp. \r\n\r\nNHI·ªÜM V·ª§: T·∫°o ${maxQuestions} c√¢u h·ªèi ch·∫•t l∆∞·ª£ng cao t·ª´ n·ªôi dung ƒë∆∞·ª£c cung c·∫•p.\r\n\r\nY√äU C·∫¶U:\r\n- ƒê·ªô kh√≥: ${difficultyText[difficulty]}\r\n- Lo·∫°i c√¢u h·ªèi: ${selectedTypes}\r\n- Ng√¥n ng·ªØ: ${lang}\r\n- C√¢u h·ªèi ph·∫£i ch√≠nh x√°c, r√µ r√†ng v√† c√≥ gi√° tr·ªã gi√°o d·ª•c\r\n- ƒê√°p √°n ph·∫£i ch√≠nh x√°c 100%\r\n- Tr√°nh c√¢u h·ªèi qu√° d·ªÖ ho·∫∑c m∆° h·ªì\r\n\r\nFORMAT TR·∫¢I L·ªúI (JSON):\r\n{",
  "returnBooleanKhongDungAnswersArrayIfQuestiontype": ") return; // Boolean kh√¥ng d√πng answers array\r\n    if ((question.type ===",
  "returnDatevaluetodateNeuLaDateObjectIfDatevalueIns": ") {\r\n      return dateValue.toDate();\r\n    }\r\n    \r\n    // N·∫øu l√† Date object\r\n    if (dateValue instanceof Date) {\r\n      return dateValue;\r\n    }\r\n    \r\n    // N·∫øu l√† string ho·∫∑c number\r\n    if (typeof dateValue ===",
  "returnFallbackKeyConstDispatchUsedispatchConstNavi": ");\r\n      return fallback || key;\r\n    };\r\n  }\r\n  \r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const quizzes = propQuizzes || useSelector((state: RootState) => state.quiz.quizzes);\r\n  const loading = useSelector((state: RootState) => state.quiz.loading || state.quiz.isLoading);\r\n  const error = useSelector((state: RootState) => state.quiz.error);\r\n  const user = useSelector((state: RootState) => state.auth.user);\r\n\r\n  // Show specific error message for Firestore connection issues\r\n  const showFirestoreError = error && (\r\n    error.includes('ad blocker') || \r\n    error.includes('ERR_BLOCKED_BY_CLIENT') ||\r\n    error.includes('Kh√¥ng th·ªÉ k·∫øt n·ªëi Firestore')\r\n  );\r\n\r\n  const [retryCount, setRetryCount] = useState(0);\r\n  const maxRetries = 3;\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!propQuizzes && quizzes.length === 0 && !loading) {\r\n        try {\r\n          await dispatch(fetchQuizzes({ user }) as any).unwrap();\r\n        } catch (err: any) {\r\n          console.error('Quiz fetch error:', err);\r\n          if (err instanceof Error) {\r\n            console.error('Error message:', err.message);\r\n            if ((err as any).code) {\r\n              console.error('Error code:', (err as any).code);\r\n            }\r\n          } else {\r\n            console.error('Unknown error:', err);\r\n          }\r\n\r\n          if (retryCount < maxRetries) {\r\n            // Retry with exponential backoff\r\n            const delay = Math.min(1000 * Math.pow(2, retryCount), 10000);\r\n            // toast.info('ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i...');\r\n            \r\n            setTimeout(() => {\r\n              setRetryCount(prev => prev + 1);\r\n            }, delay);\r\n          } else {\r\n            toast.error(t('messages.serverError', 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng th·ª≠ l·∫°i sau.'));\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [dispatch, propQuizzes, quizzes.length, user, loading, retryCount]);\r\n  const [search, setSearch] = useState('');\r\n  const [category, setCategory] = useState('all');\r\n  const [difficulty, setDifficulty] = useState('all');\r\n  const [sortBy, setSortBy] = useState('newest'); // newest, oldest, popular, difficulty\r\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid'); // grid, list\r\n  const [showCompleted, setShowCompleted] = useState(true);\r\n  const [showStats, setShowStats] = useState(false);\r\n  const [resourceFilter, setResourceFilter] = useState<'all' | 'with-resources' | 'no-resources'>('all'); // üÜï Filter for resources\r\n\r\n  const handleQuizStart = (quiz: Quiz) => {\r\n    navigate(",
  "returnNgayKhongDoiThumbnailsResolveSuccessTrueOrig": "});\r\n\r\n            // Return ngay - kh√¥ng ƒë·ª£i thumbnails\r\n            resolve({\r\n              success: true,\r\n              originalUrl,\r\n              fileName,\r\n              filePath,\r\n              thumbnailUrls: {} // S·∫Ω c√≥ sau 5-30s\r\n            });\r\n\r\n            // üîÑ Background: ƒê·ª£i thumbnails sau (kh√¥ng block)\r\n            if (generateThumbnails) {\r\n              setTimeout(async () => {\r\n                const thumbnails = await getThumbnailUrls(fileName);\r\n                console.log(",
  "returnNullReturnNullLayTatCaThumbnailsSongSongCons": ");\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // L·∫•y t·∫•t c·∫£ thumbnails song song\r\n  const thumbnailPromises = thumbnailSizes.map(async ({ key, size, maxRetries }) => {\r\n    const thumbnailFileName =",
  "returnParsedquestionsAsAnyAsyncGeneratequestionsto": ");\r\n    }\r\n    return parsed.questions as any[];\r\n  }\r\n\r\n  async generateQuestions(topic: string, difficulty: string, numQuestions: number) {\r\n    try {\r\n      const prompt = `\r\nT·∫°o ${numQuestions} c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªÅ ch·ªß ƒë·ªÅ",
  "returnResultBackgroundUploadUploadTrongBackgroundR": ");\r\n  \r\n  return result;\r\n};\r\n\r\n/**\r\n * BACKGROUND UPLOAD: Upload trong background, return promise ngay\r\n * User kh√¥ng c·∫ßn ƒë·ª£i, c√≥ th·ªÉ l√†m vi·ªác kh√°c\r\n */\r\nexport const backgroundUploadImage = (\r\n  file: File,\r\n  options: ImageUploadOptions = {},\r\n  onComplete?: (result: ImageUploadResult) => void\r\n): void => {\r\n  // Compress v√† upload trong background\r\n  (async () => {\r\n    try {\r\n      const compressed = await compressImage(file, 1920, 1080, 0.8, true);\r\n      const result = await uploadImage(compressed, options);\r\n      \r\n      if (onComplete) {\r\n        onComplete(result);\r\n      }\r\n    } catch (error) {\r\n      console.error(",
  "returnSetloadingtrueTryLayTatCaThongBaoDangActiveC": "))) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      // L·∫•y t·∫•t c·∫£ th√¥ng b√°o ƒëang active\r\n      const notificationsSnapshot = await getDocs(collection(db,",
  "returnSetloadingtrueTryTaoFirebaseAccountConstUser": ");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      // T·∫°o Firebase account\r\n      const userCredential = await createUserWithEmailAndPassword(\r\n        auth,\r\n        pendingUserData.email,\r\n        pendingUserData.password\r\n      );\r\n\r\n      // T·∫°o user document\r\n      await createUserDocument(userCredential.user, {\r\n        displayName: pendingUserData.displayName,\r\n        verificationMethod:",
  "returnSetloadingtrueTryXoaQuizDaBiDanhDauDeletedtr": "))) return;\r\n    setLoading(true);\r\n    try {\r\n      // X√≥a quiz ƒë√£ b·ªã ƒë√°nh d·∫•u deleted=true\r\n      const quizzesSnapshot = await getDocs(collection(db,",
  "returnSetsavingtrueTryTaoCredentialDeReauthenticat": "));\r\n      return;\r\n    }\r\n    \r\n    setSaving(true);\r\n    try {\r\n      // T·∫°o credential ƒë·ªÉ reauthenticate\r\n      const credential = EmailAuthProvider.credential(auth.currentUser.email, currentPassword);\r\n      \r\n      // X√ÅC TH·ª∞C L·∫†I NG∆Ø·ªúI D√ôNG TR∆Ø·ªöC KHI ƒê·ªîI M·∫¨T KH·∫®U\r\n      await reauthenticateWithCredential(auth.currentUser, credential);\r\n      \r\n      // N·∫øu x√°c th·ª±c th√†nh c√¥ng, ƒë·ªïi m·∫≠t kh·∫©u m·ªõi\r\n      await updatePassword(auth.currentUser, newPassword);\r\n      \r\n      // Reset form\r\n      setCurrentPassword(",
  "returnSetsubmittingtrueTryDeepCleanFunctionDeLoaiB": "));\r\n      return;\r\n    }\r\n\r\n    setSubmitting(true);\r\n    try {\r\n      // Deep clean function ƒë·ªÉ lo·∫°i b·ªè t·∫•t c·∫£ undefined values\r\n      const cleanValue = (value: any): any => {\r\n        if (value === undefined || value === null) {\r\n          return null;\r\n        }\r\n        if (Array.isArray(value)) {\r\n          return value.map(cleanValue);\r\n        }\r\n        if (typeof value ===",
  "returnSuccessTrueCatchErrorAnyConsoleerrordeleteIm": ");\r\n        }\r\n      }\r\n    }\r\n\r\n    return { success: true };\r\n  } catch (error: any) {\r\n    console.error('Delete image error:', error);\r\n    return {\r\n      success: false,\r\n      error: 'Kh√¥ng th·ªÉ x√≥a ·∫£nh: ' + error.message\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get image URL t·ª´ Storage path\r\n */\r\nexport const getImageUrl = async (filePath: string): Promise<string | null> => {\r\n  try {\r\n    const imageRef = ref(storage, filePath);\r\n    return await getDownloadURL(imageRef);\r\n  } catch (error) {\r\n    console.error('Get image URL error:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Compress image si√™u nhanh v·ªõi WebP format\r\n * WebP nh·∫π h∆°n JPEG 25-35%, encode nhanh h∆°n, quality t·ªët h∆°n\r\n */\r\nexport const compressImage = async (\r\n  file: File,\r\n  maxWidth: number = 1920,\r\n  maxHeight: number = 1080,\r\n  quality: number = 0.85,\r\n  useWebP: boolean = true // WebP m·∫∑c ƒë·ªãnh cho t·ªëc ƒë·ªô\r\n): Promise<File> => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    \r\n    reader.onload = (event) => {\r\n      const img = new Image();\r\n      img.src = event.target?.result as string;\r\n      \r\n      img.onload = () => {\r\n        const canvas = document.createElement('canvas');\r\n        let width = img.width;\r\n        let height = img.height;\r\n\r\n        // Calculate new dimensions\r\n        if (width > maxWidth || height > maxHeight) {\r\n          const ratio = Math.min(maxWidth / width, maxHeight / height);\r\n          width = Math.floor(width * ratio);\r\n          height = Math.floor(height * ratio);\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        const ctx = canvas.getContext('2d', { alpha: false }); // Disable alpha for better performance\r\n        if (!ctx) {\r\n          reject(new Error('Cannot get canvas context'));\r\n          return;\r\n        }\r\n\r\n        // High quality rendering\r\n        ctx.imageSmoothingEnabled = true;\r\n        ctx.imageSmoothingQuality = 'high';\r\n        ctx.drawImage(img, 0, 0, width, height);\r\n\r\n        // Use WebP for faster compression (25-35% smaller)\r\n        const outputType = useWebP ? 'image/webp' : file.type;\r\n        const outputExtension = useWebP ? '.webp' : file.name.split('.').pop();\r\n        const outputName = file.name.replace(/\\.[^/.]+$/,",
  "returnThisworkerStaticAsyncExtracttextfromimagefil": ");\r\n    }\r\n    return this.worker;\r\n  }\r\n\r\n  static async extractTextFromImage(file: File): Promise<FileProcessingResult> {\r\n    try {\r\n      const worker = await this.initializeWorker();\r\n      \r\n      // ƒê·ªçc file th√†nh blob URL ƒë·ªÉ OCR\r\n      const imageUrl = URL.createObjectURL(file);\r\n      \r\n      const { data: { text, confidence } } = await worker.recognize(imageUrl);\r\n      \r\n      // Clean up\r\n      URL.revokeObjectURL(imageUrl);\r\n      \r\n      return {\r\n        extractedText: text,\r\n        success: true,\r\n        metadata: { confidence, fileSize: file.size }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        extractedText:",
  "returnUrlCatchErrorAnyIfAttemptMaxretriesDoiLauHon": ");\r\n        return url;\r\n      } catch (error: any) {\r\n        if (attempt < maxRetries) {\r\n          // ƒê·ª£i l√¢u h∆°n cho m·ªói l·∫ßn retry (2s, 3s, 4s, ...)\r\n          const waitTime = 2000 + (attempt * 1000);\r\n          console.log(",
  "returnValidateFileSizeConstMaxsizekbOptionsmaxsize": ")}`);\r\n      return;\r\n    }\r\n\r\n    // Validate file size\r\n    const maxSizeKB = options.maxSizeKB || 5120;\r\n    const fileSizeKB = file.size / 1024;\r\n    if (fileSizeKB > maxSizeKB) {\r\n      toast.error(`K√≠ch th∆∞·ªõc file v∆∞·ª£t qu√° ${maxSizeKB}KB`);\r\n      return;\r\n    }\r\n\r\n    setSelectedFile(file);\r\n\r\n    // Show preview\r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      setPreview(event.target?.result as string);\r\n    };\r\n    reader.readAsDataURL(file);\r\n\r\n    // ‚ö° ULTRA FAST MODE: Upload ngay l·∫≠p t·ª©c (1-3s)\r\n    if (ultraFast || instantUpload) {\r\n      handleInstantUpload(file);\r\n    }\r\n  };\r\n\r\n  const handleInstantUpload = async (file: File) => {\r\n    setUploading(true);\r\n    setProgress(null);\r\n    setThumbnails({});\r\n\r\n    try {\r\n      toast.info(",
  "reviewCauHoiDaTao": "Review c√¢u h·ªèi ƒë√£ t·∫°o",
  "reviewCauHoiDaTaoh3PClassname": ">Review c√¢u h·ªèi ƒë√£ t·∫°o</h3>\r\n                <p className=",
  "reviewedatNewDateGoQuizXuongDeSuaSetQuizStatusToDr": ",\r\n        reviewedAt: new Date()\r\n      });\r\n\r\n      // G·ª† QUIZ XU·ªêNG ƒê·ªÇ S·ª¨A: Set quiz status to draft v√† allow edit\r\n      const quizRef = doc(db,",
  "riengTu": "üîí Ri√™ng t∆∞",
  "roleCallCallbackVoiRoleDeParentCoTheNavigateToasts": ", role);\r\n      \r\n      // Call callback v·ªõi role ƒë·ªÉ parent c√≥ th·ªÉ navigate\r\n      toast.success(",
  "roleLuuVaoLocalstorageLocalstoragesetitemuserroleu": ", role);\r\n      \r\n      // L∆∞u v√†o localStorage \r\n      localStorage.setItem(`user_role_${user.uid}`, role);\r\n      \r\n      // Call callback v·ªõi role ƒë·ªÉ parent c√≥ th·ªÉ navigate\r\n      toast.success(`Ch√†o m·ª´ng b·∫°n v·ªõi vai tr√≤ ${role ===",
  "roleLuuVaoLocalstorageNhuBackupLocalstoragesetitem": ", role);\r\n      \r\n      // L∆∞u v√†o localStorage nh∆∞ backup\r\n      localStorage.setItem(`user_role_${user.uid}`, role);\r\n      \r\n      // Call callback v·ªõi role ƒë·ªÉ parent c√≥ th·ªÉ navigate\r\n      toast.success(`Ch√†o m·ª´ng b·∫°n v·ªõi vai tr√≤ ${role ===",
  "roleNavigateTheoRoleVoiProperRedirectSettimeoutIfR": ", role);\r\n      \r\n      // Navigate theo role v·ªõi proper redirect\r\n      setTimeout(() => {\r\n        if (role ===",
  "rows4DivLoaiThongBaoDivLabelClassname": "rows={4}\r\n                />\r\n              </div>\r\n\r\n              {/* Lo·∫°i th√¥ng b√°o */}\r\n              <div>\r\n                <label className=",
  "sanSangSuDungAiDeTaoCauHoi": "S·∫µn s√†ng s·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o c√¢u h·ªèi!",
  "sanSangSuDungAiDeTaoCauHoiDivDivDivLabelClassname": ">\r\n                  S·∫µn s√†ng s·ª≠ d·ª•ng AI ƒë·ªÉ t·∫°o c√¢u h·ªèi!\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <label className=",
  "sanSangTaoCauHoiTuNoiDungCuaBan": "S·∫µn s√†ng t·∫°o c√¢u h·ªèi t·ª´ n·ªôi dung c·ªßa b·∫°n",
  "sanSangTaoCauHoiTuNoiDungCuaBanpDivDivClassname": ">S·∫µn s√†ng t·∫°o c√¢u h·ªèi t·ª´ n·ªôi dung c·ªßa b·∫°n</p>\r\n              </div>\r\n\r\n              <div className=",
  "sanSangThuThachKienThucCuaBanChua": "S·∫µn s√†ng th·ª≠ th√°ch ki·∫øn th·ª©c c·ªßa b·∫°n ch∆∞a?",
  "sanSangThuThachKienThucCuaBanChuaPDivDivPClassname": ">\r\n                S·∫µn s√†ng th·ª≠ th√°ch ki·∫øn th·ª©c c·ªßa b·∫°n ch∆∞a?\r\n              </p>\r\n            </div>\r\n          </div>\r\n          \r\n          <p className=",
  "sapHetGio": "S·∫Øp h·∫øt gi·ªù!",
  "sapHetGioChiCon10ThoiGian": "S·∫Øp h·∫øt gi·ªù! Ch·ªâ c√≤n 10% th·ªùi gian.",
  "save": "L∆∞u",
  "search": "T√¨m ki·∫øm",
  "searchparamsKiemTraQuyenCreatorIfUserReturnDivClas": ");\r\n    }\r\n  }, [searchParams]);\r\n\r\n  // Ki·ªÉm tra quy·ªÅn creator\r\n  if (!user) {\r\n    return (\r\n      <div className=",
  "selectLanguage": "Ch·ªçn ng√¥n ng·ªØ",
  "selectedcreatorpermissionscancreatequizCoKhongSpan": "}>\r\n                          {selectedCreator.permissions.canCreateQuiz ? 'C√≥' : 'Kh√¥ng'}\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <span className=\"text-sm text-gray-600\">{t(\"admin.quizManagement.tooltips.edit\")}</span>\r\n                        <span className={",
  "selectedcreatorpermissionscandeleteownquizCoKhongS": "}>\r\n                          {selectedCreator.permissions.canDeleteOwnQuiz ? 'C√≥' : 'Kh√¥ng'}\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <span className=\"text-sm text-gray-600\">Xem analytics</span>\r\n                        <span className={",
  "selectedcreatorpermissionscaneditownquizCoKhongSpa": "}>\r\n                          {selectedCreator.permissions.canEditOwnQuiz ? 'C√≥' : 'Kh√¥ng'}\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <span className=\"text-sm text-gray-600\">X√≥a quiz</span>\r\n                        <span className={",
  "selectedquizquestionslength0CauHoiDivDivDivActions": ">\n                  {selectedQuiz.questions?.length || 0} c√¢u h·ªèi\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Actions */}\n          <div className=",
  "serverKhongPhanHoiVuiLongThuLaiSau": "Server kh√¥ng ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.",
  "sessionidConstRequiredresourcesResourcesfilterrRre": ", sessionId);\r\n\r\n  const requiredResources = resources.filter(r => r.required);\r\n  const now = new Date();\r\n\r\n  const session: Partial<LearningSession> = {\r\n    userId,\r\n    quizId,\r\n    viewedResources: {},\r\n    ready: requiredResources.length === 0, // N·∫øu kh√¥ng c√≥ required ‚Üí ready lu√¥n\r\n    totalResourcesRequired: requiredResources.length,\r\n    completedResourcesRequired: 0,\r\n    completionPercent: 0,\r\n    startedAt: now,\r\n    lastActivityAt: now,\r\n    updatedAt: now\r\n  };\r\n\r\n  await setDoc(sessionRef, {\r\n    ...session,\r\n    startedAt: Timestamp.fromDate(now),\r\n    lastActivityAt: Timestamp.fromDate(now),\r\n    updatedAt: serverTimestamp()\r\n  }, { merge: true });\r\n\r\n  return session as LearningSession;\r\n};\r\n\r\n/**\r\n * C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô xem t√†i li·ªáu\r\n */\r\nexport const updateResourceProgress = async (\r\n  userId: string,\r\n  quizId: string,\r\n  resourceId: string,\r\n  progress: Partial<ResourceViewProgress>\r\n): Promise<void> => {\r\n  try {\r\n    const sessionId = `${quizId}_${userId}`;\r\n    const sessionRef = doc(db,",
  "setformdataprevPrevUsefilecontentFalseConstGenerat": ");\r\n    setFormData(prev => ({ ...prev, useFileContent: false }));\r\n  };\r\n\r\n  const generateQuestions = async () => {\r\n    const topicToUse = formData.useFileContent && fileContent \r\n      ? `D·ª±a tr√™n n·ªôi dung file ƒë√£ t·∫£i l√™n: ${fileContent}. T·∫°o c√¢u h·ªèi v·ªÅ: ${formData.topic}`\r\n      : formData.topic;\r\n\r\n    if (!topicToUse.trim()) {\r\n      toast.error(",
  "setisloadingtrueTryThuCapNhatFirestoreTruocConstUs": ") => {\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Th·ª≠ c·∫≠p nh·∫≠t Firestore tr∆∞·ªõc\r\n      const userDocRef = doc(db,",
  "setuploadingfalseReturnOnquestionsimportedquestion": ");\r\n        setUploading(false);\r\n        return;\r\n      }\r\n\r\n      onQuestionsImported(questions);\r\n      toast.success(`ƒê√£ import th√†nh c√¥ng ${questions.length} c√¢u h·ªèi!`);\r\n      setIsOpen(false);\r\n      \r\n    } catch (error) {\r\n      console.error(",
  "soCauDungKhongTheLonHonTongSoCau": "S·ªë c√¢u ƒë√∫ng kh√¥ng th·ªÉ l·ªõn h∆°n t·ªïng s·ªë c√¢u",
  "soCauHoi": "S·ªë c√¢u h·ªèi:",
  "soCauHoiConfigmaxquestionsLabelInputType": ">\r\n                      S·ªë c√¢u h·ªèi: {config.maxQuestions}\r\n                    </label>\r\n                    <input\r\n                      type=",
  "soCauHoiLabelSelectValueformdatanumquestionsOnchan": ">\r\n              üî¢ S·ªë c√¢u h·ªèi\r\n            </label>\r\n            <select\r\n              value={formData.numQuestions}\r\n              onChange={(e) => setFormData({ ...formData, numQuestions: parseInt(e.target.value) })}\r\n              className=",
  "soCauHoiToiThieuFiltersminquestionslabelInputType": ">S·ªë c√¢u h·ªèi t·ªëi thi·ªÉu: {filters.minQuestions}</label>\r\n              <input\r\n                type=",
  "soCauHoispanSpanClassname": ">S·ªë c√¢u h·ªèi:</span>\r\n              <span className=",
  "soCauHoistrongPClassname": ">‚ùì S·ªë c√¢u h·ªèi:</strong> \r\n            <p className=",
  "soLuongCauHoi": "S·ªë l∆∞·ª£ng c√¢u h·ªèi",
  "soLuongCauHoiLabelSelectValueoptionsnumquestionsOn": ">\r\n                      S·ªë l∆∞·ª£ng c√¢u h·ªèi\r\n                    </label>\r\n                    <select\r\n                      value={options.numQuestions}\r\n                      onChange={(e) => setOptions(prev => ({ ...prev, numQuestions: parseInt(e.target.value) }))}\r\n                      className=",
  "sort": "S·∫Øp x·∫øp",
  "spacekbdDePhatdungKbdClassname": ">Space</kbd> ƒë·ªÉ ph√°t/d·ª´ng\r\n            ‚Ä¢ <kbd className=",
  "spanClassnametextlgspanCoTaiLieuHocTapQuizzesfilte": "}\r\n            >\r\n              <span className=\"text-lg\">üìñ</span>\r\n              C√≥ t√†i li·ªáu h·ªçc t·∫≠p ({quizzes.filter(q => q.status === 'approved' && (q as any).resources && (q as any).resources.length > 0).length})\r\n            </button>\r\n            <button\r\n              onClick={() => setResourceFilter('no-resources')}\r\n              className={",
  "spanClassnametextlgspanLamTrucTiepQuizzesfilterqQs": "}\r\n            >\r\n              <span className=\"text-lg\">‚ö°</span>\r\n              L√†m tr·ª±c ti·∫øp ({quizzes.filter(q => q.status === 'approved' && (!(q as any).resources || (q as any).resources.length === 0)).length})\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4\">\r\n            {/* Enhanced Search */}\r\n            <div className=\"lg:col-span-2 relative\">\r\n              <div className=\"relative\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder={t('quiz.searchPlaceholder', 'üîç T√¨m ki·∫øm quiz, danh m·ª•c, tags...')}\r\n                  value={search}\r\n                  onChange={(e) => setSearch(e.target.value)}\r\n                  className=\"w-full border border-gray-300 rounded-lg p-3 pl-10 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n                />\r\n                <svg className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\r\n                </svg>\r\n                {search && (\r\n                  <button\r\n                    onClick={() => setSearch('')}\r\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400 hover:text-gray-600\"\r\n                  >\r\n                    <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n                    </svg>\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </div>\r\n            \r\n            {/* Category Filter */}\r\n            <select \r\n              className=\"border border-gray-300 rounded-lg p-3 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500\" \r\n              value={category} \r\n              onChange={e => setCategory(e.target.value)}\r\n            >\r\n              <option value=\"all\">üè∑Ô∏è T·∫•t c·∫£ danh m·ª•c</option>\r\n              {categories.map(c => <option key={c} value={c}>{c}</option>)}\r\n            </select>\r\n            \r\n            {/* Difficulty Filter */}\r\n            <select \r\n              className=\"border border-gray-300 rounded-lg p-3 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500\" \r\n              value={difficulty} \r\n              onChange={e => setDifficulty(e.target.value)}\r\n            >\r\n              <option value=\"all\">üìä T·∫•t c·∫£ ƒë·ªô kh√≥</option>\r\n              {difficulties.map(d => <option key={d} value={d}>\r\n                {d === 'easy' ? 'üòä D·ªÖ' : d === 'medium' ? 'üòê Trung b√¨nh' : 'üò§ Kh√≥'}\r\n              </option>)}\r\n            </select>\r\n          </div>\r\n\r\n          {/* Advanced Controls */}\r\n          <div className=\"flex flex-wrap items-center justify-between gap-4 pt-4 border-t border-gray-100\">\r\n            <div className=\"flex items-center gap-4\">\r\n              {/* Sort Options */}\r\n              <select \r\n                className=\"border border-gray-300 rounded-lg p-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500\" \r\n                value={sortBy} \r\n                onChange={e => setSortBy(e.target.value)}\r\n              >\r\n                <option value=\"newest\">üÜï M·ªõi nh·∫•t</option>\r\n                <option value=\"oldest\">üìÖ C≈© nh·∫•t</option>\r\n                <option value=\"popular\">üî• Ph·ªï bi·∫øn</option>\r\n                <option value=\"difficulty\">üìà Theo ƒë·ªô kh√≥</option>\r\n              </select>\r\n\r\n              {/* Show Completed Toggle */}\r\n              <label className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={showCompleted}\r\n                  onChange={e => setShowCompleted(e.target.checked)}\r\n                  className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\r\n                />\r\n                Hi·ªán quiz ƒë√£ ho√†n th√†nh\r\n              </label>\r\n            </div>\r\n\r\n            {/* View Mode Toggle */}\r\n            <div className=\"flex items-center gap-2\">\r\n              <span className=\"text-sm text-gray-600\">Hi·ªÉn th·ªã:</span>\r\n              <div className=\"flex border border-gray-300 rounded-lg overflow-hidden\">\r\n                <button\r\n                  onClick={() => setViewMode('grid')}\r\n                  className={",
  "spanCoTaiLieuHocTapQuizzesfilterqQstatus": ">üìñ</span>\r\n              C√≥ t√†i li·ªáu h·ªçc t·∫≠p ({quizzes.filter(q => q.status ===",
  "spanDivButtonDivDivModalGuiThongBaoResponsiveShown": ")}</span>\r\n            </div>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal g·ª≠i th√¥ng b√°o - Responsive */}\r\n      {showNotificationModal && (\r\n        <div className=",
  "spanDivHienThiCauTraLoiCuaUserDivClassname": "}\r\n                  </span>\r\n                </div>\r\n\r\n                {/* Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi c·ªßa user */}\r\n                <div className=",
  "spanDivRenderTieuDeCauHoiKhongTuBocPH2Classname": ")}\r\n          </span>\r\n        </div>\r\n        {/* Render ti√™u ƒë·ªÅ c√¢u h·ªèi KH√îNG t·ª± b·ªçc <p> */}\r\n        <h2 className=",
  "spanLamTrucTiepQuizzesfilterqQstatus": ">‚ö°</span>\r\n              L√†m tr·ª±c ti·∫øp ({quizzes.filter(q => q.status ===",
  "spanQuizcreatedattolocaledatestringDivDivHienThiSo": ")}:</span> {quiz.createdAt.toLocaleDateString()}\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng t√†i li·ªáu h·ªçc t·∫≠p */}\r\n                    {quiz.learningResources && quiz.learningResources.length > 0 && (\r\n                      <div className=",
  "spanSpanluuYQuizNayCoTaiLieuStrongbatBuocstrongPha": ">‚ö†Ô∏è</span>\n                      <span>L∆∞u √Ω: Quiz n√†y c√≥ t√†i li·ªáu <strong>B·∫ÆT BU·ªòC</strong> ph·∫£i xem tr∆∞·ªõc khi l√†m b√†i!</span>\n                    </p>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Questions Preview */}\n            <div className=",
  "spanTaiLieuBatBuocRequiredresourceslengthH2DivClas": "></span>\r\n              T√†i li·ªáu b·∫Øt bu·ªôc ({requiredResources.length})\r\n            </h2>\r\n            <div className=",
  "spanTaiLieuKhuyenNghiOptionalresourceslengthH2DivC": "></span>\r\n              T√†i li·ªáu khuy·∫øn ngh·ªã ({optionalResources.length})\r\n            </h2>\r\n            <div className=",
  "spanTotalquizzes0MathroundtotalplayersTotalquizzes": ">\r\n          <span>\r\n            {totalQuizzes > 0 ? Math.round(totalPlayers / totalQuizzes) : 0} trung b√¨nh/quiz\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Average Score */}\r\n      <div className=",
  "spanTrongDanhMuc": "&& <span> trong danh m·ª•c",
  "spanVoiDoKho": "&& <span> v·ªõi ƒë·ªô kh√≥",
  "spanaveragequestionsCauHoiTrungBinhspanDivDivCompl": ">\r\n          <span>{averageQuestions} c√¢u h·ªèi trung b√¨nh</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Completed Progress */}\r\n      <div className=",
  "spanbaoCaospanButtonDivReviewupdatedatReviewupdate": "/>\r\n                  <span>B√°o c√°o</span>\r\n                </button>\r\n              </div>\r\n\r\n              {review.updatedAt && review.updatedAt !== review.createdAt && (\r\n                <span className=",
  "spancauTiepspanSvgClassname": ">\n                      <span>C√¢u ti·∫øp</span>\n                      <svg className=",
  "spanchatLuongTotspanDivDivDifficultyDistributionDi": ">\r\n          <span>Ch·∫•t l∆∞·ª£ng t·ªët</span>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Difficulty Distribution */}\r\n      <div className=",
  "spanguiLaiMaSauTimersspanDivButtonOnclickhandleres": "/>\r\n              <span>G·ª≠i l·∫°i m√£ sau {timer}s</span>\r\n            </div>\r\n          ) : (\r\n            <button\r\n              onClick={handleResendOTP}\r\n              disabled={resendLoading}\r\n              className=",
  "spanhuuIchReviewhelpfullength0spanButtonButtonOncl": "/>\r\n                  <span>H·ªØu √≠ch ({review.helpful?.length || 0})</span>\r\n                </button>\r\n                \r\n                <button\r\n                  onClick={() => onReportClick?.(review.id)}\r\n                  className=",
  "spanluuYQuizNayCoQuizresourcesfilterrAnyRrequiredl": "/>\r\n                <span>L∆∞u √Ω: Quiz n√†y c√≥ {quiz.resources.filter((r: any) => r.required).length} t√†i li·ªáu <strong>B·∫ÆT BU·ªòC</strong> h·ªçc vi√™n ph·∫£i xem tr∆∞·ªõc khi l√†m b√†i!</span>\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Questions List Section */}\r\n      <div className=",
  "spanquizattemptsLuotChoispanDivDivClassname": "/>\r\n                    <span>{quiz.attempts} l∆∞·ª£t ch∆°i</span>\r\n                  </div>\r\n                  <div className=",
  "spanquizaveragescoretofixed1DiemTbspanDivDivClassn": "/>\r\n                    <span>{quiz.averageScore.toFixed(1)}% ƒëi·ªÉm TB</span>\r\n                  </div>\r\n                  <div className=",
  "spanquizquestionslengthCauHoispanSpanDivDivDivClas": "/>\r\n                  <span>{quiz.questions.length} c√¢u h·ªèi</span>\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div className=",
  "spanquiztotalplayersNguoiChoispanDivDivClassname": "/>\r\n                    <span>{quiz.totalPlayers} ng∆∞·ªùi ch∆°i</span>\r\n                  </div>\r\n                  <div className=",
  "spanspanSpantaiFilespanButtonIsopenDivClassname": ">\r\n        <span>üìÅ</span>\r\n        <span>T·∫£i File</span>\r\n      </button>\r\n\r\n      {isOpen && (\r\n        <div className=",
  "spansuDungCauHoispanButtonDivDivDivClassname": "/>\r\n                    <span>S·ª≠ d·ª•ng c√¢u h·ªèi</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=",
  "spansuDungVertexAigeminiProspanDivDivDivReviewStep": "/>\r\n                  <span>S·ª≠ d·ª•ng Vertex AI/Gemini Pro</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Review Step */}\r\n          {step ===",
  "spantaoCauHoispanButtonDivDivGeneratingStepStep": "/>\r\n                  <span>T·∫°o c√¢u h·ªèi</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Generating Step */}\r\n          {step ===",
  "spantaoCauHoispanButtonDivDivStep": "/>\r\n                    <span>T·∫°o c√¢u h·ªèi</span>\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {step ===",
  "spantaoLaispanButtonDivPClassname": "/>\r\n                        <span>T·∫°o l·∫°i</span>\r\n                      </button>\r\n                    </div>\r\n                    <p className=",
  "spantienDospanSpanprogresspercentagespanDivDivClas": ">\r\n            <span>Ti·∫øn ƒë·ªô</span>\r\n            <span>{progressPercentage}%</span>\r\n          </div>\r\n          <div className=",
  "spanxemTatCaspanSvgClassname": ">\r\n              <span>Xem t·∫•t c·∫£</span>\r\n              <svg className=",
  "start": "B·∫Øt ƒë·∫ßu",
  "statequizThemMoiDashboardStatsStateVoiDuLieuThatCo": "state.quiz);\r\n  \r\n  // **TH√äM M·ªöI**: Dashboard stats state v·ªõi d·ªØ li·ªáu th·∫≠t\r\n  const [stats, setStats] = useState",
  "staticAsyncTerminateworkerIfThisworkerAwaitThiswor": "};\r\n    }\r\n  }\r\n\r\n  static async terminateWorker() {\r\n    if (this.worker) {\r\n      await this.worker.terminate();\r\n      this.worker = null;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * PDF Service - Tr√≠ch xu·∫•t text t·ª´ PDF\r\n */\r\nexport class PDFService {\r\n  static async extractTextFromPDF(file: File): Promise<FileProcessingResult> {\r\n    try {\r\n      // ƒê·ªçc file PDF\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      \r\n      // Load PDF document\r\n      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\r\n      \r\n      let fullText = '';\r\n      const totalPages = pdf.numPages;\r\n      \r\n      // Tr√≠ch xu·∫•t text t·ª´ t·∫•t c·∫£ c√°c trang\r\n      for (let i = 1; i <= totalPages; i++) {\r\n        const page = await pdf.getPage(i);\r\n        const textContent = await page.getTextContent();\r\n        \r\n        const pageText = textContent.items\r\n          .map((item: any) => item.str)\r\n          .join(' ');\r\n        \r\n        fullText +=",
  "statstotalcreatorsdivDivDivDivModalGuiThongBaoShow": ">{stats.totalCreators}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Modal g·ª≠i th√¥ng b√°o */}\r\n      {showNotificationModal && (\r\n        <div className=",
  "status": {
    "active": "Ho·∫°t ƒë·ªông",
    "approved": "ƒê√£ duy·ªát",
    "completed": "Completed",
    "failed": "Th·∫•t b·∫°i",
    "inProgress": "In Progress",
    "inactive": "Kh√¥ng ho·∫°t ƒë·ªông",
    "offline": "Offline",
    "online": "Online",
    "pending": "Ch·ªù duy·ªát",
    "rejected": "ƒê√£ t·ª´ ch·ªëi",
    "successful": "Successful"
  },
  "step2UploadNgayKhongDoiConsoletime": ");\r\n  \r\n  // Step 2: Upload ngay kh√¥ng ƒë·ª£i\r\n  console.time(",
  "strictKhongTheVaoBaiNeuChuaDatRequiredSoftCoTheVao": ";\r\n  // strict: Kh√¥ng th·ªÉ v√†o b√†i n·∫øu ch∆∞a ƒë·∫°t required\r\n  // soft: C√≥ th·ªÉ v√†o nh∆∞ng c√≥ c·∫£nh b√°o + ƒëi·ªÉm tr·ª´ nh·ªè\r\n  // none: Ch·ªâ khuy·∫øn ngh·ªã, kh√¥ng √©p bu·ªôc\r\n  \r\n  softPenalty?: number; // ƒêi·ªÉm tr·ª´ n·∫øu v√†o m√† ch∆∞a ƒë·∫°t (soft mode)\r\n  showWarning?: boolean; // Hi·ªÉn th·ªã c·∫£nh b√°o\r\n  warningMessage?: string;\r\n}\r\n\r\n/**\r\n * Event tracking cho analytics\r\n */\r\nexport interface LearningEvent {\r\n  id: string;\r\n  userId: string;\r\n  quizId: string;\r\n  resourceId: string;\r\n  \r\n  eventType: \r\n    |",
  "strongchiTietstrongRequestdescriptionPDivDivClassn": ">\r\n                              <strong>Chi ti·∫øt:</strong> {request.description}\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                        \r\n                        <div className=",
  "stronggiaiThichstrongQuestionexplanationDivDivDivD": ">\r\n                      <strong>Gi·∫£i th√≠ch:</strong> {question.explanation}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=",
  "strongkhacPhucstrongdivDivClassname": "><strong>Kh·∫Øc ph·ª•c:</strong></div>\r\n                <div className=",
  "strongluuYstrongBanCanXemTatCaRequiredresourceslen": ">\r\n                ‚ö†Ô∏è <strong>L∆∞u √Ω:</strong> B·∫°n c·∫ßn xem t·∫•t c·∫£ {requiredResources.length} t√†i li·ªáu b·∫Øt bu·ªôc tr∆∞·ªõc khi l√†m quiz\r\n              </p>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Required Resources */}\r\n        {requiredResources.length > 0 && (\r\n          <div className=",
  "stronglyDoYeuCaustrongRequestreason": ">\r\n                            <strong>L√Ω do y√™u c·∫ßu:</strong> {request.reason ||",
  "strongviSaoNenXemstrongResourcewhywatchPDivActionB": ">\r\n                  üí° <strong>V√¨ sao n√™n xem:</strong> {resource.whyWatch}\r\n                </p>\r\n              </div>\r\n            )}\r\n\r\n            {/* Action Buttons */}\r\n            <div className=",
  "suDungCauHoi": "S·ª≠ d·ª•ng c√¢u h·ªèi",
  "suDungGoogleGeminiAiMienPhi": "‚Ä¢ S·ª≠ d·ª•ng Google Gemini AI mi·ªÖn ph√≠",
  "suDungTemplateDeDamBaoDinhDangDungFileCoTheChuaNhi": "S·ª≠ d·ª•ng template ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng ƒë√∫ng. \r\n                  File c√≥ th·ªÉ ch·ª©a nhi·ªÅu c√¢u h·ªèi, m·ªói c√¢u h·ªèi tr√™n m·ªôt d√≤ng.",
  "suDungVertexAigeminiPro": "S·ª≠ d·ª•ng Vertex AI/Gemini Pro",
  "sua": "S·ª≠a",
  "suaLaiNutDongDeSuDungMauChuPhuHopReturnDivClassnam": ";\r\n    }\r\n  };\r\n\r\n  // S·ª≠a l·∫°i n√∫t ƒë√≥ng ƒë·ªÉ s·ª≠ d·ª•ng m√†u ch·ªØ ph√π h·ª£p\r\n  return (\r\n    <div className={`fixed top-0 left-0 right-0 z-50 p-4 border-l-4 ${getBgColor()} w-full shadow-md`}>\r\n      <div className=",
  "suaTaiLieu": "S·ª≠a t√†i li·ªáu",
  "substring020ReturnCleannameuseridtimestamprandomst": ").substring(0, 20);\r\n  \r\n  return `${cleanName}_${userId}_${timestamp}_${randomStr}.${extension}`;\r\n};\r\n\r\n/**\r\n * Get thumbnail URLs based on original filename\r\n * Extension t·ª± ƒë·ªông t·∫°o thumbnails v·ªõi format: {filename}_200x200.{ext}\r\n * Retry multiple times v√¨ extension c·∫ßn th·ªùi gian x·ª≠ l√Ω\r\n */\r\nconst getThumbnailUrls = async (\r\n  fileName: string\r\n): Promise<{ small?: string; medium?: string; large?: string }> => {\r\n  const thumbnailSizes = [\r\n    { key:",
  "success": "Th√†nh c√¥ng",
  "svgButtonDivDivDivDivDivDivModalsConfirmationmodal": "/>\n                      </svg>\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Modals */}\n      <ConfirmationModals\n        modalControls={modalControls}\n        onConfirmExit={confirmExitQuiz}\n        onConfirmSubmit={completeQuiz}\n        unansweredQuestions={getUnansweredQuestions()}\n        onGoToQuestion={goToQuestion}\n      />\n\n      {/* Th√™m c·∫£nh b√°o h·∫øt gi·ªù n·∫øu c·∫ßn thi·∫øt - hi·ªán khi c√≤n <= 10% t·ªïng th·ªùi gian */}\n      {isTimeRunningOut && (\n        <div className=",
  "svgClassnamew5H5FillcurrentcolorViewbox002020PathD": "}\r\n              >\r\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                  <path d=\"M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z\"/>\r\n                </svg>\r\n                {showStats ? '·∫®n th·ªëng k√™' : 'Hi·ªán th·ªëng k√™'}\r\n              </button>\r\n              {(user?.role === 'creator' || user?.role === 'admin') && (\r\n                <button \r\n                  onClick={() => navigate('/creator')}\r\n                  className=\"flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\r\n                >\r\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\r\n                  </svg>\r\n                  T·∫°o Quiz m·ªõi\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Statistics Panel */}\r\n        {showStats && quizzes.length > 0 && (\r\n          <QuizStats quizzes={quizzes} />\r\n        )}\r\n\r\n        {/* Enhanced Filter Section */}\r\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8\">\r\n          {/* üÜï Resource Filter Tabs */}\r\n          <div className=\"flex items-center gap-2 mb-6 p-1 bg-gray-100 rounded-lg w-fit\">\r\n            <button\r\n              onClick={() => setResourceFilter('all')}\r\n              className={",
  "svgQuizquestionslengthCauHoiDivDivClassname": "/>\n                </svg>\n                {quiz.questions.length} c√¢u h·ªèi\n              </div>\n              <div className=",
  "svgSapHetGioDivIswarningIscriticalDivClassname": "/>\r\n          </svg>\r\n          S·∫Øp h·∫øt gi·ªù!\r\n        </div>\r\n      )}\r\n      \r\n      {isWarning && !isCritical && (\r\n        <div className=",
  "svgSpancauTruocspanButtonDivClassname": "/>\n                  </svg>\n                  <span>C√¢u tr∆∞·ªõc</span>\n                </button>\n\n                <div className=",
  "svgSpannopBaispanButtonButtonOnclickgotonextquesti": "/>\n                      </svg>\n                      <span>N·ªôp b√†i</span>\n                    </button>\n                  ) : (\n                    <button\n                      onClick={goToNextQuestion}\n                      className=",
  "svgSpanthoatspanButtonDivClassname": "/>\n                </svg>\n                <span>Tho√°t</span>\n              </button>\n              <div className=",
  "svgTaoQuizMoiButtonDivDivDivStatisticsPanelShowsta": "/>\r\n                  </svg>\r\n                  T·∫°o Quiz m·ªõi\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Statistics Panel */}\r\n        {showStats && quizzes.length > 0 && (\r\n          <QuizStats quizzes={quizzes} />\r\n        )}\r\n\r\n        {/* Enhanced Filter Section */}\r\n        <div className=",
  "svgThoiGianConLaiSpanSpanClassnametextlgFontboldFo": "/>\r\n          </svg>\r\n          Th·ªùi gian c√≤n l·∫°i\r\n        </span>\r\n        <span className={`text-lg font-bold font-mono ${getTimerColor()}`}>\r\n          {timeLeft}\r\n        </span>\r\n      </div>\r\n      \r\n      {/* Compact progress bar */}\r\n      <div className=",
  "systempromptnnnoiDungDeTaoCauHoinncontent": "${systemPrompt}\\n\\nN·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi:\\n\\n${content}",
  "tabHienTai": "Tab hi·ªán t·∫°i:",
  "tabHienTaiSpanClassname": ">Tab hi·ªán t·∫°i: <span className=",
  "tagsTuyChon": "Tags (t√πy ch·ªçn)",
  "tagsTuyChonLabelInputClassname": "/>\r\n            Tags (t√πy ch·ªçn)\r\n          </label>\r\n          <input\r\n            className=",
  "taiAnhLen": "T·∫£i ·∫£nh l√™n",
  "taiFile": "T·∫£i File",
  "taiFileCauHoi": "üìÅ T·∫£i file c√¢u h·ªèi",
  "taiFileCauHoih3ButtonOnclickSetisopenfalseClassnam": ">üìÅ T·∫£i file c√¢u h·ªèi</h3>\r\n              <button\r\n                onClick={() => setIsOpen(false)}\r\n                className=",
  "taiKhoanCuaBanDaBiKhoaVuiLongLienHeQuanTriVien": "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kho√°. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.",
  "taiKhoanDaBiVoHieuHoa": "T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a",
  "taiLaiTrang": "T·∫£i l·∫°i trang",
  "taiLaiTrangButtonImportmetaenvdevThisstateerrorDet": ">\r\n              T·∫£i l·∫°i trang\r\n            </button>\r\n            \r\n            {import.meta.env.DEV && this.state.error && (\r\n              <details className=",
  "taiLenFileDeAiPhanTich": "üìé T·∫£i l√™n file ƒë·ªÉ AI ph√¢n t√≠ch",
  "taiLenFileDeAiPhanTichSpanSpanClassname": ">\r\n                  üìé T·∫£i l√™n file ƒë·ªÉ AI ph√¢n t√≠ch\r\n                </span>\r\n                <span className=",
  "taiLieu": "üìÑ T√†i li·ªáu:",
  "taiLieuGiupHocVienChuanBiTotHonTruocKhiLamBai": "T√†i li·ªáu gi√∫p h·ªçc vi√™n chu·∫©n b·ªã t·ªët h∆°n tr∆∞·ªõc khi l√†m b√†i.",
  "taiLieuGiupHocVienChuanBiTotHonTruocKhiLamBaibrBan": ">\r\n            T√†i li·ªáu gi√∫p h·ªçc vi√™n chu·∫©n b·ªã t·ªët h∆°n tr∆∞·ªõc khi l√†m b√†i.<br/>\r\n            B·∫°n kh√¥ng th·ªÉ ti·∫øp t·ª•c n·∫øu ch∆∞a th√™m t√†i li·ªáu.\r\n          </p>\r\n          <button\r\n            onClick={handleAddResource}\r\n            className=",
  "taiLieuHocTap": "T√†i li·ªáu h·ªçc t·∫≠p",
  "taiLieuHocTapH1PClassname": ">\r\n              üìö T√†i li·ªáu h·ªçc t·∫≠p\r\n            </h1>\r\n            <p className=",
  "taiLieuHocTapH2SpanClassname": "/>\n                    üìö T√†i li·ªáu h·ªçc t·∫≠p\n                  </h2>\n                  <span className=",
  "taiLieuHocTapH3DivClassname": "/>\r\n              üìö T√†i li·ªáu h·ªçc t·∫≠p\r\n            </h3>\r\n            <div className=",
  "taiLieuHocTapPreviewquizlearningresourceslengthH3D": "/>\r\n                      üìö T√†i li·ªáu h·ªçc t·∫≠p ({previewQuiz.learningResources.length})\r\n                    </h3>\r\n                    <div className=",
  "taiLieuHocTapSpanClassname": ">\r\n            üìö T√†i li·ªáu h·ªçc t·∫≠p <span className=",
  "taiLieustrongDivClassname": ">üìÑ T√†i li·ªáu:</strong>\r\n                  <div className=",
  "taiMauCsv": "üìÑ T·∫£i m·∫´u CSV",
  "taiMauCsvButtonButtonOnclickDownloadtemplate": ">\r\n                  üìÑ T·∫£i m·∫´u CSV\r\n                </button>\r\n                <button\r\n                  onClick={() => downloadTemplate(",
  "taiMauExcel": "üìä T·∫£i m·∫´u Excel",
  "taiMauExcelButtonDivFileUploadOptionsDivClassname": ">\r\n                  üìä T·∫£i m·∫´u Excel\r\n                </button>\r\n              </div>\r\n\r\n              {/* File Upload Options */}\r\n              <div className=",
  "taiXuong": "T·∫£i xu·ªëng",
  "tamKhoa": "T·∫°m kh√≥a",
  "tamKhoaoptionOptionValue": ">T·∫°m kh√≥a</option>\r\n                <option value=",
  "taoCauHoi": "T·∫°o c√¢u h·ªèi",
  "taoCauHoiThongMinhVoiAi": "T·∫°o c√¢u h·ªèi th√¥ng minh v·ªõi AI",
  "taoCauHoiThongMinhVoiAipDivDivButtonOnclickonclose": ">T·∫°o c√¢u h·ªèi th√¥ng minh v·ªõi AI</p>\r\n              </div>\r\n            </div>\r\n            <button \r\n              onClick={onClose}\r\n              className=",
  "taoCauHoiTuDongBangGoogleGeminiAi": "T·∫°o c√¢u h·ªèi t·ª± ƒë·ªông b·∫±ng Google Gemini AI",
  "taoCauHoiTuDongBangGoogleGeminiAipDivDivDivClassna": ">T·∫°o c√¢u h·ªèi t·ª± ƒë·ªông b·∫±ng Google Gemini AI</p>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=",
  "taoCauHoiVoiAi": "T·∫°o c√¢u h·ªèi v·ªõi AI",
  "taoCauHoiVoiAiButtonDivDivCase": ">\r\n                ü§ñ T·∫°o c√¢u h·ªèi v·ªõi AI\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case",
  "taoCauHoiVoiAih3PClassname": ">T·∫°o c√¢u h·ªèi v·ªõi AI</h3>\r\n                <p className=",
  "taoDocumentTrongCollectionMailExtensionSeTuDongGui": ";\r\n\r\n    // T·∫°o document trong collection 'mail' - Extension s·∫Ω t·ª± ƒë·ªông g·ª≠i\r\n    await addDoc(collection(db, 'mail'), {\r\n      to: [email],\r\n      from: 'lequytoanptit0303@gmail.com', // Default FROM address t·ª´ extension config\r\n      replyTo: 'lequytoanptit0303@gmail.com',\r\n      message: {\r\n        subject: 'üîê M√£ x√°c th·ª±c ƒëƒÉng k√Ω Quiz App',\r\n        html: emailHTML,\r\n        text:",
  "taoFormdatanumquestionsCauHoiGetdifficultylabelfor": "/>\r\n              T·∫°o {formData.numQuestions} c√¢u h·ªèi {getDifficultyLabel(formData.difficulty)}\r\n              {formData.useFileContent &&",
  "taoLai": "T·∫°o l·∫°i",
  "taoLaiButtonButtonOnclickhandleacceptquestionsClas": ">\r\n                  T·∫°o l·∫°i\r\n                </button>\r\n                <button\r\n                  onClick={handleAcceptQuestions}\r\n                  className=",
  "taoLaiButtonButtonOnclickhandleimportquestionsClas": ">\r\n                ‚Üê T·∫°o l·∫°i\r\n              </button>\r\n              <button\r\n                onClick={handleImportQuestions}\r\n                className=",
  "taoNumquestionsCauHoiTracNghiemVeChuDeTopicVoiDoKh": "T·∫°o ${numQuestions} c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªÅ ch·ªß ƒë·ªÅ \"${topic}\" v·ªõi ƒë·ªô kh√≥ ${difficulty}.\r\n\r\nY√™u c·∫ßu ƒë·ªãnh d·∫°ng JSON ch√≠nh x√°c:\r\n{\r\n  \"questions\": [\r\n    {\r\n      \"text\": \"C√¢u h·ªèi...\",\r\n      \"answers\": [\r\n        {\"text\": \"ƒê√°p √°n A\", \"isCorrect\": false},\r\n        {\"text\": \"ƒê√°p √°n B\", \"isCorrect\": true},\r\n        {\"text\": \"ƒê√°p √°n C\", \"isCorrect\": false},\r\n        {\"text\": \"ƒê√°p √°n D\", \"isCorrect\": false}\r\n      ]\r\n    }\r\n  ]\r\n}\r\n\r\nL∆∞u √Ω:\r\n- M·ªói c√¢u h·ªèi ph·∫£i c√≥ ƒë√∫ng 4 ƒë√°p √°n\r\n- Ch·ªâ c√≥ 1 ƒë√°p √°n ƒë√∫ng (isCorrect: true)\r\n- C√¢u h·ªèi ph·∫£i r√µ r√†ng, ch√≠nh x√°c\r\n- ƒê√°p √°n ph·∫£i h·ª£p l√Ω v√† ƒëa d·∫°ng\r\n- Tr·∫£ v·ªÅ CH√çNH X√ÅC ƒë·ªãnh d·∫°ng JSON, kh√¥ng th√™m text kh√°c",
  "taoQuiz": "T·∫°o Quiz",
  "taoQuizChoCongDongBaoGomTatCaQuyenCuaUser": "T·∫°o quiz cho c·ªông ƒë·ªìng, bao g·ªìm t·∫•t c·∫£ quy·ªÅn c·ªßa User",
  "taoQuizChoCongDongBaoGomTatCaQuyenCuaUserPUlClassn": ">\r\n                  T·∫°o quiz cho c·ªông ƒë·ªìng, bao g·ªìm t·∫•t c·∫£ quy·ªÅn c·ªßa User\r\n                </p>\r\n                <ul className=",
  "taoQuizMoi": "T·∫°o Quiz M·ªõi",
  "taoQuizNgay": "T·∫°o Quiz ngay",
  "taoQuizNgayButtonLinkDivDivThemMoiQuickActionsDivC": ">\r\n                  T·∫°o Quiz ngay\r\n                </Button>\r\n              </Link>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* **TH√äM M·ªöI**: Quick Actions */}\r\n      <div className=",
  "taoQuizThanhCong": "T·∫°o quiz th√†nh c√¥ng!",
  "taoQuizspanSpanClassnametextxsPx2Py1RoundedSelecte": ">T·∫°o quiz</span>\r\n                        <span className={`text-xs px-2 py-1 rounded ${\r\n                          selectedCreator.permissions.canCreateQuiz \r\n                            ?",
  "tatCa": "T·∫•t c·∫£",
  "tatCaDanhMuc": "üè∑Ô∏è T·∫•t c·∫£ danh m·ª•c",
  "tatCaDanhMucoptionCategoriesmapcOptionKeycValuecco": ">üè∑Ô∏è T·∫•t c·∫£ danh m·ª•c</option>\r\n              {categories.map(c => <option key={c} value={c}>{c}</option>)}\r\n            </select>\r\n            \r\n            {/* Difficulty Filter */}\r\n            <select \r\n              className=",
  "tatCaDoKho": "üìä T·∫•t c·∫£ ƒë·ªô kh√≥",
  "tatCaDoKhooptionDifficultiesmapdOptionKeydValuedD": ">üìä T·∫•t c·∫£ ƒë·ªô kh√≥</option>\r\n              {difficulties.map(d => <option key={d} value={d}>\r\n                {d ===",
  "tatCaQuizQuizzesfilterqQstatus": "}`}\r\n            >\r\n              üìö T·∫•t c·∫£ Quiz ({quizzes.filter(q => q.status ===",
  "tatCaQuizQuizzesfilterqQstatusApprovedlengthButton": "}\r\n            >\r\n              üìö T·∫•t c·∫£ Quiz ({quizzes.filter(q => q.status === 'approved').length})\r\n            </button>\r\n            <button\r\n              onClick={() => setResourceFilter('with-resources')}\r\n              className={",
  "tatCaQuyenCuaUser": "‚Ä¢ T·∫•t c·∫£ quy·ªÅn c·ªßa User",
  "tatCaTabsDashboardUsersQuizzesCategoriesDivNavClas": "| T·∫•t c·∫£ tabs: dashboard, users, quizzes, categories\r\n          </div>\r\n          \r\n          <nav className=",
  "tatCaTrangThai": "T·∫•t c·∫£ tr·∫°ng th√°i",
  "tatCaTrangThaioptionOptionValue": ">T·∫•t c·∫£ tr·∫°ng th√°i</option>\r\n                <option value=",
  "te": "T·ªá",
  "tenQuizKhongXacDinh": "T√™n quiz kh√¥ng x√°c ƒë·ªãnh",
  "testKetNoiButtonDivDivDivClassname": "/>\r\n            )}\r\n            Test k·∫øt n·ªëi\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=",
  "textAnswertextIscorrectAnsweriscorrectTrueExplanat": ",\r\n            text: answer.text || '',\r\n            isCorrect: answer.isCorrect === true\r\n          })) || [],\r\n          explanation: questionData.explanation || '',\r\n          points: questionData.points || 10,\r\n          difficulty: questionData.difficulty || 'medium'\r\n        };\r\n\r\n        // Validate question\r\n        if (question.text && question.answers.length >= 2) {\r\n          questions.push(question);\r\n        }\r\n      }\r\n\r\n      return questions;\r\n    } catch (error) {\r\n      console.error('Error parsing questions from response:', error);\r\n      throw new Error('Kh√¥ng th·ªÉ ph√¢n t√≠ch c√¢u h·ªèi t·ª´ AI');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse questions t·ª´ raw text response\r\n   */\r\n  private static parseQuestionsFromText(text: string): Question[] {\r\n    try {\r\n      // Remove markdown code blocks if present\r\n      const cleanText = text.replace(/",
  "textFileServiceDocPlainTextFilesExportClassTextser": "};\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Text File Service - ƒê·ªçc plain text files\r\n */\r\nexport class TextService {\r\n  static async extractTextFromTextFile(file: File): Promise<FileProcessingResult> {\r\n    try {\r\n      const text = await file.text();\r\n      \r\n      return {\r\n        extractedText: text,\r\n        success: true,\r\n        metadata: {\r\n          fileSize: file.size,\r\n          fileName: file.name\r\n        }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        extractedText: '',\r\n        success: false,\r\n        error:",
  "textJavascriptDuocPhatTrienBoiCongTyNaoTypeMultipl": ",\r\n            text: 'JavaScript ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi c√¥ng ty n√†o?',\r\n            type: 'multiple',\r\n            answers: [\r\n              { id: 'a', text: 'Netscape', isCorrect: true },\r\n              { id: 'b', text: 'Microsoft', isCorrect: false },\r\n              { id: 'c', text: 'Google', isCorrect: false },\r\n              { id: 'd', text: 'Apple', isCorrect: false }\r\n            ],\r\n            explanation: 'JavaScript ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Brendan Eich t·∫°i Netscape v√†o nƒÉm 1995.',\r\n            points: 10\r\n          },\r\n          {\r\n            id:",
  "textQuestiontextTypeMultipleAnswersExplanationExpl": ",\r\n        text: questionText,\r\n        type: 'multiple',\r\n        answers,\r\n        explanation: explanation || undefined,\r\n        points: parseInt(points) || 10\r\n      };\r\n      \r\n      questions.push(question);\r\n    }\r\n    \r\n    return questions;\r\n  };\r\n\r\n  const parseCSVLine = (line: string): string[] => {\r\n    const result: string[] = [];\r\n    let current = '';\r\n    let inQuotes = false;\r\n    \r\n    for (let i = 0; i < line.length; i++) {\r\n      const char = line[i];\r\n      \r\n      if (char === '\"') {\r\n        inQuotes = !inQuotes;\r\n      } else if (char === ',' && !inQuotes) {\r\n        result.push(current.trim());\r\n        current = '';\r\n      } else {\r\n        current += char;\r\n      }\r\n    }\r\n    \r\n    result.push(current.trim());\r\n    return result.map(field => field.replace(/^\"(.*)\"$/, '$1')); // Remove surrounding quotes\r\n  };\r\n\r\n  const downloadTemplate = (fileType: 'csv' | 'excel') => {\r\n    const headers = ['C√¢u h·ªèi', 'ƒê√°p √°n A', 'ƒê√°p √°n B', 'ƒê√°p √°n C', 'ƒê√°p √°n D', 'ƒê√°p √°n ƒë√∫ng (A/B/C/D)', 'Gi·∫£i th√≠ch (t√πy ch·ªçn)', 'ƒêi·ªÉm (m·∫∑c ƒë·ªãnh 10)'];\r\n    const sampleRow = [\r\n      'JavaScript l√† ng√¥n ng·ªØ g√¨?',\r\n      'Ng√¥n ng·ªØ l·∫≠p tr√¨nh',\r\n      'Ng√¥n ng·ªØ ƒë√°nh d·∫•u',\r\n      'H·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu',\r\n      'H·ªá ƒëi·ªÅu h√†nh',\r\n      'A',\r\n      'JavaScript l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn',\r\n      '10'\r\n    ];\r\n    \r\n    const csvContent = [headers, sampleRow]\r\n      .map(row => row.map(field =>",
  "textReactLaGiTypeMultipleAnswersIdATextFrameworkIs": ",\r\n            text: 'React l√† g√¨?',\r\n            type: 'multiple',\r\n            answers: [\r\n              { id: 'a', text: 'Framework', isCorrect: false },\r\n              { id: 'b', text: 'Library', isCorrect: true },\r\n              { id: 'c', text: 'Language', isCorrect: false },\r\n              { id: 'd', text: 'Database', isCorrect: false }\r\n            ],\r\n            explanation: 'React l√† m·ªôt JavaScript library ƒë·ªÉ x√¢y d·ª±ng user interface.',\r\n            points: 10\r\n          }\r\n        ];\r\n\r\n        toast.warning('ƒêang s·ª≠ d·ª•ng c√¢u h·ªèi m·∫´u thay v√¨ AI');\r\n        return mockQuestions;\r\n      } else {\r\n        // Re-throw the error to stop the process\r\n        throw error;\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleImportQuestions = () => {\r\n    if (generatedQuestions.length > 0) {\r\n      onQuestionsImported(generatedQuestions);\r\n      toast.success(",
  "thacSiQuiz": "üìö Th·∫°c sƒ© Quiz",
  "thamGiaLamQuizXemKetQuaVaTheoDoiTienDoHocTapCuaBan": ">\r\n                  Tham gia l√†m quiz, xem k·∫øt qu·∫£ v√† theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p c·ªßa b·∫°n\r\n                </p>\r\n                <ul className=",
  "thangNay": "Th√°ng n√†y",
  "thanhCongBanDangXemTrangThongKeVoiBieuDo": "Th√†nh c√¥ng! B·∫°n ƒëang xem trang th·ªëng k√™ v·ªõi bi·ªÉu ƒë·ªì",
  "thanhCongBanDangXemTrangThongKeVoiBieuDoH3DivClass": ">\r\n              Th√†nh c√¥ng! B·∫°n ƒëang xem trang th·ªëng k√™ v·ªõi bi·ªÉu ƒë·ªì\r\n            </h3>\r\n            <div className=",
  "thanhTich": "üèÜ Th√†nh t√≠ch",
  "thanhTichh2DivClassname": ">üèÜ Th√†nh t√≠ch</h2>\r\n          <div className=",
  "thaoTac": "Thao t√°c",
  "thaoTacThTrTheadTbodyClassname": ">\r\n                Thao t√°c\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className=",
  "theThao": "Th·ªÉ thao",
  "theThaoVaSucKhoe": "Th·ªÉ thao v√† s·ª©c kh·ªèe",
  "them": "Th√™m",
  "themAnh": "+ Th√™m ·∫£nh",
  "themAnhbuttonDivDivClassname": ">+ Th√™m ·∫£nh</Button>\r\n          </div>\r\n          <div className=",
  "themCachVietKhac": "+ Th√™m c√°ch vi·∫øt kh√°c",
  "themCachVietKhacButtonDivDivQuestiontype": ">\r\n              + Th√™m c√°ch vi·∫øt kh√°c\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {question.type ===",
  "themCauHoi": "+ Th√™m c√¢u h·ªèi",
  "themCauHoiButtonQuizbulkimportOnquestionsimportedh": ">\r\n            + Th√™m c√¢u h·ªèi\r\n          </Button>\r\n          <QuizBulkImport onQuestionsImported={handleBulkImport} />\r\n          <Button\r\n            onClick={() => setShowGeminiAI(true)}\r\n            className=",
  "themDapAn": "+ Th√™m ƒë√°p √°n",
  "themDapAnbuttonDivQuestionanswersmapaIdxDivKeyaidC": ">+ Th√™m ƒë√°p √°n</Button>\r\n          </div>\r\n          {question.answers.map((a, idx) => (\r\n            <div key={a.id} className=",
  "themHamGetbuttoncolorConstGetbuttoncolorSwitchNoti": ";\r\n    }\r\n  };\r\n\r\n  // Th√™m h√†m getButtonColor\r\n  const getButtonColor = () => {\r\n    switch (notification?.type) {\r\n      case",
  "themItNhat1TaiLieuVideoPdfAnhHoacLinkDeHocVienXemT": ">\r\n            Th√™m √≠t nh·∫•t 1 t√†i li·ªáu (video, PDF, ·∫£nh, ho·∫∑c link) ƒë·ªÉ h·ªçc vi√™n xem tr∆∞·ªõc khi l√†m b√†i\r\n          </p>\r\n        </div>\r\n        <button\r\n          onClick={handleAddResource}\r\n          className=",
  "themMoiDashboardStatsInterfaceInterfaceDashboardst": ";\n// **TH√äM M·ªöI**: Dashboard stats interface\r\ninterface DashboardStats {\r\n  totalQuizzes: number;\r\n  totalUsers: number;\r\n  completedQuizzes: number;\r\n  totalCreators: number;\r\n}\r\n\r\nconst Home: React.FC = () => {\n  const { t } = useTranslation();\n\r\n  const dispatch = useDispatch();\r\n  const { user } = useSelector((state: RootState) => state.auth);\r\n  const { quizzes, loading } = useSelector((state: RootState) => state.quiz);\r\n  \r\n  // **TH√äM M·ªöI**: Dashboard stats state v·ªõi d·ªØ li·ªáu th·∫≠t\r\n  const [stats, setStats] = useState<DashboardStats>({\r\n    totalQuizzes: 0,\r\n    totalUsers: 0,\r\n    completedQuizzes: 0,\r\n    totalCreators: 0\r\n  });\r\n\r\n  const [featuredQuizzes, setFeaturedQuizzes] = useState<Quiz[]>([]);\r\n  const [statsLoading, setStatsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (quizzes.length === 0) {\r\n      dispatch(fetchQuizzes({ user }) as any);\r\n    }\r\n    loadRealStats();\r\n  }, [dispatch, user, quizzes.length]);\r\n\r\n  const loadRealStats = async () => {\r\n    try {\r\n      setStatsLoading(true);\r\n      \r\n      // L·∫•y d·ªØ li·ªáu th·ª±c t·ª´ Firebase\r\n      const [quizzesSnapshot, usersSnapshot] = await Promise.all([\r\n        getDocs(collection(db,",
  "themTaiLieu": "Th√™m t√†i li·ªáu",
  "themTaiLieuButtonDivResourcesListResourceslength0D": "/>\r\n          Th√™m t√†i li·ªáu\r\n        </button>\r\n      </div>\r\n\r\n      {/* Resources List */}\r\n      {resources.length === 0 ? (\r\n        <div className=",
  "themTaiLieuDauTien": "+ Th√™m t√†i li·ªáu ƒë·∫ßu ti√™n",
  "themTaiLieuDauTienButtonDivDivClassname": ">\r\n            + Th√™m t√†i li·ªáu ƒë·∫ßu ti√™n\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div className=",
  "themTaiLieuMoi": "Th√™m t√†i li·ªáu m·ªõi",
  "themVaoYeuThich": "Th√™m v√†o y√™u th√≠ch",
  "theoDoKho": "üìà Theo ƒë·ªô kh√≥",
  "theoDoKhooptionSelectShowCompletedToggleLabelClass": ">üìà Theo ƒë·ªô kh√≥</option>\r\n              </select>\r\n\r\n              {/* Show Completed Toggle */}\r\n              <label className=",
  "theoDoiTienDoHocTap": "‚Ä¢ Theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p",
  "theoSoCauHoi": "üî¢ Theo s·ªë c√¢u h·ªèi",
  "theoSoCauHoioptionOptionValue": ">üî¢ Theo s·ªë c√¢u h·ªèi</option>\r\n              <option value=",
  "theoThoiLuong": "‚è±Ô∏è Theo th·ªùi l∆∞·ª£ng",
  "theoThoiLuongoptionSelectMinQuestionsDivLabelClass": ">‚è±Ô∏è Theo th·ªùi l∆∞·ª£ng</option>\r\n            </select>\r\n\r\n            {/* Min Questions */}\r\n            <div>\r\n              <label className=",
  "thietKeVaChiaSeQuizCuaRiengBanVoiMoiNguoi": "Thi·∫øt k·∫ø v√† chia s·∫ª quiz c·ªßa ri√™ng b·∫°n v·ªõi m·ªçi ng∆∞·ªùi",
  "thietKeVaChiaSeQuizCuaRiengBanVoiMoiNguoipDivClass": ">Thi·∫øt k·∫ø v√† chia s·∫ª quiz c·ªßa ri√™ng b·∫°n v·ªõi m·ªçi ng∆∞·ªùi</p>\r\n            <div className=",
  "thieuTruongBatBuocMissingfieldsjoin": "Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: ${missingFields.join(', ')}",
  "thisIsWhatProfileWillLinkToCalculateComprehensiveS": "// This is what Profile will link to\r\n        });\r\n      });\r\n    }\r\n    \r\n    // Calculate comprehensive stats with more accurate scoring\r\n    const totalQuizzes = userResults.length;\r\n    \r\n    // Calculate scores more accurately - prioritize correctAnswers/totalQuestions\r\n    const accurateScores = userResults.map(r => {\r\n      // Always prioritize correctAnswers/totalQuestions if available\r\n      if (typeof r.correctAnswers === 'number' && typeof r.totalQuestions === 'number' && r.totalQuestions > 0) {\r\n        return Math.round((r.correctAnswers / r.totalQuestions) * 100);\r\n      } \r\n      // Fallback to score field if it exists and is valid\r\n      else if (typeof r.score === 'number' && !isNaN(r.score)) {\r\n        return r.score <= 1 ? Math.round(r.score * 100) : Math.round(r.score);\r\n      }\r\n      // Last resort: 0\r\n      return 0;\r\n    });\r\n    \r\n    const totalScore = accurateScores.reduce((sum, score) => sum + score, 0);\r\n    const totalCorrect = userResults.reduce((sum, r) => sum + (r.correctAnswers || 0), 0);\r\n    const totalQuestions = userResults.reduce((sum, r) => sum + (r.totalQuestions || 0), 0);\r\n    const totalTime = userResults.reduce((sum, r) => sum + (r.timeSpent || 0), 0);\r\n    \r\n    const averageScore = totalQuizzes > 0 ? totalScore / totalQuizzes : 0;\r\n    const accuracy = totalQuestions > 0 ? (totalCorrect / totalQuestions) * 100 : 0;\r\n    const averageTime = totalQuizzes > 0 ? totalTime / totalQuizzes : 0;\r\n    \r\n    // Performance grades - use accurate scores\r\n    const perfectScores = accurateScores.filter(score => score >= 100).length;\r\n    const highScores = accurateScores.filter(score => score >= 80).length;\r\n    \r\n    console.log('üìä Calculated Stats:', {\r\n      totalQuizzes,\r\n      averageScore: averageScore.toFixed(1),\r\n      accuracy: accuracy.toFixed(1),\r\n      perfectScores,\r\n      highScores,\r\n      accurateScores: accurateScores.slice(0, 3) // Show first 3 for debugging\r\n    });\r\n    \r\n    setStats({\r\n      totalQuizzes,\r\n      totalScore,\r\n      averageScore,\r\n      accuracy,\r\n      averageTime,\r\n      perfectScores,\r\n      highScores,\r\n      recentActivity: userResults.slice(0, 5)\r\n    });\r\n    \r\n    // setLoading(false);\r\n  }, [userResults, user]);\r\n\r\n  // Filter and sort results\r\n  const filteredResults = results\r\n    .filter(result => {\r\n      // Search filter\r\n      if (searchTerm) {\r\n        const quizTitle = quizTitles[result.quizId] || t('quiz.untitled');\r\n        return quizTitle.toLowerCase().includes(searchTerm.toLowerCase());\r\n      }\r\n      return true;\r\n    })\r\n    .filter(result => {\r\n      // Score filter with guard\r\n      const percentage = result.totalQuestions > 0 ? (result.correctAnswers / result.totalQuestions) * 100 : 0;\r\n      switch (filterByScore) {\r\n        case 'high': return percentage >= 80;\r\n        case 'medium': return percentage >= 60 && percentage < 80;\r\n        case 'low': return percentage < 60;\r\n        default: return true;\r\n      }\r\n    })\r\n    .sort((a, b) => {\r\n      let comparison = 0;\r\n      const percentageA = a.totalQuestions > 0 ? (a.correctAnswers / a.totalQuestions) * 100 : 0;\r\n      const percentageB = b.totalQuestions > 0 ? (b.correctAnswers / b.totalQuestions) * 100 : 0;\r\n\r\n      switch (sortBy) {\r\n        case 'date':\r\n          comparison = new Date(b.completedAt).getTime() - new Date(a.completedAt).getTime();\r\n          break;\r\n        case 'score':\r\n          comparison = percentageB - percentageA; // Sort by percentage for score\r\n          break;\r\n        case 'percentage':\r\n          comparison = percentageB - percentageA;\r\n          break;\r\n        default:\r\n          comparison = 0;\r\n      }\r\n      return sortOrder === 'asc' ? -comparison : comparison;\r\n    });\r\n\r\n  // Pagination\r\n  // const totalPages = Math.ceil(filteredResults.length / itemsPerPage);\r\n  const startIndex = (currentPage - 1) * itemsPerPage;\r\n  const paginatedResults = showAll ? filteredResults : filteredResults.slice(startIndex, startIndex + itemsPerPage);\r\n\r\n  const handleProfileUpdate = async () => {\r\n    if (!user || !auth.currentUser) return;\r\n    \r\n    setSaving(true);\r\n    try {\r\n      await updateProfile(auth.currentUser, {\r\n        displayName: displayName,\r\n        photoURL: avatarUrl\r\n      });\r\n      toast.success(t('profile.profileUpdateSuccess'));\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n      toast.error(t('profile.profileUpdateError'));\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordUpdate = async () => {\r\n    if (!auth.currentUser || !currentPassword || !newPassword || !confirmPassword) {\r\n      toast.error(t('profile.fillAllFields'));\r\n      return;\r\n    }\r\n\r\n    if (newPassword !== confirmPassword) {\r\n      toast.error(t('profile.passwordMismatch'));\r\n      return;\r\n    }\r\n\r\n    if (newPassword.length < 6) {\r\n      toast.error(t('profile.passwordTooShort'));\r\n      return;\r\n    }\r\n\r\n    if (newPassword === currentPassword) {\r\n      toast.error(t('profile.passwordMustDiffer'));\r\n      return;\r\n    }\r\n\r\n    if (!auth.currentUser.email) {\r\n      toast.error(t('profile.emailNotFound'));\r\n      return;\r\n    }\r\n    \r\n    setSaving(true);\r\n    try {\r\n      // T·∫°o credential ƒë·ªÉ reauthenticate\r\n      const credential = EmailAuthProvider.credential(auth.currentUser.email, currentPassword);\r\n      \r\n      // X√ÅC TH·ª∞C L·∫†I NG∆Ø·ªúI D√ôNG TR∆Ø·ªöC KHI ƒê·ªîI M·∫¨T KH·∫®U\r\n      await reauthenticateWithCredential(auth.currentUser, credential);\r\n      \r\n      // N·∫øu x√°c th·ª±c th√†nh c√¥ng, ƒë·ªïi m·∫≠t kh·∫©u m·ªõi\r\n      await updatePassword(auth.currentUser, newPassword);\r\n      \r\n      // Reset form\r\n      setCurrentPassword('');\r\n      setNewPassword('');\r\n      setConfirmPassword('');\r\n      toast.success(t('profile.passwordChangeSuccess'));\r\n    } catch (error: any) {\r\n      console.error('Error updating password:', error);\r\n      if (error.code === 'auth/wrong-password' || error.code === 'auth/invalid-credential') {\r\n        toast.error(t('profile.wrongPassword'));\r\n      } else if (error.code === 'auth/weak-password') {\r\n        toast.error(t('profile.weakPassword'));\r\n      } else if (error.code === 'auth/requires-recent-login') {\r\n        toast.error(t('profile.requiresRecentLogin'));\r\n      } else {\r\n        toast.error(t('profile.passwordChangeError', {message: error.message}));\r\n      }\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const renderStatCard = (icon: React.ReactNode, title: string, value: string | number, subtitle?: string, color: string = 'bg-blue-500') => (\r\n    <div className=\"bg-white rounded-xl p-6 shadow-sm border border-gray-100 hover:shadow-md transition-shadow\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center space-x-4\">\r\n          <div className={",
  "thoat": "Tho√°t",
  "thoatButtonDivDivDivSubmitConfirmationModalModalco": ">\r\n                Tho√°t\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Submit Confirmation Modal */}\r\n      {modalControls.showSubmitModal && (\r\n        <div className=",
  "thoatToanManHinh": "Tho√°t to√†n m√†n h√¨nh",
  "thoiGian": "‚è±Ô∏è Th·ªùi gian:",
  "thoiGianConLai": "Th·ªùi gian c√≤n l·∫°i",
  "thoiGianKhongXacDinh": "Th·ªùi gian kh√¥ng x√°c ƒë·ªãnh",
  "thoiGianPhut": "Th·ªùi gian (ph√∫t)",
  "thoiGianPhutLabelInputType": "/>\r\n                        Th·ªùi gian (ph√∫t)\r\n                      </label>\r\n                      <input\r\n                        type=",
  "thoiGianUocTinhPhut": "‚è±Ô∏è Th·ªùi gian ∆∞·ªõc t√≠nh (ph√∫t)",
  "thoiGianUocTinhPhutLabelInputType": ">\r\n                  ‚è±Ô∏è Th·ªùi gian ∆∞·ªõc t√≠nh (ph√∫t)\r\n                </label>\r\n                <input\r\n                  type=",
  "thoiGianUocTinhTotalestimatedtimePhutPDivAllrequir": ">\r\n                ‚è±Ô∏è Th·ªùi gian ∆∞·ªõc t√≠nh: {totalEstimatedTime} ph√∫t\r\n              </p>\r\n            )}\r\n          </div>\r\n\r\n          {!allRequiredViewed && requiredResources.length > 0 && (\r\n            <div className=",
  "thoiGianstrongPClassname": ">‚è±Ô∏è Th·ªùi gian:</strong> \r\n            <p className=",
  "thoiLuongToiDaFiltersmaxdurationPhutlabelInputType": ">Th·ªùi l∆∞·ª£ng t·ªëi ƒëa: {filters.maxDuration} ph√∫t</label>\r\n              <input\r\n                type=",
  "thongKeAdmin": "Th·ªëng k√™ Admin",
  "thongKeAdminh1DivDivClassname": ">Th·ªëng k√™ Admin</h1>\r\n            </div>\r\n            \r\n            <div className=",
  "thongKeRieng": "Th·ªëng k√™ ri√™ng",
  "thongTin": "üí° Th√¥ng tin:",
  "thongTinQuiz": "Th√¥ng tin Quiz",
  "thongTinQuizh3DivClassname": ">üìä Th√¥ng tin Quiz</h3>\r\n          \r\n          <div className=",
  "thongTinh4UlClassname": ">üí° Th√¥ng tin:</h4>\r\n          <ul className=",
  "thuGon": "Thu g·ªçn",
  "thuLai": "Th·ª≠ l·∫°i",
  "thuLaiButtonDivDivDivIfLoadingReturnDivClassname": ">\r\n              Th·ª≠ l·∫°i\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  if (loading) {\r\n    return (\r\n      <div className=",
  "thuLaiKetNoi": "üîÑ Th·ª≠ l·∫°i k·∫øt n·ªëi",
  "thuNho": "Thu nh·ªè",
  "thumbnailsDaDuocTaoTuDong": "Thumbnails ƒë√£ ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông",
  "thumbnailsDaSanSang": "üñºÔ∏è Thumbnails ƒë√£ s·∫µn s√†ng",
  "thumbnailsDaTao": "Thumbnails ƒë√£ t·∫°o",
  "thumbnailsDaTaoh4DivDivClassname": ">Thumbnails ƒë√£ t·∫°o</h4>\r\n          </div>\r\n          <div className=",
  "tien10s": "Ti·∫øn 10s",
  "tienDo": "Ti·∫øn ƒë·ªô",
  "tienDoCuaBanSeBiMatNeuThoatBayGio": "Ti·∫øn ƒë·ªô c·ªßa b·∫°n s·∫Ω b·ªã m·∫•t n·∫øu tho√°t b√¢y gi·ªù.",
  "tienDoCuaBanSeBiMatNeuThoatBayGioPDivClassname": ">\r\n              Ti·∫øn ƒë·ªô c·ªßa b·∫°n s·∫Ω b·ªã m·∫•t n·∫øu tho√°t b√¢y gi·ªù.\r\n            </p>\r\n            <div className=",
  "tienDoHocTap": "Ti·∫øn ƒë·ªô h·ªçc t·∫≠p",
  "tienDoHocTapSpanSpanClassname": ">\r\n                Ti·∫øn ƒë·ªô h·ªçc t·∫≠p\r\n              </span>\r\n              <span className=",
  "tienDospanSpanClassname": ">Ti·∫øn ƒë·ªô</span>\r\n        <span className=",
  "tiengViet": "Ti·∫øng Vi·ªát",
  "tiengVietoptionOptionValue": ">Ti·∫øng Vi·ªát</option>\r\n                      <option value=",
  "tiepTucLamBai": "Ti·∫øp t·ª•c l√†m b√†i",
  "tiepTucLamBaiButtonButtonOnclickonconfirmexitClass": ">\r\n                Ti·∫øp t·ª•c l√†m b√†i\r\n              </button>\r\n              <button\r\n                onClick={onConfirmExit}\r\n                className=",
  "tiepTucLamBaiButtonButtonOnclickonconfirmsubmitCla": ">\r\n                Ti·∫øp t·ª•c l√†m b√†i\r\n              </button>\r\n              <button\r\n                onClick={onConfirmSubmit}\r\n                className=",
  "tieuDe": "Ti√™u ƒë·ªÅ *",
  "tieuDeLabelInputType": ">\r\n                  Ti√™u ƒë·ªÅ *\r\n                </label>\r\n                <input\r\n                  type=",
  "tieuDeQuiz": "Ti√™u ƒë·ªÅ Quiz",
  "tieuDeQuizLabelInputType": ">\r\n                Ti√™u ƒë·ªÅ Quiz\r\n              </label>\r\n              <input\r\n                type=",
  "tieuDestrongPClassname": ">üìù Ti√™u ƒë·ªÅ:</strong> \r\n            <p className=",
  "timHieuKienThucMoiQuaCacQuizThuVi": "T√¨m hi·ªÉu ki·∫øn th·ª©c m·ªõi qua c√°c quiz th√∫ v·ªã",
  "timHieuKienThucMoiQuaCacQuizThuVipDivDivClassname": ">T√¨m hi·ªÉu ki·∫øn th·ª©c m·ªõi qua c√°c quiz th√∫ v·ªã</p>\r\n            </div>\r\n            <div className=",
  "timKiem": "T√¨m ki·∫øm...",
  "timKiemCreator": "T√¨m ki·∫øm creator...",
  "timKiemQuiz": "üîç T√¨m ki·∫øm quiz...",
  "timKiemQuizDanhMucTags": "üîç T√¨m ki·∫øm quiz, danh m·ª•c, tags...",
  "timThay": "T√¨m th·∫•y",
  "timThaySpanClassname": ">\r\n            T√¨m th·∫•y <span className=",
  "titleStringDescriptionStringUrlStringRequiredBoole": ";\r\n    title: string;\r\n    description?: string;\r\n    url: string;\r\n    required: boolean;\r\n    thumbnailUrl?: string;\r\n    whyWatch?: string;\r\n    estimatedTime?: number;\r\n    order?: number;\r\n  }>;\r\n  \r\n  // **TH√äM M·ªöI**: Dashboard v√† stats properties\r\n  isPublic?: boolean;\r\n  allowRetake?: boolean;\r\n  attempts?: number;\r\n  isCompleted?: boolean;\r\n  score?: number;\r\n  averageScore?: number;\r\n  totalPlayers?: number;\r\n  status?:",
  "titlechuyenDenTabTablabelSpanClassname": "}`}\r\n                title={`Chuy·ªÉn ƒë·∫øn tab ${tab.label}`}\r\n              >\r\n                <span className=",
  "titleisfavoriteBoYeuThichThemVaoYeuThichStarClassn": "}\n              title={isFavorite ? 'B·ªè y√™u th√≠ch' : 'Th√™m v√†o y√™u th√≠ch'}\n            >\n              <Star className={",
  "titleisfavoriteBoYeuThichYeuThichQuizNaySvgClassna": "}\n              title={isFavorite ? 'B·ªè y√™u th√≠ch' : 'Y√™u th√≠ch quiz n√†y'}\n            >\n              <svg className=\"w-5 h-5\" fill={isFavorite ? 'gold' : 'none'} stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\" />\n              </svg>\n            </button>\n            <Link\n              to={",
  "titleluoiSvgClassnamew4H4FillcurrentcolorViewbox00": "}\r\n                  title=\"L∆∞·ªõi\"\r\n                >\r\n                  <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                    <path d=\"M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\" />\r\n                  </svg>\r\n                </button>\r\n                <button\r\n                  onClick={() => setViewMode('list')}\r\n                  className={",
  "toanHoc": "To√°n h·ªçc",
  "toanHocVaThongKe": "To√°n h·ªçc v√† th·ªëng k√™",
  "toanManHinh": "To√†n m√†n h√¨nh",
  "toasterrorDinhDangFileKhongHopLeChoTypeSetuploadin": ") {\r\n        toast.error(`‚ùå ƒê·ªãnh d·∫°ng file kh√¥ng h·ª£p l·ªá cho ${type}!`);\r\n        setUploading(false);\r\n        return;\r\n      }\r\n\r\n      // Use uploadImage for images, otherwise use direct Firebase upload\r\n      if (type ===",
  "toasterrorLoiTaoCauHoiErrormessageStayOnPreviewSte": ";\r\n      toast.error(`‚ùå L·ªói t·∫°o c√¢u h·ªèi: ${errorMessage}`);\r\n      \r\n      // Stay on preview step so user can try again\r\n      setCurrentStep(",
  "toasterrorvuiLongChonFileFiletypetouppercaseHopLeS": "))) {\r\n        toast.error(`Vui l√≤ng ch·ªçn file ${fileType.toUpperCase()} h·ª£p l·ªá`);\r\n        setUploading(false);\r\n        return;\r\n      }\r\n\r\n      // Parse file content\r\n      const questions = await parseFile(file, fileType);\r\n      \r\n      if (questions.length === 0) {\r\n        toast.error(",
  "toastsuccessAiDaTaoQuestionslengthCauHoiThanhCongC": ");\r\n      toast.success(`‚úÖ AI ƒë√£ t·∫°o ${questions.length} c√¢u h·ªèi th√†nh c√¥ng!`);\r\n      \r\n    } catch (error) {\r\n      console.error(",
  "toastsuccessDaTaoQuestionslengthCauHoiThanhCongCat": ");\r\n      toast.success(`‚úÖ ƒê√£ t·∫°o ${questions.length} c√¢u h·ªèi th√†nh c√¥ng!`);\r\n\r\n    } catch (error) {\r\n      console.error(",
  "toastsuccessdaTaoResultquestionslengthCauHoiCatchE": ");\r\n      toast.success(`ƒê√£ t·∫°o ${result.questions.length} c√¢u h·ªèi!`);\r\n    } catch (error) {\r\n      toast.error(",
  "tocDoAnhSang": "‚ö° T·ªëc ƒë·ªô √°nh s√°ng",
  "toiVuaMoKhoaThanhTichShowmodaltitleTrongQuizApp": "üéâ T√¥i v·ª´a m·ªü kh√≥a th√†nh t√≠ch \"${showModal.title}\" trong Quiz App!",
  "tongCreator": "T·ªïng Creator",
  "tongDiem": "üéØ T·ªïng ƒëi·ªÉm:",
  "tongDiemstrongPClassname": ">üéØ T·ªïng ƒëi·ªÉm:</strong> \r\n            <p className=",
  "tongHop": "T·ªïng h·ª£p",
  "tongSoQuizTatCaDocumentTrong": "))\r\n        ]);\r\n\r\n        // T·ªïng s·ªë quiz = t·∫•t c·∫£ document trong",
  "tot": "T·ªët",
  "totalpointsDiempDivDivQuizdescriptionDivClassname": ">{totalPoints} ƒëi·ªÉm</p>\r\n          </div>\r\n        </div>\r\n        {quiz.description && (\r\n          <div className=",
  "totalspanQuestionsCorrectDivHienThiThoiGianLamBaiG": ">{total}</span> questions correct\r\n          </div>\r\n          {/* Hi·ªÉn th·ªã th·ªùi gian l√†m b√†i - gi·ªëng y h·ªát Leaderboard */}\r\n          {typeof result.timeSpent ===",
  "totalspanQuestionsCorrectDivHienThiThoiGianLamBaiT": ">{total}</span> questions correct\r\n              </div>\r\n              {/* Hi·ªÉn th·ªã th·ªùi gian l√†m b√†i */}\r\n              {typeof result.timeSpent ===",
  "traLoiNgan": "Tr·∫£ l·ªùi ng·∫Øn",
  "tracNghiem": "Tr·∫Øc nghi·ªám",
  "tracNghiemNhieuLuaChon": "Tr·∫Øc nghi·ªám nhi·ªÅu l·ª±a ch·ªçn",
  "tracNghiemNhieuLuaChon4DapAn1Dung": "tr·∫Øc nghi·ªám nhi·ªÅu l·ª±a ch·ªçn (4 ƒë√°p √°n, 1 ƒë√∫ng)",
  "tracNghiemTao4DapAnMacDinhNewanswersArrayfromLengt": ":\r\n        // Tr·∫Øc nghi·ªám: t·∫°o 4 ƒë√°p √°n m·∫∑c ƒë·ªãnh\r\n        newAnswers = Array.from({ length: 4 }, (_, i) => ({\r\n          id: generateId(),\r\n          text:",
  "tracNghiemoptionOptionValue": ">Tr·∫Øc nghi·ªám</option>\r\n                      <option value=",
  "tranTrong": "Tr√¢n tr·ªçng,",
  "tranTrongbrstrongquizAppTeamstrongPDivClass": ">Tr√¢n tr·ªçng,<br><strong>Quiz App Team</strong> üéØ</p>\r\n          \r\n          <div class=",
  "trangChu": "Trang ch·ªß",
  "trangNayHienThi": "Trang n√†y hi·ªÉn th·ªã:",
  "trangThaiKiemDuyetAdminFeaturesEnhancedAdminProper": "; // Tr·∫°ng th√°i ki·ªÉm duy·ªát\r\n  \r\n  // **ADMIN FEATURES**: Enhanced admin properties\r\n  rating?: number; // Average rating from users\r\n  featured?: boolean; // Featured quiz\r\n  archived?: boolean; // Archived status\r\n  approvedAt?: Date;\r\n  approvedBy?: string;\r\n  rejectedAt?: Date;\r\n  rejectedBy?: string;\r\n  rejectionReason?: string;\r\n  featuredAt?: Date;\r\n  archivedAt?: Date;\r\n  views?: number; // Number of views\r\n  completionRate?: number; // Percentage of users who complete the quiz\r\n  \r\n  // **EDIT WORKFLOW**: Quiz edit approval workflow\r\n  canEdit?: boolean; // Whether creator can edit this quiz\r\n  needsReApproval?: boolean; // Whether quiz needs re-approval after edit\r\n  isApproved?: boolean; // Quick approval status check\r\n  resubmittedAt?: Date; // When quiz was resubmitted after edit\r\n}\r\n\r\nexport interface QuizResult {\r\n  id: string;\r\n  quizId: string;\r\n  userId: string;\r\n  userName?: string;\r\n  userEmail?: string;\r\n  score: number;\r\n  totalQuestions: number;\r\n  correctAnswers: number;\r\n  timeSpent: number; // in seconds\r\n  answers: UserAnswer[];\r\n  completedAt: Date;\r\n}\r\n\r\nexport interface UserAnswer {\r\n  questionId: string;\r\n  selectedAnswerId: string;\r\n  isCorrect: boolean;\r\n  timeSpent: number; // in seconds\r\n}\r\n\r\nexport interface QuizStats {\r\n  totalQuizzes: number;\r\n  totalQuestions: number;\r\n  categories: string[];\r\n  averageScore: number;\r\n  totalAttempts: number;\r\n}\r\n\r\nexport interface QuizFilters {\r\n  category?: string;\r\n  difficulty?:",
  "trimHelperDeLayIconTheoLoaiTaiLieuConstGetresource": ").trim();\r\n\r\n  // Helper ƒë·ªÉ l·∫•y icon theo lo·∫°i t√†i li·ªáu\r\n  const getResourceIcon = (type: string) => {\r\n    switch (type) {\r\n      case",
  "tronLan": "Tr·ªôn l·∫´n",
  "tronLanoptionSelectDivDivLabelClassname": ">Tr·ªôn l·∫´n</option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <label className=",
  "trongNhomActiveConstTotalcreatorsActiveusersfilter": "trong nh√≥m active\r\n        const totalCreators = activeUsers.filter(u => u?.role ===",
  "trungBinh": "Trung b√¨nh",
  "trungBinhHocSinhTrungHocPhoThong": "trung b√¨nh (h·ªçc sinh trung h·ªçc ph·ªï th√¥ng)",
  "trungBinhoptionOptionValue": ">üü° Trung b√¨nh</option>\r\n              <option value=",
  "trungBinhspanHelperDeLayIconTheoLoaiTaiLieuConstGe": ">üü° Trung b√¨nh</span>;\r\n    }\r\n  };\r\n\r\n  // Helper ƒë·ªÉ l·∫•y icon theo lo·∫°i t√†i li·ªáu\r\n  const getResourceIcon = (type: string) => {\r\n    switch (type) {\r\n      case",
  "tryAgain": "Th·ª≠ l·∫°i",
  "tryTaoSystemPromptConstSystempromptCustompromptThi": ");\r\n    }\r\n\r\n    try {\r\n      // T·∫°o system prompt\r\n      const systemPrompt = customPrompt || this.getDefaultPrompt(numQuestions, difficulty, language);\r\n      \r\n      // G·ªçi Firebase Function\r\n      const generateQuestions = httpsCallable(this.functions,",
  "tstatusrejectedButtonDivDivDivQuizListFilteredquiz": "}\r\n              >\r\n                {t('status.rejected')}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Quiz List */}\r\n        {filteredQuizzes.length === 0 ? (\r\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-12 text-center\">\r\n            <div className=\"w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6\">\r\n              <BookOpen className=\"w-10 h-10 text-gray-400\" />\r\n            </div>\r\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\r\n              {searchTerm ? t('admin.quizManagement.empty.noMatchTitle') : t('admin.quizManagement.empty.noQuizzesTitle')}\r\n            </h3>\r\n            <p className=\"text-gray-600 mb-8 max-w-md mx-auto\">\r\n              {searchTerm \r\n                ? t('admin.quizManagement.empty.noMatchDesc')\r\n                : t('admin.quizManagement.empty.noQuizzesDesc')\r\n              }\r\n            </p>\r\n            {!searchTerm && (\r\n              <div className=\"flex justify-center\">\r\n                <button\r\n                  onClick={() => window.open('/creator', '_blank')}\r\n                  className=\"px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center gap-2\"\r\n                >\r\n                  <BookOpen className=\"w-5 h-5\" />\r\n                  {t('admin.quizManagement.empty.goToCreator')}\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <div className=\"grid gap-6\">\r\n            {filteredQuizzes.map((quiz) => (\r\n              <div key={quiz.id} className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6 hover:shadow-md transition-shadow\">\r\n                <div className=\"flex items-start justify-between\">\r\n                  <div className=\"flex-1\">\r\n                    <div className=\"flex items-center gap-3 mb-3\">\r\n                      <h3 className=\"text-xl font-bold text-gray-900\">{quiz.title}</h3>\r\n                      {getStatusBadge(quiz.status)}\r\n                      {getDifficultyBadge(quiz.difficulty)}\r\n                    </div>\r\n                    \r\n                    <p className=\"text-gray-600 mb-4 line-clamp-2\">{quiz.description}</p>\r\n                    \r\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 text-sm text-gray-600 mb-3\">\r\n                      <div>\r\n                        <span className=\"font-medium\">{t('admin.quizManagement.table.category')}:</span> {quiz.category}\r\n                      </div>\r\n                      <div>\r\n                        <span className=\"font-medium\">{t('quiz.questions')}:</span> {quiz.questions.length}\r\n                      </div>\r\n                      <div>\r\n                        <span className=\"font-medium\">{t('admin.quizManagement.table.createdAt')}:</span> {quiz.createdAt.toLocaleDateString()}\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng t√†i li·ªáu h·ªçc t·∫≠p */}\r\n                    {quiz.learningResources && quiz.learningResources.length > 0 && (\r\n                      <div className=\"flex items-center gap-2 mt-2\">\r\n                        <div className=\"flex items-center gap-1.5 px-3 py-1.5 bg-emerald-50 border border-emerald-200 rounded-lg\">\r\n                          <FileText className=\"w-4 h-4 text-emerald-600\" />\r\n                          <span className=\"text-xs font-medium text-emerald-700\">\r\n                            {quiz.learningResources.length} t√†i li·ªáu h·ªçc t·∫≠p\r\n                          </span>\r\n                        </div>\r\n                        {quiz.learningResources.some((r: any) => r.required) && (\r\n                          <span className=\"text-xs px-2 py-1 bg-red-100 text-red-700 rounded-full font-medium\">\r\n                            ‚ö†Ô∏è C√≥ t√†i li·ªáu b·∫Øt bu·ªôc\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  {/* Actions - 6 ch·ª©c nƒÉng: View, Edit, Approve, Reject, Reopen, Delete */}\r\n                  <div className=\"flex items-center gap-2 ml-6\">\r\n                    {/* 1. Xem tr∆∞·ªõc (lu√¥n hi·ªÉn th·ªã) */}\r\n                      <button\r\n                      onClick={() => handlePreview(quiz)}\r\n                      className=\"p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors\"\r\n                        title={t('admin.quizManagement.tooltips.preview')}\r\n                    >\r\n                      <Eye className=\"w-5 h-5\" />\r\n                    </button>\r\n\r\n                    {/* 2. Ch·ªânh s·ª≠a (lu√¥n hi·ªÉn th·ªã) */}\r\n                      <button\r\n                      onClick={() => handleEdit(quiz.id)}\r\n                      className=\"p-2 text-purple-600 hover:bg-purple-50 rounded-lg transition-colors\"\r\n                        title={t('admin.quizManagement.tooltips.edit')}\r\n                    >\r\n                      <Edit3 className=\"w-5 h-5\" />\r\n                    </button>\r\n                    \r\n                    {/* 3 & 4. Duy·ªát & T·ª´ ch·ªëi (ch·ªâ hi·ªÉn th·ªã khi pending) */}\r\n                    {quiz.status === 'pending' && (\r\n                      <>\r\n                          <button\r\n                          onClick={() => handleApprove(quiz.id)}\r\n                          className=\"p-2 text-green-600 hover:bg-green-50 rounded-lg transition-colors\"\r\n                            title={t('admin.quizManagement.tooltips.approve')}\r\n                        >\r\n                          <Check className=\"w-5 h-5\" />\r\n                        </button>\r\n                          <button\r\n                          onClick={() => handleReject(quiz.id)}\r\n                          className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors\"\r\n                            title={t('admin.quizManagement.tooltips.reject')}\r\n                        >\r\n                          <X className=\"w-5 h-5\" />\r\n                        </button>\r\n                      </>\r\n                    )}\r\n\r\n                    {/* 5. M·ªü l·∫°i (hi·ªÉn th·ªã khi ƒë√£ duy·ªát ho·∫∑c t·ª´ ch·ªëi) */}\r\n                      {(quiz.status === 'approved' || quiz.status === 'rejected') && (\r\n                      <button\r\n                        onClick={() => handleReopen(quiz.id)}\r\n                        className=\"p-2 text-orange-600 hover:bg-orange-50 rounded-lg transition-colors\"\r\n                          title={t('admin.quizManagement.tooltips.reopen')}\r\n                      >\r\n                        <RotateCcw className=\"w-5 h-5\" />\r\n                      </button>\r\n                    )}\r\n                    \r\n                    {/* 6. X√≥a (lu√¥n hi·ªÉn th·ªã) */}\r\n                      <button\r\n                      onClick={() => handleDelete(quiz.id)}\r\n                      className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors\"\r\n                        title={t('admin.quizManagement.tooltips.delete')}\r\n                    >\r\n                      <Trash2 className=\"w-5 h-5\" />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n        </>\r\n        )}\r\n\r\n        {activeTab === 'editRequests' && (\r\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\r\n            <div className=\"flex justify-between items-center mb-6\">\r\n              <h3 className=\"text-lg font-semibold flex items-center gap-2\">\r\n                <AlertCircle className=\"w-5 h-5 text-orange-500\" />\r\n                Y√™u c·∫ßu ch·ªânh s·ª≠a Quiz ({editRequests.length})\r\n              </h3>\r\n            </div>\r\n            \r\n            {editRequests.length === 0 ? (\r\n              <div className=\"text-center py-12\">\r\n                <AlertCircle className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n                <p className=\"text-gray-500 mb-4\">{t(\"admin.editRequests.emptyTitle\")}</p>\r\n                <p className=\"text-sm text-gray-400\">{t(\"admin.editRequests.emptyDesc\")}</p>\r\n              </div>\r\n            ) : (\r\n              <div className=\"space-y-4\">\r\n                {editRequests.map((request) => (\r\n                  <div key={request.id} className=\"border border-gray-200 rounded-lg p-6 bg-white shadow-sm\">\r\n                    <div className=\"flex items-start justify-between\">\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"flex items-center gap-3 mb-3\">\r\n                          <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\r\n                            <User className=\"w-5 h-5 text-blue-600\" />\r\n                          </div>\r\n                          <div>\r\n                            <h4 className=\"font-semibold text-gray-900\">\r\n                              {request.requestedByName || request.requestedByEmail || 'Ng∆∞·ªùi d√πng kh√¥ng x√°c ƒë·ªãnh'}\r\n                            </h4>\r\n                            <p className=\"text-sm text-gray-500\">\r\n                              {request.requestedByEmail || request.requestedBy || 'Email kh√¥ng x√°c ƒë·ªãnh'}\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"bg-gray-50 rounded-lg p-4 mb-3\">\r\n                          <h5 className=\"font-medium text-gray-900 mb-2\">\r\n                            üìù Quiz: {request.quizTitle || 'T√™n quiz kh√¥ng x√°c ƒë·ªãnh'}\r\n                          </h5>\r\n                          <p className=\"text-sm text-gray-700 mb-2\">\r\n                            <strong>L√Ω do y√™u c·∫ßu:</strong> {request.reason || 'Kh√¥ng c√≥ l√Ω do c·ª• th·ªÉ'}\r\n                          </p>\r\n                          {request.description && (\r\n                            <p className=\"text-sm text-gray-600\">\r\n                              <strong>Chi ti·∫øt:</strong> {request.description}\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                        \r\n                        <div className=\"flex items-center gap-4 text-sm text-gray-500\">\r\n                          <span className=\"flex items-center gap-1\">\r\n                            <Clock className=\"w-4 h-4\" />\r\n                            {request.requestedAt?.toLocaleDateString('vi-VN', {\r\n                              day: '2-digit',\r\n                              month: '2-digit', \r\n                              year: 'numeric',\r\n                              hour: '2-digit',\r\n                              minute: '2-digit'\r\n                            }) || 'Th·ªùi gian kh√¥ng x√°c ƒë·ªãnh'}\r\n                          </span>\r\n                          <span className=\"px-2 py-1 bg-orange-100 text-orange-700 rounded-full text-xs font-medium\">{t(\"admin.editRequests.pending\")}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"flex gap-2 ml-6\">\r\n                        <button\r\n                          onClick={() => handleApproveEditRequest(request.id, request.quizId)}\r\n                          className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2 shadow-sm\"\r\n                          title={t(\"admin.editRequests.approveTitle\")}\r\n                        >\r\n                          <Check className=\"w-4 h-4\" />{t(\"admin.editRequests.approve\")}\r\n                        </button>\r\n                        <button\r\n                          onClick={() => handleRejectEditRequest(request.id)}\r\n                          className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors flex items-center gap-2 shadow-sm\"\r\n                          title={t(\"admin.editRequests.rejectTitle\")}\r\n                        >\r\n                          <X className=\"w-4 h-4\" />{t(\"admin.editRequests.reject\")}\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n      {/* Preview Modal */}\r\n      {showPreview && previewQuiz && (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\r\n          <div className=\"bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\r\n            <div className=\"p-6 border-b border-gray-200\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <h2 className=\"text-xl font-bold\">{t('admin.preview.title')}: {previewQuiz.title}</h2>\r\n                <button\r\n                  onClick={() => setShowPreview(false)}\r\n                  className=\"p-2 text-gray-400 hover:text-gray-600 rounded-lg\"\r\n                >\r\n                  <X className=\"w-5 h-5\" />\r\n                </button>\r\n              </div>\r\n            </div>\r\n            \r\n            <div className=\"p-6\">\r\n              <div className=\"space-y-6\">\r\n                <div>\r\n                  <h3 className=\"font-semibold mb-2\">{t('admin.preview.description')}:</h3>\r\n                  <p className=\"text-gray-600\">{previewQuiz.description}</p>\r\n                </div>\r\n                \r\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n                  <div>\r\n                    <span className=\"font-semibold\">{t('admin.preview.category')}:</span> {previewQuiz.category}\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"font-semibold\">{t('admin.preview.difficulty')}:</span> {previewQuiz.difficulty}\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"font-semibold\">{t('admin.preview.questions')}:</span> {previewQuiz.questions.length}\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"font-semibold\">{t('admin.preview.status')}:</span> {getStatusBadge(previewQuiz.status || 'pending')}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* T√†i li·ªáu h·ªçc t·∫≠p trong Preview */}\r\n                {previewQuiz.learningResources && previewQuiz.learningResources.length > 0 && (\r\n                  <div className=\"bg-gradient-to-r from-emerald-50 to-teal-50 border border-emerald-200 rounded-lg p-4\">\r\n                    <h3 className=\"font-semibold mb-3 flex items-center gap-2 text-emerald-800\">\r\n                      <FileText className=\"w-5 h-5\" />\r\n                      üìö T√†i li·ªáu h·ªçc t·∫≠p ({previewQuiz.learningResources.length})\r\n                    </h3>\r\n                    <div className=\"space-y-2\">\r\n                      {previewQuiz.learningResources.map((resource: any, idx: number) => (\r\n                        <div \r\n                          key={resource.id || idx} \r\n                          className=\"bg-white rounded-lg p-3 border border-emerald-100\"\r\n                        >\r\n                          <div className=\"flex items-start gap-3\">\r\n                            {/* Icon & Type Badge */}\r\n                            <div className={",
  "tu5Den1000GiayChoMoiCauHoi": "T·ª´ 5 ƒë·∫øn 1000 gi√¢y cho m·ªói c√¢u h·ªèi",
  "tu5Den1000GiayChoMoiCauHoipDivSettingsDivClassname": ">T·ª´ 5 ƒë·∫øn 1000 gi√¢y cho m·ªói c√¢u h·ªèi</p>\n          </div>\n\n          {/* Settings */}\n          <div className=",
  "tu5Den120Phut": "T·ª´ 5 ƒë·∫øn 120 ph√∫t",
  "tu5Den120PhutpDivTagsDivClassname": ">T·ª´ 5 ƒë·∫øn 120 ph√∫t</p>\r\n        </div>\r\n\r\n        {/* Tags */}\r\n        <div className=",
  "tuChoi": "‚ùå T·ª´ ch·ªëi",
  "tuChoioptionSelectDivDivDivDivDivActivetab": ">‚ùå T·ª´ ch·ªëi</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {activeTab ===",
  "tuChoispanDefaultReturnSpanClassname": ">‚ùå T·ª´ ch·ªëi</span>;\r\n      default:\r\n        return <span className=",
  "tuanNay": "Tu·∫ßn n√†y",
  "tuyChinhCachAiTaoCauHoiChoBan": "T√πy ch·ªânh c√°ch AI t·∫°o c√¢u h·ªèi cho b·∫°n",
  "tuyChinhCachAiTaoCauHoiChoBanpDivDivClassname": ">T√πy ch·ªânh c√°ch AI t·∫°o c√¢u h·ªèi cho b·∫°n</p>\r\n              </div>\r\n\r\n              <div className=",
  "typeFilenameTaoQuizidTamThoiNeuChuaCoDungTimestamp": ", type, file.name);\r\n        \r\n        // T·∫°o quizId t·∫°m th·ªùi n·∫øu ch∆∞a c√≥ (d√πng timestamp)\r\n        const tempQuizId =",
  "typeFiletypeUploadNgayKhongDoiCompressionConstUplo": ",\r\n      type: file.type\r\n    });\r\n\r\n    // üöÄ UPLOAD NGAY - Kh√¥ng ƒë·ª£i compression\r\n    const uploadTask = uploadBytesResumable(storageRef, file, metadata);\r\n\r\n    const uploadResult = await new Promise<ImageUploadResult>((resolve, _reject) => {\r\n      uploadTask.on(\r\n        'state_changed',\r\n        (snapshot) => {\r\n          if (onProgress) {\r\n            const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n            onProgress({\r\n              progress: Math.round(progress),\r\n              bytesTransferred: snapshot.bytesTransferred,\r\n              totalBytes: snapshot.totalBytes,\r\n              state: snapshot.state as 'running' | 'paused'\r\n            });\r\n          }\r\n        },\r\n        (error) => {\r\n          console.error('‚ùå Instant upload error:', error);\r\n          resolve({\r\n            success: false,\r\n            error: 'L·ªói upload: ' + error.message\r\n          });\r\n        },\r\n        async () => {\r\n          try {\r\n            const originalUrl = await getDownloadURL(uploadTask.snapshot.ref);\r\n            \r\n            console.log('‚úÖ INSTANT UPLOAD DONE:', {\r\n              time: '1-3s',\r\n              url: originalUrl.substring(0, 50) + '...'\r\n            });\r\n\r\n            // Return ngay - kh√¥ng ƒë·ª£i thumbnails\r\n            resolve({\r\n              success: true,\r\n              originalUrl,\r\n              fileName,\r\n              filePath,\r\n              thumbnailUrls: {} // S·∫Ω c√≥ sau 5-30s\r\n            });\r\n\r\n            // üîÑ Background: ƒê·ª£i thumbnails sau (kh√¥ng block)\r\n            if (generateThumbnails) {\r\n              setTimeout(async () => {\r\n                const thumbnails = await getThumbnailUrls(fileName);\r\n                console.log('üñºÔ∏è Thumbnails ready (background):', Object.keys(thumbnails));\r\n              }, 10000); // ƒê·ª£i 10s r·ªìi check\r\n            }\r\n\r\n            if (onProgress) {\r\n              onProgress({\r\n                progress: 100,\r\n                bytesTransferred: uploadTask.snapshot.totalBytes,\r\n                totalBytes: uploadTask.snapshot.totalBytes,\r\n                state: 'success'\r\n              });\r\n            }\r\n          } catch (error: any) {\r\n            resolve({\r\n              success: false,\r\n              error: 'Kh√¥ng l·∫•y ƒë∆∞·ª£c URL: ' + error.message\r\n            });\r\n          }\r\n        }\r\n      );\r\n    });\r\n\r\n    return uploadResult;\r\n\r\n  } catch (error: any) {\r\n    console.error('‚ùå Instant upload error:', error);\r\n    return {\r\n      success: false,\r\n      error: 'C√≥ l·ªói x·∫£y ra: ' + error.message\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Upload avatar v·ªõi optimization cho profile pictures\r\n */\r\nexport const uploadAvatar = async (\r\n  file: File,\r\n  onProgress?: (progress: UploadProgress) => void\r\n): Promise<ImageUploadResult> => {\r\n  return uploadImage(file, {\r\n    folder: 'avatars',\r\n    maxSizeKB: 2048, // 2MB max for avatars\r\n    allowedTypes: ['image/jpeg', 'image/png', 'image/webp'],\r\n    generateThumbnails: true\r\n  }, onProgress);\r\n};\r\n\r\n/**\r\n * Upload quiz cover image\r\n */\r\nexport const uploadQuizCover = async (\r\n  file: File,\r\n  onProgress?: (progress: UploadProgress) => void\r\n): Promise<ImageUploadResult> => {\r\n  return uploadImage(file, {\r\n    folder: 'covers',\r\n    maxSizeKB: 3072, // 3MB max for covers\r\n    allowedTypes: ['image/jpeg', 'image/png', 'image/webp'],\r\n    generateThumbnails: true\r\n  }, onProgress);\r\n};\r\n\r\n/**\r\n * Upload quiz question image\r\n */\r\nexport const uploadQuizImage = async (\r\n  file: File,\r\n  onProgress?: (progress: UploadProgress) => void\r\n): Promise<ImageUploadResult> => {\r\n  return uploadImage(file, {\r\n    folder: 'quizzes',\r\n    maxSizeKB: 2048, // 2MB max for quiz images\r\n    allowedTypes: ['image/jpeg', 'image/png', 'image/webp', 'image/gif'],\r\n    generateThumbnails: true\r\n  }, onProgress);\r\n};\r\n\r\n/**\r\n * Delete image from Storage (c·∫£ original v√† thumbnails)\r\n */\r\nexport const deleteImage = async (filePath: string): Promise<{ success: boolean; error?: string }> => {\r\n  try {\r\n    const auth = getAuth();\r\n    if (!auth.currentUser) {\r\n      return { success: false, error: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p' };\r\n    }\r\n\r\n    // Delete original image\r\n    const imageRef = ref(storage, filePath);\r\n    await deleteObject(imageRef);\r\n\r\n    // Try to delete thumbnails\r\n    const fileName = filePath.split('/').pop();\r\n    if (fileName) {\r\n      const nameWithoutExt = fileName.substring(0, fileName.lastIndexOf('.'));\r\n      const extension = fileName.split('.').pop();\r\n\r\n      const thumbnailSizes = ['200x200', '400x400', '800x800'];\r\n      \r\n      for (const size of thumbnailSizes) {\r\n        try {\r\n          const thumbnailPath =",
  "typeFormdatatypeTitleFormdatatitleDescriptionFormd": ",\r\n      type: formData.type!,\r\n      title: formData.title!,\r\n      description: formData.description || '',\r\n      url: formData.url!,\r\n      required: formData.required || false,\r\n      threshold: formData.threshold || {},\r\n      learningOutcomes: formData.learningOutcomes || [],\r\n      order: formData.order || resources.length,\r\n      thumbnailUrl: formData.thumbnailUrl,\r\n      whyWatch: formData.whyWatch,\r\n      estimatedTime: formData.estimatedTime,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    };\r\n\r\n    if (editingId) {\r\n      // Update existing\r\n      onResourcesChange(resources.map(r => r.id === editingId ? newResource : r));\r\n      toast.success('ƒê√£ c·∫≠p nh·∫≠t t√†i li·ªáu');\r\n    } else {\r\n      // Add new\r\n      onResourcesChange([...resources, newResource]);\r\n      toast.success('ƒê√£ th√™m t√†i li·ªáu');\r\n    }\r\n\r\n    setShowForm(false);\r\n    setEditingId(null);\r\n  };\r\n\r\n  const getResourceIcon = (type: ResourceType) => {\r\n    switch (type) {\r\n      case 'video': return <Video className=\"w-5 h-5\" />;\r\n      case 'pdf': return <FileText className=\"w-5 h-5\" />;\r\n      case 'image': return <ImageIcon className=\"w-5 h-5\" />;\r\n      case 'link': return <LinkIcon className=\"w-5 h-5\" />;\r\n      default: return <Music className=\"w-5 h-5\" />;\r\n    }\r\n  };\r\n\r\n  const getTypeLabel = (type: ResourceType) => {\r\n    const labels: Record<ResourceType, string> = {\r\n      video: 'Video',\r\n      pdf: 'PDF',\r\n      image: '·∫¢nh/Slide',\r\n      audio: 'Audio',\r\n      link: 'Link (YouTube/Web)',\r\n      slides: 'Slides'\r\n    };\r\n    return labels[type];\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h3 className=\"text-lg font-semibold text-gray-900\">\r\n            üìö T√†i li·ªáu h·ªçc t·∫≠p <span className=\"text-red-500\">*</span>\r\n          </h3>\r\n          <p className=\"text-sm text-gray-600 mt-1\">\r\n            Th√™m √≠t nh·∫•t 1 t√†i li·ªáu (video, PDF, ·∫£nh, ho·∫∑c link) ƒë·ªÉ h·ªçc vi√™n xem tr∆∞·ªõc khi l√†m b√†i\r\n          </p>\r\n        </div>\r\n        <button\r\n          onClick={handleAddResource}\r\n          className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n        >\r\n          <Plus className=\"w-4 h-4\" />\r\n          Th√™m t√†i li·ªáu\r\n        </button>\r\n      </div>\r\n\r\n      {/* Resources List */}\r\n      {resources.length === 0 ? (\r\n        <div className=\"text-center py-12 bg-red-50 rounded-lg border-2 border-dashed border-red-300\">\r\n          <Upload className=\"w-12 h-12 mx-auto text-red-400 mb-3\" />\r\n          <p className=\"text-red-600 font-semibold mb-2\">‚ö†Ô∏è B·∫Øt bu·ªôc c√≥ √≠t nh·∫•t 1 t√†i li·ªáu</p>\r\n          <p className=\"text-sm text-gray-600 mb-4\">\r\n            T√†i li·ªáu gi√∫p h·ªçc vi√™n chu·∫©n b·ªã t·ªët h∆°n tr∆∞·ªõc khi l√†m b√†i.<br/>\r\n            B·∫°n kh√¥ng th·ªÉ ti·∫øp t·ª•c n·∫øu ch∆∞a th√™m t√†i li·ªáu.\r\n          </p>\r\n          <button\r\n            onClick={handleAddResource}\r\n            className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium\"\r\n          >\r\n            + Th√™m t√†i li·ªáu ƒë·∫ßu ti√™n\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"space-y-3\">\r\n          {resources.map((resource, index) => (\r\n            <div\r\n              key={resource.id}\r\n              className=\"bg-white border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow\"\r\n            >\r\n              <div className=\"flex items-start gap-4\">\r\n                {/* Icon */}\r\n                <div className={",
  "ui": {
    "admin": "Administrator",
    "creator": "Ng∆∞·ªùi t·∫°o",
    "dashboard": "B·∫£ng ƒëi·ªÅu khi·ªÉn",
    "hideStats": "Hide statistics",
    "login": "ƒêƒÉng nh·∫≠p",
    "logout": "ƒêƒÉng xu·∫•t",
    "management": "Management",
    "menu": "Menu",
    "navigation": "Navigation",
    "profile": "H·ªì s∆°",
    "quizManagement": "Qu·∫£n l√Ω Quiz",
    "register": "ƒêƒÉng k√Ω",
    "settings": "C√†i ƒë·∫∑t",
    "showStats": "Show statistics",
    "user": "Ng∆∞·ªùi d√πng",
    "userManagement": "Qu·∫£n l√Ω ng∆∞·ªùi d√πng",
    "welcome": "Ch√†o m·ª´ng",
    "welcomeRole": "Welcome with role"
  },
  "uidUseruidRoleUserdataChiCheckEmailVerificationCho": ", { uid: user.uid, role, userData });\r\n            \r\n            // Ch·ªâ check email verification cho user th∆∞·ªùng, kh√¥ng ph·∫£i admin\r\n            if (!user.emailVerified && user.email !==",
  "undefinedIfIsadminaccountTuDongGanRoleAdminUserrol": "| undefined;\r\n    \r\n    if (isAdminAccount) {\r\n      // T·ª± ƒë·ªông g√°n role admin\r\n      userRole =",
  "ungDungGapSuCoKhongMongMuon": "·ª®ng d·ª•ng g·∫∑p s·ª± c·ªë kh√¥ng mong mu·ªën.",
  "unlockedcounttotalcountDaMoKhoaDivDivDivClassname": ">\r\n            {unlockedCount}/{totalCount} ƒë√£ m·ªü kh√≥a\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=",
  "update": "C·∫≠p nh·∫≠t",
  "updatedatNewDateMergeTrueLuuVaoLocalstorageLocalst": ",\r\n        updatedAt: new Date()\r\n      }, { merge: true });\r\n      \r\n      // L∆∞u v√†o localStorage\r\n      localStorage.setItem(`user_role_${userCredential.user.uid}`,",
  "updatedprogressStartedatUpdatedprogressstartedatTi": "]: {\r\n        ...updatedProgress,\r\n        startedAt: updatedProgress.startedAt ? Timestamp.fromDate(updatedProgress.startedAt) : serverTimestamp(),\r\n        lastActivityAt: serverTimestamp(),\r\n        completedAt: updatedProgress.completedAt ? Timestamp.fromDate(updatedProgress.completedAt) : null\r\n      },\r\n      lastActivityAt: serverTimestamp(),\r\n      updatedAt: serverTimestamp()\r\n    });\r\n\r\n    console.log('‚úÖ Resource progress updated:', resourceId, progress);\r\n  } catch (error) {\r\n    console.error('‚ùå Error updating resource progress:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Ki·ªÉm tra resource ƒë√£ ho√†n th√†nh threshold ch∆∞a\r\n */\r\nexport const validateResourceCompletion = (\r\n  resource: LearningResource,\r\n  progress: ResourceViewProgress\r\n): { completed: boolean; reason?: string } => {\r\n  const threshold = resource.threshold;\r\n\r\n  switch (resource.type) {\r\n    case 'video':\r\n      // Check video completion\r\n      if (threshold.minWatchSec && (!progress.secondsWatched || progress.secondsWatched < threshold.minWatchSec)) {\r\n        return {\r\n          completed: false,\r\n          reason:",
  "upload": "T·∫£i l√™n",
  "uploadAnh": "Upload ·∫£nh",
  "uploadAnhButtonButtonType": ">\r\n              üì§ Upload ·∫£nh\r\n            </button>\r\n            <button\r\n              type=",
  "uploadAnhButtonThumbnailsPreviewShowthumbnailsObje": "/>\r\n              Upload ·∫£nh\r\n            </>\r\n          )}\r\n        </button>\r\n      )}\r\n\r\n      {/* Thumbnails Preview */}\r\n      {showThumbnails && Object.keys(thumbnails).length > 0 && (\r\n        <div className=",
  "uploadAnhHoacNhapUrl": "Upload ·∫¢nh ho·∫∑c nh·∫≠p URL *",
  "uploadAnhThanhCong": "Upload ·∫£nh th√†nh c√¥ng! ‚ú®",
  "uploadAudioHoacNhapUrl": "Upload Audio ho·∫∑c nh·∫≠p URL *",
  "uploadPdfHoacNhapUrl": "Upload PDF ho·∫∑c nh·∫≠p URL *",
  "uploadThatBai": "Upload th·∫•t b·∫°i",
  "uploadTypeThanhCong": "‚úÖ Upload ${type} th√†nh c√¥ng!",
  "uploadVideoHoacNhapUrl": "Upload Video ho·∫∑c nh·∫≠p URL *",
  "uploadedfilesize10241024tofixed2MbDaXuLyThanhCongP": ">\r\n                      {(uploadedFile.size / 1024 / 1024).toFixed(2)} MB - ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <button\r\n                  onClick={removeUploadedFile}\r\n                  className=",
  "urlAnh": "URL ·∫£nh",
  "urlDaSanSang": "‚úÖ URL ƒë√£ s·∫µn s√†ng",
  "urlDaSanSangpPClassname": ">‚úÖ URL ƒë√£ s·∫µn s√†ng</p>\r\n                    <p className=",
  "userNguoiDung": "User (Ng∆∞·ªùi d√πng)",
  "userNguoiDungh3PClassname": ">User (Ng∆∞·ªùi d√πng)</h3>\r\n                <p className=",
  "userUserUidUseruidEmailUseremailDisplaynameUserdis": ", {\r\n        user: user ? {\r\n          uid: user.uid,\r\n          email: user.email,\r\n          displayName: user.displayName,\r\n          emailVerified: user.emailVerified\r\n        } : null,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n      \r\n      if (user) {\r\n        try {\r\n          // Get role from Firestore tr∆∞·ªõc khi check email verification\r\n          const userDocRef = doc(db,",
  "useranswertextspanDivHienThiDapAnChoMultipleChoice": ">{userAnswerText}</span>\r\n                </div>\r\n                \r\n                {/* Hi·ªÉn th·ªã ƒë√°p √°n cho multiple choice, image v√† boolean */}\r\n                {(question.type ===",
  "usercredentialuseruidKiemTraNeuLaTaiKhoanAdminCoDi": ", userCredential.user.uid);\r\n    \r\n    // Ki·ªÉm tra n·∫øu l√† t√†i kho·∫£n admin c·ªë ƒë·ªãnh\r\n    const isAdminAccount = credentials.email ===",
  "usercredentialuseruidUserdataGuiEmailXacThucAwaitS": ", userCredential.user.uid), userData);\r\n\r\n    // G·ª≠i email x√°c th·ª±c\r\n    await sendEmailVerification(userCredential.user);\r\n\r\n    return {\r\n      uid: userCredential.user.uid,\r\n      email: userCredential.user.email,\r\n      displayName: userCredential.user.displayName,\r\n      photoURL: userCredential.user.photoURL,\r\n      emailVerified: userCredential.user.emailVerified,\r\n      role:",
  "userdataisactiveFalseTstatusactiveTstatusinactiveS": "}>\r\n                      {userData.isActive !== false ? t('status.active') : t('status.inactive')}\r\n                  </span>\r\n                </td>\r\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                  {userData.createdAt?.toDate?.()?.toLocaleDateString() || 'N/A'}\r\n                </td>\r\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\r\n                  <div className=\"flex space-x-2\">\r\n                    {userData.id !== user?.uid && (\r\n                      <>\r\n                        <button\r\n                          onClick={() => setConfirmModal({ open: true, type: 'toggleUserStatus', payload: { userId: userData.id, currentStatus: userData.isActive !== false }, message: userData.isActive !== false ? 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën kh√≥a t√†i kho·∫£n n√†y?' : 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën k√≠ch ho·∫°t t√†i kho·∫£n n√†y?' })}\r\n                          className={",
  "useremailKhongTuDongTaoDocumentNuaDeLoginpageXuLyC": ", user.email);\r\n            \r\n            // Kh√¥ng t·ª± ƒë·ªông t·∫°o document n·ªØa, ƒë·ªÉ LoginPage x·ª≠ l√Ω\r\n            // Ch·ªâ fallback n·∫øu l√† admin email ƒë·∫∑c bi·ªát\r\n            if (user.email ===",
  "usererrorAddUserWithMinimalDataIfTheresAnErrorLoad": ", userError);\r\n          // Add user with minimal data if there's an error\r\n          loadedCreators.push({\r\n            id: userDoc.id,\r\n            displayName: userData.displayName || userData.email || 'Ng∆∞·ªùi d√πng',\r\n            email: userData.email || '',\r\n            role: userData.role || 'creator',\r\n            isActive: userData.isActive !== false,\r\n            createdAt: userData.createdAt?.toDate() || new Date(),\r\n            lastLoginAt: userData.lastLoginAt?.toDate(),\r\n            quizCount: 0,\r\n            totalPlays: 0,\r\n            avgRating: 0,\r\n            status: userData.status || 'active',\r\n            permissions: userData.permissions || {\r\n              canCreateQuiz: true,\r\n              canEditOwnQuiz: true,\r\n              canDeleteOwnQuiz: true,\r\n              canViewAnalytics: true\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      console.log('Loaded creators:', loadedCreators.length);\r\n      setCreators(loadedCreators);\r\n      \r\n      // Show empty state if no real creators found\r\n      if (loadedCreators.length === 0) {\r\n        console.log('No real creators found');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading creators:', error);\r\n      toast.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch creator');\r\n      setCreators([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getQuizIdsByCreator = async (creatorId: string): Promise<string[]> => {\r\n    try {\r\n      const quizzesQuery = query(\r\n        collection(db, 'quizzes'),\r\n        where('createdBy', '==', creatorId)\r\n      );\r\n      const snapshot = await getDocs(quizzesQuery);\r\n      return snapshot.docs.map(doc => doc.id);\r\n    } catch (error) {\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const loadStats = async () => {\r\n    try {\r\n      const usersQuery = query(\r\n        collection(db, 'users'),\r\n        where('role', 'in', ['creator', 'admin'])\r\n      );\r\n      const usersSnapshot = await getDocs(usersQuery);\r\n      \r\n      const allCreators = usersSnapshot.docs.map(doc => doc.data());\r\n      const totalCreators = allCreators.length;\r\n      const activeCreators = allCreators.filter(u => u.status !== 'banned' && u.status !== 'suspended').length;\r\n      const suspendedCreators = allCreators.filter(u => u.status === 'suspended').length;\r\n      const bannedCreators = allCreators.filter(u => u.status === 'banned').length;\r\n\r\n      // Count total quizzes\r\n      const quizzesSnapshot = await getCountFromServer(collection(db, 'quizzes'));\r\n      const totalQuizzes = quizzesSnapshot.data().count;\r\n\r\n      setStats({\r\n        totalCreators,\r\n        activeCreators,\r\n        suspendedCreators,\r\n        bannedCreators,\r\n        totalQuizzes,\r\n        thisMonth: Math.floor(totalQuizzes * 0.3) // Mock this month data\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading stats:', error);\r\n      // Set empty stats on error\r\n      setStats({\r\n        totalCreators: 0,\r\n        activeCreators: 0,\r\n        suspendedCreators: 0,\r\n        bannedCreators: 0,\r\n        totalQuizzes: 0,\r\n        thisMonth: 0\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleStatusChange = async (creatorId: string, newStatus: 'active' | 'suspended' | 'banned') => {\r\n    try {\r\n      await updateDoc(doc(db, 'users', creatorId), {\r\n        status: newStatus,\r\n        isActive: newStatus === 'active'\r\n      });\r\n\r\n      setCreators(creators.map(creator =>\r\n        creator.id === creatorId\r\n          ? { ...creator, status: newStatus, isActive: newStatus === 'active' }\r\n          : creator\r\n      ));\r\n\r\n      toast.success(",
  "useridConstUserdocAwaitGetdocuserrefLetNewstatsIfU": ", userId);\r\n    const userDoc = await getDoc(userRef);\r\n    let newStats = {};\r\n    if (userDoc.exists()) {\r\n      const currentData = userDoc.data();\r\n      const currentStats = currentData.stats || {};\r\n      newStats = {\r\n        totalQuizzes: (currentStats.totalQuizzes || 0) + 1,\r\n        totalQuestions: (currentStats.totalQuestions || 0) + quizData.totalQuestions,\r\n        totalCorrectAnswers: (currentStats.totalCorrectAnswers || 0) + quizData.correctAnswers,\r\n        totalTimeSpent: (currentStats.totalTimeSpent || 0) + quizData.timeSpent,\r\n        averageScore: currentStats.totalQuizzes > 0 \r\n          ? Math.round(((currentStats.averageScore || 0) * currentStats.totalQuizzes + quizData.score) / (currentStats.totalQuizzes + 1))\r\n          : quizData.score,\r\n        bestScore: Math.max(currentStats.bestScore || 0, quizData.score),\r\n        lastQuizDate: new Date(),\r\n        difficultyStats: {\r\n          ...currentStats.difficultyStats,\r\n          [quizData.difficulty]: {\r\n            attempts: ((currentStats.difficultyStats?.[quizData.difficulty]?.attempts) || 0) + 1,\r\n            bestScore: Math.max((currentStats.difficultyStats?.[quizData.difficulty]?.bestScore) || 0, quizData.score)\r\n          }\r\n        }\r\n      };\r\n      await setDoc(userRef, {\r\n        ...currentData,\r\n        stats: newStats,\r\n        updatedAt: new Date()\r\n      }, { merge: true });\r\n    }\r\n    // --- C·∫≠p nh·∫≠t user_stats (leaderboard) ---\r\n    const statsRef = doc(db,",
  "userisactiveFalseHoatDongBiKhoaSpanTdTdClassnamepx": "}>\r\n                    {user.isActive !== false ? 'Ho·∫°t ƒë·ªông' : 'B·ªã kh√≥a'}\r\n                  </span>\r\n                </td>\r\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\r\n                  <button\r\n                    onClick={() => setConfirmModal({ open: true, type: 'toggleUserStatus', payload: { userId: user.id, currentStatus: user.isActive !== false }, message: user.isActive !== false ? 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën kh√≥a t√†i kho·∫£n n√†y?' : 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën m·ªü kh√≥a t√†i kho·∫£n n√†y?' })}\r\n                    className={",
  "userisactiveFalseKhoaMoKhoaButtonUseremailAdmin123": "}\r\n                  >\r\n                    {user.isActive !== false ? 'Kh√≥a' : 'M·ªü kh√≥a'}\r\n                  </button>\r\n                  \r\n                  {user.email !== 'admin123@gmail.com' && (\r\n                    <button\r\n                      onClick={() => setConfirmModal({ open: true, type: 'deleteUser', payload: { userId: user.id }, message: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?' })}\r\n                      className=\"px-3 py-1 bg-red-100 text-red-600 rounded text-xs hover:bg-red-200\"\r\n                    >{t(\"action.clear\")}\r\n                    </button>\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderQuizzes = () => (\r\n    <div className=\"space-y-6\" data-testid=\"quiz-review-system\">\r\n        {/* Alert */}\r\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\r\n        <div className=\"flex items-center\">\r\n          <span className=\"text-2xl mr-3\">üìù</span>\r\n          <div>\r\n            <h3 className=\"font-semibold text-yellow-800\">{t('admin.quizManagement.label')}</h3>\r\n            <p className=\"text-yellow-700 text-sm\">{t('admin.tabs.quizzes')}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"bg-white rounded-lg shadow overflow-hidden\">\r\n        <div className=\"px-6 py-4 border-b border-gray-200\">\r\n          <h3 className=\"text-lg font-semibold\">{t('admin.quizManagement.label')}</h3>\r\n        </div>\r\n        \r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full divide-y divide-gray-200\">\r\n            <thead className=\"bg-gray-50\">\r\n              <tr>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  {t('admin.quizManagement.table.title')}\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  {t('quiz.description')}\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  {t('status.pending')}\r\n                </th>\r\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  {t('action.action')}\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n              {quizzes.map((quiz) => (\r\n                <tr key={quiz.id}>\r\n                  <td className=\"px-6 py-4 font-medium text-gray-900\">\r\n                    <div>\r\n                      <div className=\"font-medium\">{quiz.title}</div>\r\n                      {quiz.learningResources && quiz.learningResources.length > 0 && (\r\n                        <div className=\"flex items-center gap-1.5 mt-1 text-xs text-emerald-600\">\r\n                          <span className=\"inline-flex items-center gap-1 px-1.5 py-0.5 bg-emerald-50 rounded\">\r\n                            üìö {quiz.learningResources.length} t√†i li·ªáu\r\n                          </span>\r\n                          {quiz.learningResources.some((r: any) => r.required) && (\r\n                            <span className=\"text-red-600\">‚ö†Ô∏è</span>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"px-6 py-4 text-sm text-gray-600 max-w-xs truncate\">\r\n                    {quiz.description}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <span className={",
  "utilityFunctionDeKiemTraDapAnDienTuExportConstChec": ";\r\n\r\n// Utility function ƒë·ªÉ ki·ªÉm tra ƒë√°p √°n ƒëi·ªÅn t·ª´\r\nexport const checkShortAnswer = (userAnswer: string, question: Question): boolean => {\r\n  if (question.type !==",
  "vaiTroDaDuocChonDuLieuSeDuocDongBoKhiKetNoiOnDinh": "Vai tr√≤ ƒë√£ ƒë∆∞·ª£c ch·ªçn. D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c ƒë·ªìng b·ªô khi k·∫øt n·ªëi ·ªïn ƒë·ªãnh.",
  "validBooleanErrorStringCheckFileTypeIfAllowedtypes": "]\r\n): { valid: boolean; error?: string } => {\r\n  // Check file type\r\n  if (!allowedTypes.includes(file.type)) {\r\n    return {\r\n      valid: false,\r\n      error: `Ch·ªâ ch·∫•p nh·∫≠n c√°c ƒë·ªãnh d·∫°ng: ${allowedTypes.map(t => t.split(",
  "vanHoc": "VƒÉn h·ªçc",
  "vdGioiThieuVeReactHooks": "VD: Gi·ªõi thi·ªáu v·ªÅ React Hooks",
  "vdJavascriptLichSuVietNamToanHoc": "VD: JavaScript, L·ªãch s·ª≠ Vi·ªát Nam, To√°n h·ªçc...",
  "vdVideoNayGiupBanHieuUsestateVaUseeffect": "VD: Video n√†y gi√∫p b·∫°n hi·ªÉu useState v√† useEffect",
  "veAdminDashboard": "‚Üê V·ªÅ Admin Dashboard",
  "veAdminDashboardADivDivDivHeaderSuccessBannerDivCl": ">\r\n                ‚Üê V·ªÅ Admin Dashboard\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      {/* Success Banner */}\r\n      <div className=",
  "veDashboard": "üè† V·ªÅ Dashboard",
  "veDashboardButtonButtonVariant": ">\n        üè† V·ªÅ Dashboard\n      </Button>\n      \n      <Button\n        variant=",
  "viDuJavascriptReactFrontend": "V√≠ d·ª•: javascript, react, frontend",
  "viDuJavascriptReactFrontendpDivCoverImageUploadDiv": ">V√≠ d·ª•: javascript, react, frontend</p>\r\n        </div>\r\n\r\n        {/* Cover Image Upload */}\r\n        <div className=",
  "viSaoNenXem": "V√¨ sao n√™n xem:",
  "viSaoNenXemGoiYChoHocVien": "üí° V√¨ sao n√™n xem? (g·ª£i √Ω cho h·ªçc vi√™n)",
  "viSaoNenXemGoiYChoHocVienLabelInputType": ">\r\n                  üí° V√¨ sao n√™n xem? (g·ª£i √Ω cho h·ªçc vi√™n)\r\n                </label>\r\n                <input\r\n                  type=",
  "vietDanhGia": "Vi·∫øt ƒë√°nh gi√°",
  "vietDanhGiaButtonDivDivDivClassname": ">\r\n                    Vi·∫øt ƒë√°nh gi√°\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div className=",
  "vietDanhGiaButtonDivDivDivStatsCardsStatsDivClassn": ">\r\n                Vi·∫øt ƒë√°nh gi√°\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        {stats && (\r\n          <div className=",
  "vietDanhGiaButtonLinkToquizquizidreviewsClassname": "/>\r\n                Vi·∫øt ƒë√°nh gi√°\r\n              </button>\r\n              \r\n              <Link\r\n                to={`/quiz/${quizId}/reviews`}\r\n                className=",
  "vietDanhGiaDauTien": "Vi·∫øt ƒë√°nh gi√° ƒë·∫ßu ti√™n",
  "vietDanhGiaDauTienButtonDecorativeElementsDivClass": "/>\r\n                      Vi·∫øt ƒë√°nh gi√° ƒë·∫ßu ti√™n\r\n                    </button>\r\n                    \r\n                    {/* Decorative Elements */}\r\n                    <div className=",
  "view": "Xem",
  "viewDetails": "Xem chi ti·∫øt",
  "viewedresourcessizeresourceslengthTaiLieuSpanDivDi": ">\r\n                {viewedResources.size}/{resources.length} t√†i li·ªáu\r\n              </span>\r\n            </div>\r\n            <div className=",
  "voiBooleanNeuChon": ") {\r\n      // V·ªõi Boolean: n·∫øu ch·ªçn",
  "voiDoKhoDifficultyYeuCauDinhDangJsonChinhXac": "v·ªõi ƒë·ªô kh√≥ ${difficulty}.\r\n\r\nY√™u c·∫ßu ƒë·ªãnh d·∫°ng JSON ch√≠nh x√°c:\r\n{",
  "vuiLongChonAnhTruoc": "Vui l√≤ng ch·ªçn ·∫£nh tr∆∞·ªõc",
  "vuiLongChonFileAnh": "Vui l√≤ng ch·ªçn file ·∫£nh",
  "vuiLongChonFileFiletypetouppercaseHopLe": "Vui l√≤ng ch·ªçn file ${fileType.toUpperCase()} h·ª£p l·ªá",
  "vuiLongChonSoSao": "Vui l√≤ng ch·ªçn s·ªë sao",
  "vuiLongCungCapNoiDungDeTaoCauHoi": "Vui l√≤ng cung c·∫•p n·ªôi dung ƒë·ªÉ t·∫°o c√¢u h·ªèi",
  "vuiLongDoiMotChut": "Vui l√≤ng ƒë·ª£i m·ªôt ch√∫t",
  "vuiLongKiemTraLaiUrlVideo": "Vui l√≤ng ki·ªÉm tra l·∫°i URL video",
  "vuiLongKiemTraLaiUrlVideopButtonOnclickoncloseClas": ">Vui l√≤ng ki·ªÉm tra l·∫°i URL video</p>\r\n          <button\r\n            onClick={onClose}\r\n            className=",
  "vuiLongNhapDayDu6So": "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß 6 s·ªë",
  "vuiLongNhapEmail": "Vui l√≤ng nh·∫≠p email",
  "vuiLongNhapTieuDe": "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ",
  "vuiLongNhapUrlHoacUploadFile": "Vui l√≤ng nh·∫≠p URL ho·∫∑c upload file",
  "vuiLongSuDungMaOtpBenDuoiDeHoanTatQuaTrinhDangKy": "Vui l√≤ng s·ª≠ d·ª•ng m√£ OTP b√™n d∆∞·ªõi ƒë·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω:",
  "vuiLongSuDungMaOtpBenDuoiDeHoanTatQuaTrinhDangKypD": ">Vui l√≤ng s·ª≠ d·ª•ng m√£ OTP b√™n d∆∞·ªõi ƒë·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω:</p>\r\n          \r\n          <div class=",
  "welcome": "Ch√†o m·ª´ng",
  "windowlocationhrefIfLocationstateCoStateTuNavigati": ", window.location.href);\r\n    \r\n    if (location.state) {\r\n      // C√≥ state t·ª´ navigation - s·ª≠ d·ª•ng ngay\r\n      const resultData = location.state as ResultState;\r\n      console.log(",
  "wordDocumentServiceTrichXuatTextTuDocxExportClassW": "};\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Word Document Service - Tr√≠ch xu·∫•t text t·ª´ .docx\r\n */\r\nexport class WordService {\r\n  static async extractTextFromWord(file: File): Promise<FileProcessingResult> {\r\n    try {\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      \r\n      // S·ª≠ d·ª•ng mammoth ƒë·ªÉ ƒë·ªçc .docx\r\n      const result = await mammoth.extractRawText({ arrayBuffer });\r\n      \r\n      return {\r\n        extractedText: result.value,\r\n        success: true,\r\n        metadata: {\r\n          fileSize: file.size,\r\n          fileName: file.name,\r\n          messages: result.messages // Warnings t·ª´ mammoth\r\n        }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        extractedText: '',\r\n        success: false,\r\n        error:",
  "xacNhanNopBai": "X√°c nh·∫≠n n·ªôp b√†i",
  "xacNhanNopBaiH3PClassname": ">\r\n              X√°c nh·∫≠n n·ªôp b√†i\r\n            </h3>\r\n            <p className=",
  "xacThuc": "X√°c th·ª±c",
  "xacThucButtonButtonOnclickoncancelClassname": "/>\r\n                X√°c th·ª±c\r\n              </>\r\n            )}\r\n          </button>\r\n\r\n          <button\r\n            onClick={onCancel}\r\n            className=",
  "xacThucThanhCong": "X√°c th·ª±c th√†nh c√¥ng!",
  "xemDanhGia": "Xem ƒë√°nh gi√°",
  "xemLai": "Xem l·∫°i",
  "xemLaiPlayClassname": "/>\r\n                    Xem l·∫°i\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Play className=",
  "xemLaiXuatBan": "Xem l·∫°i & Xu·∫•t b·∫£n",
  "xemLichSuKetQua": "‚Ä¢ Xem l·ªãch s·ª≠ k·∫øt qu·∫£",
  "xemQuaTaiLieuDeChuanBiTotHonChoBaiQuiz": "Xem qua t√†i li·ªáu ƒë·ªÉ chu·∫©n b·ªã t·ªët h∆°n cho b√†i quiz",
  "xemQuaTaiLieuDeChuanBiTotHonChoBaiQuizPDivProgress": ">\r\n              Xem qua t√†i li·ªáu ƒë·ªÉ chu·∫©n b·ªã t·ªët h∆°n cho b√†i quiz\r\n            </p>\r\n          </div>\r\n\r\n          {/* Progress */}\r\n          <div className=",
  "xemTaiLieu": "Xem t√†i li·ªáu",
  "xemTaiLieuADivDivDivDivDivDivPreviewquizquestionsl": ">\r\n                                    üîó Xem t√†i li·ªáu\r\n                                  </a>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {previewQuiz.questions.length > 0 && (\r\n                  <div>\r\n                    <h3 className=",
  "xemTaiLieuADivDivDivDivDivQuizAsAnylearningresourc": "/>\n                                Xem t√†i li·ªáu\n                              </a>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                {(quiz as any).learningResources.some((r: any) => r.required) && (\n                  <div className=",
  "xemTaiLieuADivDivDivDivDivWarningForRequiredResour": "/>\r\n                          Xem t√†i li·ªáu\r\n                        </a>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Warning for Required Resources */}\r\n          {quiz.resources.some((r: any) => r.required) && (\r\n            <div className=",
  "xemTaiLieuBatBuocDeTiepTuc": "Xem t√†i li·ªáu b·∫Øt bu·ªôc ƒë·ªÉ ti·∫øp t·ª•c",
  "xemTaiLieuBatBuocDeTiepTucButtonDivAllrequiredview": "/>\r\n                  Xem t√†i li·ªáu b·∫Øt bu·ªôc ƒë·ªÉ ti·∫øp t·ª•c\r\n                </>\r\n              )}\r\n            </button>\r\n          </div>\r\n\r\n          {!allRequiredViewed && (\r\n            <p className=",
  "xemTaiLieuDeHieuSauHonTruocKhiLamBai": "üí° Xem t√†i li·ªáu ƒë·ªÉ hi·ªÉu s√¢u h∆°n tr∆∞·ªõc khi l√†m b√†i!",
  "xemTaiLieuDeHieuSauHonTruocKhiLamBaiPDivActionButt": ">\n              üí° Xem t√†i li·ªáu ƒë·ªÉ hi·ªÉu s√¢u h∆°n tr∆∞·ªõc khi l√†m b√†i!\n            </p>\n          </div>\n        )}\n\n        {/* Action buttons */}\n        <div className=",
  "xemTaiLieuNayTruocKhiLamBaiDeDatKetQuaTotNhat": "üí° Xem t√†i li·ªáu n√†y tr∆∞·ªõc khi l√†m b√†i ƒë·ªÉ ƒë·∫°t k·∫øt qu·∫£ t·ªët nh·∫•t!",
  "xemTaiLieuNayTruocKhiLamBaiDeDatKetQuaTotNhatPDivC": ">\n                  üí° Xem t√†i li·ªáu n√†y tr∆∞·ªõc khi l√†m b√†i ƒë·ªÉ ƒë·∫°t k·∫øt qu·∫£ t·ªët nh·∫•t!\n                </p>\n\n                <div className=",
  "xemTatCa": "Xem t·∫•t c·∫£",
  "xemTatCaDanhGia": "Xem t·∫•t c·∫£ ƒë√°nh gi√°",
  "xemTatCaDanhGiaLinkDivClassname": "/>\r\n                Xem t·∫•t c·∫£ ƒë√°nh gi√°\r\n              </Link>\r\n            </>\r\n          ) : (\r\n            <div className=",
  "xemTatCaKetQua": "üë§ Xem t·∫•t c·∫£ k·∫øt qu·∫£",
  "xemTatCaThongBao": "Xem t·∫•t c·∫£ th√¥ng b√°o",
  "xemTatCaThongBaoButtonDivDivBackdropIsopenDivClass": ">\r\n                Xem t·∫•t c·∫£ th√¥ng b√°o\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Backdrop */}\r\n      {isOpen && (\r\n        <div\r\n          className=",
  "xemThem": "Xem th√™m",
  "xemThemQuiz": "üìö Xem th√™m Quiz",
  "xemThemQuizButtonButtonOnclickNavigate": ">\n        üìö Xem th√™m Quiz\n      </Button>\n      \n      <Button\n        onClick={() => navigate(",
  "xemTienDo": "Xem ti·∫øn ƒë·ªô",
  "xemTienDoh3PClassname": ">Xem ti·∫øn ƒë·ªô</h3>\r\n            <p className=",
  "xemTrangThongKeRieng": "‚û§ Xem trang th·ªëng k√™ ri√™ng",
  "xemTrangThongKeRiengAPDivDivDivClassname": ">\r\n                    ‚û§ Xem trang th·ªëng k√™ ri√™ng\r\n                  </a>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          <div className=",
  "xemTrangThongKeRiengVoiBieuDo": "Xem trang th·ªëng k√™ ri√™ng v·ªõi bi·ªÉu ƒë·ªì",
  "xemTruoc": "Xem tr∆∞·ªõc",
  "xemTruocCauHoiGeneratedquestionslengthH3DivClassna": ">\r\n                  Xem tr∆∞·ªõc c√¢u h·ªèi ({generatedQuestions.length})\r\n                </h3>\r\n                <div className=",
  "xinChao": "Xin ch√†o,",
  "xinChaopPStyle": ">Xin ch√†o,</p>\r\n          <p style=",
  "xoa": "X√≥a",
  "xoaAvatar": "X√≥a avatar",
  "xoaAvatarButtonDivDivImageUploaderComponentImageup": ">\r\n                          X√≥a avatar\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Image Uploader Component */}\r\n                  <ImageUploader\r\n                    onUploadSuccess={(result: ImageUploadResult) => {\r\n                      if (result.originalUrl) {\r\n                        setAvatarUrl(result.originalUrl);\r\n                        toast.success(",
  "xoaBoLoc": "üîÑ X√≥a b·ªô l·ªçc",
  "xoaBoLocButtonUserrole": ">\r\n                    üîÑ X√≥a b·ªô l·ªçc\r\n                  </button>\r\n                  {(user?.role ===",
  "xoaQuiz": "X√≥a quiz",
  "xoaQuizThanhCong": "X√≥a quiz th√†nh c√¥ng!",
  "xoaQuizspanSpanClassnametextxsPx2Py1RoundedSelecte": ">X√≥a quiz</span>\r\n                        <span className={`text-xs px-2 py-1 rounded ${\r\n                          selectedCreator.permissions.canDeleteOwnQuiz \r\n                            ?",
  "xoayAnh": "Xoay ·∫£nh",
  "yes": "C√≥",
  "yeuCauChinhSuaDaBiTuChoi": "Y√™u c·∫ßu ch·ªânh s·ª≠a ƒë√£ b·ªã t·ª´ ch·ªëi",
  "yeuCauChinhSuaDaDuocGuiChoAdminPheDuyet": "Y√™u c·∫ßu ch·ªânh s·ª≠a ƒë√£ ƒë∆∞·ª£c g·ª≠i, ch·ªù admin ph√™ duy·ªát",
  "yeuCauChinhSuaDaDuocPheDuyet": "Y√™u c·∫ßu ch·ªânh s·ª≠a ƒë√£ ƒë∆∞·ª£c ph√™ duy·ªát",
  "yeuCauChinhSuaQuizEditrequestquiztitleCuaBanDaBiAd": "Y√™u c·∫ßu ch·ªânh s·ª≠a quiz \"${editRequest.quizTitle}\" c·ªßa b·∫°n ƒë√£ b·ªã admin t·ª´ ch·ªëi. Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.",
  "yeuCauChinhSuaQuizEditrequestslengthH3DivEditreque": "/>\r\n                Y√™u c·∫ßu ch·ªânh s·ª≠a Quiz ({editRequests.length})\r\n              </h3>\r\n            </div>\r\n            \r\n            {editRequests.length === 0 ? (\r\n              <div className=",
  "yeuCauMatKhau": "y√™u c·∫ßu m·∫≠t kh·∫©u",
  "yeuThich": "Y√™u th√≠ch",
  "yeuThichQuizNay": "Y√™u th√≠ch quiz n√†y",
  "yourAnswerSpanDivDivDivHienThiDapAnChoCheckboxQues": ">\r\n                              Your Answer\r\n                            </span>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n                {/* Hi·ªÉn th·ªã ƒë√°p √°n cho checkbox */}\r\n                {question.type ==="
}