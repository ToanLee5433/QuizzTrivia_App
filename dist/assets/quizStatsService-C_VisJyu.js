import{k as c,l as i,m as n,s,n as l,o as p,p as S,q as D,t as q}from"./index-CNQy308a.js";class A{async trackView(e,t){try{const a=c(i,"quizzes",e);if(await n(a,{"stats.views":l(1),"stats.lastUpdated":s()}),t){const r=c(i,"userQuizActivities",`${t}_${e}`);(await p(r)).exists()?await n(r,{viewed:!0,lastView:s()}):await S(r,{userId:t,quizId:e,viewed:!0,attempted:!1,completed:!1,attempts:0,bestScore:0,firstView:s(),lastView:s()})}}catch(a){console.error("Error tracking view:",a)}}async trackAttempt(e,t){try{const a=c(i,"quizzes",e);await n(a,{"stats.attempts":l(1),"stats.lastUpdated":s()});const r=c(i,"userQuizActivities",`${t}_${e}`);(await p(r)).exists()?await n(r,{attempted:!0,attempts:l(1),lastAttempt:s()}):await S(r,{userId:t,quizId:e,viewed:!0,attempted:!0,completed:!1,attempts:1,bestScore:0,firstView:s(),lastAttempt:s()})}catch(a){console.error("Error tracking attempt:",a)}}async trackCompletion(e,t,a,r){try{const o=Math.round(a/r*100),m=c(i,"quizzes",e),d=await p(m);if(d.exists()){const u=d.data().stats||{},v=u.completions||0,z=(u.totalScore||0)+o,f=v+1,g=Math.round(z/f);await n(m,{"stats.completions":l(1),"stats.totalScore":l(o),"stats.averageScore":g,"stats.lastUpdated":s()})}else await n(m,{"stats.completions":1,"stats.totalScore":o,"stats.averageScore":o,"stats.views":l(0),"stats.attempts":l(0),"stats.lastUpdated":s()});const w=c(i,"userQuizActivities",`${t}_${e}`),y=await p(w);if(y.exists()){const u=y.data().bestScore||0,v=Math.max(u,o);await n(w,{completed:!0,bestScore:v,lastCompletion:s()})}else await S(w,{userId:t,quizId:e,viewed:!0,attempted:!0,completed:!0,attempts:1,bestScore:o,firstView:s(),lastAttempt:s(),lastCompletion:s()});await D(q(i,"quizCompletions"),{userId:t,quizId:e,score:o,totalQuestions:r,completedAt:s()})}catch(o){console.error("Error tracking completion:",o)}}async getQuizStats(e){try{const t=c(i,"quizzes",e),a=await p(t);return a.exists()?a.data().stats||{views:0,attempts:0,completions:0,averageScore:0,totalScore:0,lastUpdated:new Date}:null}catch(t){return console.error("Error getting quiz stats:",t),null}}async getUserQuizActivity(e,t){try{const a=c(i,"userQuizActivities",`${e}_${t}`),r=await p(a);return r.exists()?r.data():null}catch(a){return console.error("Error getting user quiz activity:",a),null}}async initializeStatsForQuiz(e){try{const t=c(i,"quizzes",e);await n(t,{"stats.views":0,"stats.attempts":0,"stats.completions":0,"stats.averageScore":0,"stats.totalScore":0,"stats.lastUpdated":s()})}catch(t){console.error("Error initializing stats:",t)}}}const $=new A;export{$ as q};
