/**
 * 📁 Cloud Storage Paths Constants
 * Centralized storage paths để tránh typo và dễ maintain
 */

// ============= STORAGE FOLDERS =============
export const STORAGE_PATHS = {
  // User uploads
  AVATARS: 'avatars',
  
  // Quiz assets
  QUIZ_COVERS: 'covers',
  
  // Questions
  QUESTION_IMAGES: 'questions',
  
  // Learning Resources
  RESOURCES: {
    ROOT: 'resources',
    VIDEOS: 'resources/videos',
    PDFS: 'resources/pdfs',
    IMAGES: 'resources/images',
    AUDIOS: 'resources/audios',
  },
  
  // Thumbnails (auto-generated by Extension)
  THUMBNAILS: 'thumbnails',
  
  // Temporary uploads (cleanup after 24h)
  TEMP: 'temp',
} as const;

// ============= PATH BUILDERS =============
export const storagePaths = {
  // User avatar
  userAvatar: (userId: string, ext: string = 'jpg') => 
    `${STORAGE_PATHS.AVATARS}/${userId}.${ext}`,
  
  // Quiz cover
  quizCover: (quizId: string, ext: string = 'jpg') => 
    `${STORAGE_PATHS.QUIZ_COVERS}/${quizId}.${ext}`,
  
  // Question image
  questionImage: (quizId: string, questionId: string, ext: string = 'jpg') => 
    `${STORAGE_PATHS.QUESTION_IMAGES}/${quizId}/${questionId}.${ext}`,
  
  // Learning resources
  learningVideo: (quizId: string, resourceId: string, ext: string = 'mp4') =>
    `${STORAGE_PATHS.RESOURCES.VIDEOS}/${quizId}/${resourceId}.${ext}`,
  
  learningPDF: (quizId: string, resourceId: string) =>
    `${STORAGE_PATHS.RESOURCES.PDFS}/${quizId}/${resourceId}.pdf`,
  
  learningImage: (quizId: string, resourceId: string, ext: string = 'jpg') =>
    `${STORAGE_PATHS.RESOURCES.IMAGES}/${quizId}/${resourceId}.${ext}`,
  
  learningAudio: (quizId: string, resourceId: string, ext: string = 'mp3') =>
    `${STORAGE_PATHS.RESOURCES.AUDIOS}/${quizId}/${resourceId}.${ext}`,
  
  // Thumbnail (generated)
  thumbnail: (originalPath: string, size: '200x200' | '400x400' | '800x800') => {
    const fileName = originalPath.split('/').pop()?.split('.')[0];
    const ext = originalPath.split('.').pop();
    return `${STORAGE_PATHS.THUMBNAILS}/${fileName}_${size}.${ext}`;
  },
  
  // Temporary upload
  tempFile: (userId: string, filename: string) =>
    `${STORAGE_PATHS.TEMP}/${userId}/${filename}`,
};

// ============= FILE TYPES =============
export const FILE_TYPES = {
  IMAGE: {
    mimeTypes: ['image/jpeg', 'image/png', 'image/webp', 'image/gif'],
    extensions: ['.jpg', '.jpeg', '.png', '.webp', '.gif'],
    maxSize: 10 * 1024 * 1024, // 10MB
  },
  VIDEO: {
    mimeTypes: ['video/mp4', 'video/webm', 'video/quicktime'],
    extensions: ['.mp4', '.webm', '.mov'],
    maxSize: 100 * 1024 * 1024, // 100MB
  },
  PDF: {
    mimeTypes: ['application/pdf'],
    extensions: ['.pdf'],
    maxSize: 20 * 1024 * 1024, // 20MB
  },
  AUDIO: {
    mimeTypes: ['audio/mpeg', 'audio/wav', 'audio/ogg'],
    extensions: ['.mp3', '.wav', '.ogg'],
    maxSize: 20 * 1024 * 1024, // 20MB
  },
} as const;

// ============= VALIDATION HELPERS =============
export const storageValidation = {
  isValidImageType: (file: File): boolean =>
    FILE_TYPES.IMAGE.mimeTypes.includes(file.type as any),
  
  isValidVideoType: (file: File): boolean =>
    FILE_TYPES.VIDEO.mimeTypes.includes(file.type as any),
  
  isValidPDFType: (file: File): boolean =>
    FILE_TYPES.PDF.mimeTypes.includes(file.type as any),
  
  isValidAudioType: (file: File): boolean =>
    FILE_TYPES.AUDIO.mimeTypes.includes(file.type as any),
  
  isValidFileSize: (file: File, type: keyof typeof FILE_TYPES): boolean =>
    file.size <= FILE_TYPES[type].maxSize,
  
  getFileExtension: (filename: string): string =>
    filename.slice(filename.lastIndexOf('.')),
};

// ============= CLEANUP RULES =============
export const CLEANUP_RULES = {
  TEMP_FILES_LIFETIME: 24 * 60 * 60 * 1000, // 24 hours
  ORPHANED_FILES_CHECK_INTERVAL: 7 * 24 * 60 * 60 * 1000, // 7 days
};

export type StoragePath = string;
export type StoragePathBuilder = (...args: any[]) => StoragePath;
