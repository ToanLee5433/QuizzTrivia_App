import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { BrowserRouter } from 'react-router-dom';
import { configureStore } from '@reduxjs/toolkit';
import { toast } from 'react-toastify';
import authSlice from '../../auth/store';
import quizSlice from '../../quiz/store';
import AdminQuizManagement from '../pages/AdminQuizManagement';
// Mock dependencies
jest.mock('react-toastify', () => ({
  toast: {
    error: jest.fn(),
    success: jest.fn(),
    info: jest.fn(),
  },
}));

jest.mock('../../../lib/firebase/config', () => ({
  db: {},
}));

jest.mock('firebase/firestore', () => ({
  collection: jest.fn(),
  getDocs: jest.fn(() => Promise.resolve({
    docs: [
      {
        id: '1',
        data: () => ({
          title: 'React Basics Quiz',
          description: 'Learn React basics',
          status: 'pending',
          createdBy: 'user123',
          createdAt: { toLocaleDateString: () => '01/01/2024' },
          questions: [],
        })
      },
      {
        id: '2', 
        data: () => ({
          title: 'JavaScript Quiz',
          description: 'JavaScript fundamentals',
          status: 'approved',
          createdBy: 'user456',
          createdAt: { toLocaleDateString: () => '02/01/2024' },
          questions: [],
        })
      },
      {
        id: '3',
        data: () => ({
          title: 'Rejected Quiz',
          description: 'This quiz was rejected',
          status: 'rejected',
          createdBy: 'user789',
          createdAt: { toLocaleDateString: () => '03/01/2024' },
          questions: [],
        })
      }
    ]
  })),
  doc: jest.fn(),
  updateDoc: jest.fn(() => Promise.resolve()),
  deleteDoc: jest.fn(() => Promise.resolve()),
}));

jest.mock('../../quiz/components/QuizCard', () => {
  return function MockQuizCard({ quiz, onEdit, onDelete }: any) {
    return (
      <div data-testid="quiz-card">
        <h3>{quiz.title}</h3>
        <button onClick={() => onEdit?.(quiz)}>Edit</button>
        <button onClick={() => onDelete?.(quiz.id)}>Delete</button>
      </div>
    );
  };
});

jest.mock('../components/QuickActions', () => {
  return function MockQuickActions() {
    return <div data-testid="quick-actions">Quick Actions</div>;
  };
});

jest.mock('../components/BulkActions', () => {
  return function MockBulkActions() {
    return <div data-testid="bulk-actions">Bulk Actions</div>;
  };
});

jest.mock('../components/QuizPreview', () => {
  return function MockQuizPreview({ quiz, isOpen, onClose }: any) {
    if (!isOpen) return null;
    return (
      <div data-testid="quiz-preview">
        <h3>{quiz?.title}</h3>
        <button onClick={onClose}>Close</button>
      </div>
    );
  };
});

jest.mock('../components/AdminLayout', () => {
  return function MockAdminLayout({ children, title }: any) {
    return (
      <div data-testid="admin-layout">
        <h1>{title}</h1>
        {children}
      </div>
    );
  };
});

jest.mock('../../../shared/components/ui/Modal', () => {
  return function MockModal({ isOpen, children, title, onClose }: any) {
    if (!isOpen) return null;
    return (
      <div data-testid="modal">
        <h2>{title}</h2>
        <button onClick={onClose}>Close</button>
        {children}
      </div>
    );
  };
});

jest.mock('../components/QuizPreview', () => {
  return function MockQuizPreview({ quiz }: any) {
    return <div data-testid="quiz-preview">Preview: {quiz.title}</div>;
  };
});

const mockNavigate = jest.fn();
jest.mock('react-router-dom', () => ({
  ...jest.requireActual('react-router-dom'),
  useNavigate: () => mockNavigate,
}));

const createMockStore = (initialState = {}) => {
  return configureStore({
    reducer: {
      auth: authSlice,
      quiz: quizSlice,
    },
    preloadedState: {
      auth: {
        user: { 
          uid: '1', 
          email: 'admin@test.com', 
          displayName: 'Admin User',
          photoURL: null,
          emailVerified: true,
          role: 'admin' as const
        },
        isAuthenticated: true,
        isLoading: false,
        error: null,
        needsRoleSelection: false,
        authChecked: true,
      },
      quiz: {
        quizzes: [],
        currentQuiz: null,
        loading: false,
        error: null,
        userResults: [],
        isLoading: false,
        connectionError: false,
        filters: {
          category: 'all',
          difficulty: undefined,
          searchTerm: '',
        },
        currentQuestionIndex: 0,
        userAnswers: {},
        timeLeft: 0,
        quizStartTime: null,
        retryCount: 0,
        lastError: null,
        isTimeWarning: false,
        totalTime: 0,
      },
      ...initialState,
    },
  });
};

const renderWithProviders = (
  ui: React.ReactElement,
  { initialState = {} } = {}
) => {
  const store = createMockStore(initialState);
  return render(
    <Provider store={store}>
      <BrowserRouter>
        {ui}
      </BrowserRouter>
    </Provider>
  );
};

describe('AdminQuizManagement', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    mockNavigate.mockClear();
  });

  describe('Access Control', () => {
    it('should deny access for non-admin users', () => {
      renderWithProviders(<AdminQuizManagement />, {
        initialState: {
          auth: {
            user: { 
              uid: '1', 
              email: 'user@test.com', 
              displayName: 'Regular User',
              photoURL: null,
              emailVerified: true,
              role: 'user' as const
            },
            isAuthenticated: true,
            isLoading: false,
            error: null,
            needsRoleSelection: false,
            authChecked: true,
          },
        },
      });

      expect(screen.getByText('Bạn không có quyền truy cập trang này.')).toBeInTheDocument();
    });

    it('should allow access for admin users', () => {
      const { getDocs } = require('firebase/firestore');
      getDocs.mockResolvedValue({
        docs: [],
      });

      renderWithProviders(<AdminQuizManagement />);

      expect(screen.getByText('Quản lý Quiz')).toBeInTheDocument();
      expect(screen.getByText('Chào mừng đến với Admin Dashboard')).toBeInTheDocument();
    });
  });

  describe('Quiz Loading', () => {
    it('should display loading state', () => {
      const { getDocs } = require('firebase/firestore');
      getDocs.mockImplementation(() => new Promise(() => {})); // Never resolves

      renderWithProviders(<AdminQuizManagement />);

      // Since this is rendering Admin component, check for admin stats instead
      const statsCards = screen.getAllByText(/Tổng số Quiz|Người dùng|Quiz hoàn thành|Người tạo/);
      expect(statsCards.length).toBeGreaterThan(0);
    });

    it('should fetch and display quizzes', async () => {
      const { getDocs } = require('firebase/firestore');
      const mockQuizzes = [
        {
          id: '1',
          title: 'Test Quiz 1',
          description: 'Description 1',
          category: 'General',
          difficulty: 'Easy',
          status: 'pending',
          questions: [{ id: '1', question: 'Test?' }],
          createdBy: 'user1',
          createdAt: new Date(),
        },
        {
          id: '2',
          title: 'Test Quiz 2',
          description: 'Description 2',
          category: 'Science',
          difficulty: 'Hard',
          status: 'approved',
          questions: [{ id: '1', question: 'Test?' }],
          createdBy: 'user2',
          createdAt: new Date(),
        },
      ];

      getDocs.mockResolvedValue({
        docs: mockQuizzes.map(quiz => ({
          id: quiz.id,
          data: () => quiz,
        })),
      });

      renderWithProviders(<AdminQuizManagement />);

      await waitFor(() => {
        expect(screen.getByText('Chào mừng đến với Admin Dashboard')).toBeInTheDocument();
      });
    });
  });

  describe('Quiz Filtering', () => {
    beforeEach(async () => {
      const { getDocs } = require('firebase/firestore');
      const mockQuizzes = [
        {
          id: '1',
          title: 'Pending Quiz',
          status: 'pending',
          questions: [],
          createdAt: new Date(),
        },
        {
          id: '2',
          title: 'Approved Quiz',
          status: 'approved',
          questions: [],
          createdAt: new Date(),
        },
        {
          id: '3',
          title: 'Rejected Quiz',
          status: 'rejected',
          questions: [],
          createdAt: new Date(),
        },
      ];

      getDocs.mockResolvedValue({
        docs: mockQuizzes.map(quiz => ({
          id: quiz.id,
          data: () => quiz,
        })),
      });
    });

    it('should filter quizzes by status', async () => {
      renderWithProviders(<AdminQuizManagement />);

      await waitFor(() => {
        expect(screen.getByText('Quản lý Quiz')).toBeInTheDocument();
      });

      // Click on "Chờ duyệt" filter
      fireEvent.click(screen.getByText(/Chờ duyệt/));

      expect(screen.getByText('Pending Quiz')).toBeInTheDocument();
      expect(screen.queryByText('Approved Quiz')).not.toBeInTheDocument();
      expect(screen.queryByText('Rejected Quiz')).not.toBeInTheDocument();
    });

    it('should show correct counts in filter tabs', async () => {
      renderWithProviders(<AdminQuizManagement />);

      await waitFor(() => {
        expect(screen.getByText('Tất cả (3)')).toBeInTheDocument();
        expect(screen.getByText('Chờ duyệt (1)')).toBeInTheDocument();
        expect(screen.getByText('Đã duyệt (1)')).toBeInTheDocument();
        expect(screen.getByText('Bị từ chối (1)')).toBeInTheDocument();
      });
    });
  });

  describe('Quiz Actions', () => {
    beforeEach(async () => {
      const { getDocs } = require('firebase/firestore');
      getDocs.mockResolvedValue({
        docs: [{
          id: '1',
          data: () => ({
            id: '1',
            title: 'Test Quiz',
            status: 'pending',
            questions: [],
            createdAt: new Date(),
          }),
        }],
      });
    });

    it('should handle quiz preview', async () => {
      renderWithProviders(<AdminQuizManagement />);

      await waitFor(() => {
        expect(screen.getByText('Test Quiz')).toBeInTheDocument();
      });

      fireEvent.click(screen.getByText('👁️ Xem'));

      expect(screen.getByTestId('modal')).toBeInTheDocument();
      expect(screen.getByTestId('quiz-preview')).toBeInTheDocument();
    });

    it('should handle quiz approval', async () => {
      const { updateDoc } = require('firebase/firestore');
      updateDoc.mockResolvedValue({});

      renderWithProviders(<AdminQuizManagement />);

      await waitFor(() => {
        expect(screen.getByText('Test Quiz')).toBeInTheDocument();
      });

      fireEvent.click(screen.getByText('✅ Duyệt'));

      await waitFor(() => {
        expect(updateDoc).toHaveBeenCalledWith(
          expect.anything(),
          { status: 'approved', isPublished: true }
        );
        expect(toast.success).toHaveBeenCalledWith('Quiz đã được phê duyệt!');
      });
    });

    it('should handle quiz rejection', async () => {
      const { updateDoc } = require('firebase/firestore');
      updateDoc.mockResolvedValue({});

      renderWithProviders(<AdminQuizManagement />);

      await waitFor(() => {
        expect(screen.getByText('Test Quiz')).toBeInTheDocument();
      });

      fireEvent.click(screen.getByText('❌ Từ chối'));

      await waitFor(() => {
        expect(updateDoc).toHaveBeenCalledWith(
          expect.anything(),
          { status: 'rejected', isPublished: false }
        );
        expect(toast.success).toHaveBeenCalledWith('Quiz đã được từ chối!');
      });
    });

    it('should handle quiz deletion with confirmation', async () => {
      const { deleteDoc } = require('firebase/firestore');
      deleteDoc.mockResolvedValue({});

      renderWithProviders(<AdminQuizManagement />);

      await waitFor(() => {
        expect(screen.getByText('Test Quiz')).toBeInTheDocument();
      });

      fireEvent.click(screen.getByText('🗑️ Xóa'));

      // Confirm deletion in modal
      await waitFor(() => {
        expect(screen.getByTestId('modal')).toBeInTheDocument();
      });

      fireEvent.click(screen.getByText('Xóa'));

      await waitFor(() => {
        expect(deleteDoc).toHaveBeenCalled();
        expect(toast.success).toHaveBeenCalledWith('Quiz đã được xóa!');
      });
    });

    it('should navigate to create quiz page', async () => {
      renderWithProviders(<AdminQuizManagement />);

      await waitFor(() => {
        expect(screen.getByText('Tạo Quiz Mới')).toBeInTheDocument();
      });

      fireEvent.click(screen.getByText('Tạo Quiz Mới'));

      expect(mockNavigate).toHaveBeenCalledWith('/create-quiz?admin=true');
    });

    it('should navigate to edit quiz page', async () => {
      renderWithProviders(<AdminQuizManagement />);

      await waitFor(() => {
        expect(screen.getByText('Test Quiz')).toBeInTheDocument();
      });

      fireEvent.click(screen.getByText('✏️ Sửa'));

      expect(mockNavigate).toHaveBeenCalledWith('/edit-quiz/1?admin=true');
    });
  });

  describe('Error Handling', () => {
    it('should handle quiz loading errors', async () => {
      const { getDocs } = require('firebase/firestore');
      getDocs.mockRejectedValue(new Error('Network error'));

      renderWithProviders(<AdminQuizManagement />);

      await waitFor(() => {
        expect(toast.error).toHaveBeenCalledWith('Lỗi khi tải quiz!');
      });
    });

    it('should handle approval errors', async () => {
      const { getDocs, updateDoc } = require('firebase/firestore');
      getDocs.mockResolvedValue({
        docs: [{
          id: '1',
          data: () => ({
            id: '1',
            title: 'Test Quiz',
            status: 'pending',
            questions: [],
            createdAt: new Date(),
          }),
        }],
      });
      updateDoc.mockRejectedValue(new Error('Update error'));

      renderWithProviders(<AdminQuizManagement />);

      await waitFor(() => {
        expect(screen.getByText('Test Quiz')).toBeInTheDocument();
      });

      fireEvent.click(screen.getByText('✅ Duyệt'));

      await waitFor(() => {
        expect(toast.error).toHaveBeenCalledWith('Có lỗi xảy ra!');
      });
    });

    it('should handle deletion errors', async () => {
      const { getDocs, deleteDoc } = require('firebase/firestore');
      getDocs.mockResolvedValue({
        docs: [{
          id: '1',
          data: () => ({
            id: '1',
            title: 'Test Quiz',
            status: 'pending',
            questions: [],
            createdAt: new Date(),
          }),
        }],
      });
      deleteDoc.mockRejectedValue(new Error('Delete error'));

      renderWithProviders(<AdminQuizManagement />);

      await waitFor(() => {
        expect(screen.getByText('Test Quiz')).toBeInTheDocument();
      });

      fireEvent.click(screen.getByText('🗑️ Xóa'));

      await waitFor(() => {
        expect(screen.getByTestId('modal')).toBeInTheDocument();
      });

      fireEvent.click(screen.getByText('Xóa'));

      await waitFor(() => {
        expect(toast.error).toHaveBeenCalledWith('Có lỗi xảy ra khi xóa quiz!');
      });
    });
  });

  describe('Empty States', () => {
    it('should display empty state when no quizzes', async () => {
      const { getDocs } = require('firebase/firestore');
      getDocs.mockResolvedValue({ docs: [] });

      renderWithProviders(<AdminQuizManagement />);

      await waitFor(() => {
        expect(screen.getByText('Không có quiz nào.')).toBeInTheDocument();
      });
    });

    it('should display empty state when filtered results are empty', async () => {
      const { getDocs } = require('firebase/firestore');
      getDocs.mockResolvedValue({
        docs: [{
          id: '1',
          data: () => ({
            id: '1',
            title: 'Approved Quiz',
            status: 'approved',
            questions: [],
            createdAt: new Date(),
          }),
        }],
      });

      renderWithProviders(<AdminQuizManagement />);

      await waitFor(() => {
        expect(screen.getByText('Approved Quiz')).toBeInTheDocument();
      });

      // Filter by pending - should show empty
      fireEvent.click(screen.getByText(/Chờ duyệt/));

      expect(screen.getByText('Không có quiz nào.')).toBeInTheDocument();
    });
  });
});
