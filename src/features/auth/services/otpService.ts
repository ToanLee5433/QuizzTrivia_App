import CryptoJS from 'crypto-js';
import { getFirestore, collection, addDoc } from 'firebase/firestore';

// Initialize Firestore
const db = getFirestore();

// Secret key ƒë·ªÉ hash OTP (trong production n√™n l∆∞u trong env)
const OTP_SECRET = import.meta.env.VITE_OTP_SECRET || 'quiz-app-otp-secret-2025';
const OTP_EXPIRY_MINUTES = 10;

export interface OTPData {
  email: string;
  hashedOTP: string;
  expiresAt: number;
  attempts: number;
  maxAttempts: number;
}

/**
 * Generate random 6-digit OTP
 */
export const generateOTP = (): string => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

/**
 * Hash OTP v·ªõi email ƒë·ªÉ b·∫£o m·∫≠t
 */
const hashOTP = (email: string, otp: string): string => {
  return CryptoJS.SHA256(email + otp + OTP_SECRET).toString();
};

/**
 * Store OTP v√†o sessionStorage (kh√¥ng d√πng Firestore ƒë·ªÉ tr√°nh l·ªói permissions)
 */
export const storeOTP = (email: string, otp: string): void => {
  const otpData: OTPData = {
    email: email.toLowerCase().trim(),
    hashedOTP: hashOTP(email, otp),
    expiresAt: Date.now() + OTP_EXPIRY_MINUTES * 60 * 1000,
    attempts: 0,
    maxAttempts: 3
  };

  // L∆∞u v√†o sessionStorage (ch·ªâ t·ªìn t·∫°i trong tab hi·ªán t·∫°i)
  sessionStorage.setItem(`otp_${email.toLowerCase()}`, JSON.stringify(otpData));
  
  console.log('‚úÖ OTP stored securely (hashed)');
};

/**
 * G·ª≠i OTP qua Firestore Trigger Email Extension
 * Extension s·∫Ω t·ª± ƒë·ªông g·ª≠i email khi c√≥ document m·ªõi trong collection 'mail'
 */
export const sendOTPEmail = async (email: string, otp: string): Promise<{ success: boolean; message: string }> => {
  try {
    // T·∫°o HTML template cho email OTP
    const emailHTML = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; background-color: #f4f4f4; margin: 0; padding: 20px; }
          .container { max-width: 600px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
          .header { text-align: center; margin-bottom: 30px; }
          .logo { font-size: 32px; font-weight: bold; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent; }
          .otp-box { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 8px; margin: 30px 0; }
          .otp-code { font-size: 48px; font-weight: bold; letter-spacing: 8px; margin: 10px 0; }
          .warning { background: #fef3c7; border-left: 4px solid #f59e0b; padding: 15px; margin: 20px 0; border-radius: 4px; }
          .footer { text-align: center; color: #6b7280; font-size: 14px; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="logo">üß† Quiz App</div>
            <h2 style="color: #1f2937; margin-top: 10px;">M√£ X√°c Th·ª±c OTP</h2>
          </div>
          
          <p style="color: #374151;">Xin ch√†o,</p>
          <p style="color: #374151;">B·∫°n ƒë√£ y√™u c·∫ßu ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i <strong>Quiz App</strong>.</p>
          <p style="color: #374151;">Vui l√≤ng s·ª≠ d·ª•ng m√£ OTP b√™n d∆∞·ªõi ƒë·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω:</p>
          
          <div class="otp-box">
            <div style="font-size: 16px; opacity: 0.9;">M√É X√ÅC TH·ª∞C C·ª¶A B·∫†N</div>
            <div class="otp-code">${otp}</div>
            <div style="font-size: 14px; margin-top: 10px; opacity: 0.9;">‚è±Ô∏è C√≥ hi·ªáu l·ª±c trong 10 ph√∫t</div>
          </div>
          
          <div class="warning">
            <strong style="color: #92400e;">‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong>
            <ul style="margin: 10px 0; color: #92400e;">
              <li>M√£ OTP n√†y ch·ªâ c√≥ hi·ªáu l·ª±c trong <strong>10 ph√∫t</strong></li>
              <li><strong>KH√îNG chia s·∫ª</strong> m√£ n√†y v·ªõi b·∫•t k·ª≥ ai</li>
              <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒëƒÉng k√Ω, vui l√≤ng b·ªè qua email n√†y</li>
            </ul>
          </div>
          
          <p style="color: #374151;">Tr√¢n tr·ªçng,<br><strong>Quiz App Team</strong> üéØ</p>
          
          <div class="footer">
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
            <p>¬© 2025 Quiz App. All rights reserved.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    // T·∫°o document trong collection 'mail' - Extension s·∫Ω t·ª± ƒë·ªông g·ª≠i
    await addDoc(collection(db, 'mail'), {
      to: [email],
      from: 'lequytoanptit0303@gmail.com', // Default FROM address t·ª´ extension config
      replyTo: 'lequytoanptit0303@gmail.com',
      message: {
        subject: 'üîê M√£ x√°c th·ª±c ƒëƒÉng k√Ω Quiz App',
        html: emailHTML,
        text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}. M√£ n√†y c√≥ hi·ªáu l·ª±c trong 10 ph√∫t.`
      },
      createdAt: new Date()
    });

    console.log('‚úÖ Email queued successfully via Firestore extension');

    return {
      success: true,
      message: 'Email OTP ƒëang ƒë∆∞·ª£c g·ª≠i ƒëi...'
    };
  } catch (error: any) {
    console.error('Error queuing email:', error);
    return {
      success: false,
      message: error.message || 'Kh√¥ng th·ªÉ g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i.'
    };
  }
};

/**
 * Generate v√† g·ª≠i OTP
 */
export const generateAndSendOTP = async (email: string): Promise<{ success: boolean; message: string }> => {
  try {
    // Generate OTP
    const otp = generateOTP();
    
    // Store OTP locally (hashed)
    storeOTP(email, otp);
    
    // Send OTP via Cloud Function
    const result = await sendOTPEmail(email, otp);
    
    if (result.success) {
      return {
        success: true,
        message: `M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ${email}. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞.`
      };
    } else {
      // Clear stored OTP n·∫øu g·ª≠i th·∫•t b·∫°i
      clearOTP(email);
      return result;
    }
  } catch (error: any) {
    console.error('Error generating and sending OTP:', error);
    return {
      success: false,
      message: 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.'
    };
  }
};

/**
 * Verify OTP
 */
export const verifyOTP = (email: string, inputOTP: string): { success: boolean; message: string } => {
  const storageKey = `otp_${email.toLowerCase()}`;
  const storedData = sessionStorage.getItem(storageKey);

  if (!storedData) {
    return { success: false, message: 'Kh√¥ng t√¨m th·∫•y OTP. Vui l√≤ng y√™u c·∫ßu g·ª≠i l·∫°i.' };
  }

  try {
    const otpData: OTPData = JSON.parse(storedData);

    // Check expiry
    if (Date.now() > otpData.expiresAt) {
      sessionStorage.removeItem(storageKey);
      return { success: false, message: 'OTP ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu g·ª≠i l·∫°i.' };
    }

    // Check max attempts
    if (otpData.attempts >= otpData.maxAttempts) {
      sessionStorage.removeItem(storageKey);
      return { success: false, message: 'ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠. Vui l√≤ng y√™u c·∫ßu OTP m·ªõi.' };
    }

    // Verify OTP
    const inputHash = hashOTP(email, inputOTP);
    if (inputHash === otpData.hashedOTP) {
      // Success - x√≥a OTP
      sessionStorage.removeItem(storageKey);
      return { success: true, message: 'X√°c th·ª±c th√†nh c√¥ng!' };
    } else {
      // Failed - tƒÉng attempts
      otpData.attempts += 1;
      sessionStorage.setItem(storageKey, JSON.stringify(otpData));
      
      const remaining = otpData.maxAttempts - otpData.attempts;
      return { 
        success: false, 
        message: `OTP kh√¥ng ƒë√∫ng. C√≤n ${remaining} l·∫ßn th·ª≠.` 
      };
    }
  } catch (error) {
    console.error('Error verifying OTP:', error);
    return { success: false, message: 'C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c.' };
  }
};

/**
 * Clear OTP data
 */
export const clearOTP = (email: string): void => {
  sessionStorage.removeItem(`otp_${email.toLowerCase()}`);
};

/**
 * Get OTP expiry time
 */
export const getOTPExpiryTime = (email: string): number | null => {
  const storageKey = `otp_${email.toLowerCase()}`;
  const storedData = sessionStorage.getItem(storageKey);

  if (!storedData) return null;

  try {
    const otpData: OTPData = JSON.parse(storedData);
    return otpData.expiresAt;
  } catch {
    return null;
  }
};
